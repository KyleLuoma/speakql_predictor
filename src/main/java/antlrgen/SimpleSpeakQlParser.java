// Generated from SimpleSpeakQlParser.g4 by ANTLR 4.9.3
package antlrgen;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class SimpleSpeakQlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.9.3", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		SPACE=1, SPEC_MYSQL_COMMENT=2, COMMENT_INPUT=3, LINE_COMMENT=4, END_OF_FILE=5, 
		RETRIEVE=6, SHOW_ME=7, DISPLAY=8, PRESENT=9, FIND=10, WHAT_IS=11, WHAT_ARE=12, 
		WHAT_IS_THE=13, WHAT_ARE_THE=14, IN_TABLE=15, IN_TABLES=16, FROM_TABLE=17, 
		FROM_TABLES=18, JOIN_TABLE=19, BY_JOINING=20, BY_JOINING_TABLE=21, JOIN_WITH=22, 
		JOIN_WITH_TABLE=23, JOINED_WITH=24, JOINED_WITH_TABLE=25, BY_JOINING_WITH_TABLE=26, 
		WITH_TABLE=27, SPOKEN_DOT=28, AND_THEN=29, SUBQUERY=30, SCHRODINGER=31, 
		AUTOMATIC=32, AUTOMATICALLY=33, NOTHING=34, NO_COLUMNS=35, OPEN_PARENTHESIS=36, 
		LEFT_PARENTHESIS=37, CLOSE_PARENTHESIS=38, RIGHT_PARENTHESIS=39, OPEN_PAREN=40, 
		LEFT_PAREN=41, CLOSE_PAREN=42, RIGHT_PAREN=43, THE=44, ADD=45, ALL=46, 
		ALTER=47, ALWAYS=48, ANALYZE=49, AND=50, ARRAY=51, AS=52, ASC=53, BEFORE=54, 
		BETWEEN=55, BOTH=56, BY=57, CALL=58, CASE=59, CAST=60, CHANGE=61, CHARACTER=62, 
		COLLATE=63, COLUMN=64, CONDITION=65, CONSTRAINT=66, CONTINUE=67, CONVERT=68, 
		CREATE=69, CROSS=70, CURRENT=71, DECLARE=72, DEFAULT=73, DELAYED=74, DELETE=75, 
		DESC=76, DESCRIBE=77, DETERMINISTIC=78, DIAGNOSTICS=79, DISTINCT=80, DISTINCTROW=81, 
		DROP=82, EACH=83, ELSE=84, ELSEIF=85, EMPTY=86, ENCLOSED=87, ESCAPED=88, 
		EXCEPT=89, EXISTS=90, EXIT=91, EXPLAIN=92, FALSE=93, FETCH=94, FOR=95, 
		FORCE=96, FOREIGN=97, FROM=98, FULLTEXT=99, GENERATED=100, GET=101, GRANT=102, 
		GROUP=103, HAVING=104, HIGH_PRIORITY=105, HISTOGRAM=106, IF=107, IGNORE=108, 
		IN=109, INDEX=110, INFILE=111, INNER=112, INOUT=113, INSERT=114, INTERVAL=115, 
		INTO=116, IS=117, ITERATE=118, JOIN=119, KEY=120, KILL=121, LEADING=122, 
		LEFT=123, LIKE=124, LIMIT=125, LINEAR=126, LINES=127, LOW_PRIORITY=128, 
		MASTER_BIND=129, MASTER_SSL_VERIFY_SERVER_CERT=130, MATCH=131, MAXVALUE=132, 
		MODIFIES=133, NATURAL=134, NOT=135, NO_WRITE_TO_BINLOG=136, NULL_LITERAL=137, 
		NUMBER=138, ON=139, OPTIMIZE=140, OPTION=141, OPTIONALLY=142, OR=143, 
		ORDER=144, OVER=145, OUTER=146, OUTFILE=147, PARTITION=148, PRIMARY=149, 
		PROCEDURE=150, PURGE=151, RANGE=152, REFERENCES=153, REGEXP=154, RELEASE=155, 
		RENAME=156, REPEAT=157, REPLACE=158, REQUIRE=159, RESIGNAL=160, RESTRICT=161, 
		RETAIN=162, RETURN=163, REVOKE=164, RIGHT=165, RLIKE=166, SELECT=167, 
		SET=168, SEPARATOR=169, SHOW=170, SQL=171, SQLEXCEPTION=172, SQLSTATE=173, 
		SQLWARNING=174, SQL_BIG_RESULT=175, SQL_CALC_FOUND_ROWS=176, SQL_SMALL_RESULT=177, 
		STACKED=178, STARTING=179, STRAIGHT_JOIN=180, TABLE=181, TERMINATED=182, 
		THEN=183, TO=184, TRUE=185, UNIQUE=186, UNSIGNED=187, UPDATE=188, USAGE=189, 
		USE=190, USING=191, VALUES=192, WHEN=193, WHERE=194, WHILE=195, WITH=196, 
		WRITE=197, XOR=198, ZEROFILL=199, TINYINT=200, SMALLINT=201, MEDIUMINT=202, 
		MIDDLEINT=203, INT=204, INT1=205, INT2=206, INT3=207, INT4=208, INT8=209, 
		INTEGER=210, BIGINT=211, REAL=212, DOUBLE=213, PRECISION=214, FLOAT=215, 
		FLOAT4=216, FLOAT8=217, DECIMAL=218, DEC=219, NUMERIC=220, DATE=221, TIME=222, 
		TIMESTAMP=223, DATETIME=224, YEAR=225, CHAR=226, VARCHAR=227, NVARCHAR=228, 
		NATIONAL=229, BINARY=230, VARBINARY=231, TINYBLOB=232, BLOB=233, MEDIUMBLOB=234, 
		LONG=235, LONGBLOB=236, TINYTEXT=237, TEXT=238, MEDIUMTEXT=239, LONGTEXT=240, 
		ENUM=241, VARYING=242, SERIAL=243, YEAR_MONTH=244, DAY_HOUR=245, DAY_MINUTE=246, 
		DAY_SECOND=247, HOUR_MINUTE=248, HOUR_SECOND=249, MINUTE_SECOND=250, SECOND_MICROSECOND=251, 
		MINUTE_MICROSECOND=252, HOUR_MICROSECOND=253, DAY_MICROSECOND=254, AVG=255, 
		BIT_AND=256, BIT_OR=257, BIT_XOR=258, COUNT=259, CUME_DIST=260, DENSE_RANK=261, 
		FIRST_VALUE=262, GROUP_CONCAT=263, LAG=264, LAST_VALUE=265, LEAD=266, 
		MAX=267, MIN=268, NTILE=269, NTH_VALUE=270, PERCENT_RANK=271, RANK=272, 
		ROW_NUMBER=273, STD=274, STDDEV=275, STDDEV_POP=276, STDDEV_SAMP=277, 
		SUM=278, VAR_POP=279, VAR_SAMP=280, VARIANCE=281, CURRENT_DATE=282, CURRENT_TIME=283, 
		CURRENT_TIMESTAMP=284, LOCALTIME=285, CURDATE=286, CURTIME=287, DATE_ADD=288, 
		DATE_SUB=289, EXTRACT=290, LOCALTIMESTAMP=291, NOW=292, POSITION=293, 
		SUBSTR=294, SUBSTRING=295, SYSDATE=296, TRIM=297, UTC_DATE=298, UTC_TIME=299, 
		UTC_TIMESTAMP=300, AFTER=301, AGGREGATE=302, ALGORITHM=303, ANY=304, AT=305, 
		AUTOEXTEND_SIZE=306, AUTO_INCREMENT=307, AVG_ROW_LENGTH=308, BEGIN=309, 
		BOOL=310, BOOLEAN=311, CASCADED=312, CHANGED=313, COLUMNS=314, COLUMN_NAME=315, 
		CONTAINS=316, DO=317, DUPLICATE=318, ESCAPE=319, FIELDS=320, FIRST=321, 
		FOLLOWING=322, FOLLOWS=323, FUNCTION=324, GLOBAL=325, ISSUER=326, LAST=327, 
		MAX_ROWS=328, MAX_SIZE=329, MEMBER=330, MID=331, MIN_ROWS=332, OFFSET=333, 
		OF=334, PRECEDING=335, ROLLUP=336, ROW=337, ROWS=338, SOME=339, SOUNDS=340, 
		STRING=341, TABLE_NAME=342, THAN=343, UNBOUNDED=344, UNKNOWN=345, WINDOW=346, 
		EUR=347, USA=348, JIS=349, ISO=350, INTERNAL=351, QUARTER=352, MONTH=353, 
		DAY=354, HOUR=355, MINUTE=356, WEEK=357, SECOND=358, MICROSECOND=359, 
		ABS=360, ACOS=361, ADDDATE=362, ADDTIME=363, AES_DECRYPT=364, AES_ENCRYPT=365, 
		AREA=366, ASBINARY=367, ASIN=368, ASTEXT=369, ASWKB=370, ASWKT=371, ASYMMETRIC_DECRYPT=372, 
		ASYMMETRIC_DERIVE=373, ASYMMETRIC_ENCRYPT=374, ASYMMETRIC_SIGN=375, ASYMMETRIC_VERIFY=376, 
		ATAN=377, ATAN2=378, BENCHMARK=379, BIN=380, BIT_COUNT=381, BIT_LENGTH=382, 
		BUFFER=383, CATALOG_NAME=384, CEIL=385, CEILING=386, CENTROID=387, CHARACTER_LENGTH=388, 
		CHARSET=389, CHAR_LENGTH=390, COERCIBILITY=391, COLLATION=392, COMPRESS=393, 
		CONCAT=394, CONCAT_WS=395, CONNECTION_ID=396, CONV=397, CONVERT_TZ=398, 
		COS=399, COT=400, CRC32=401, CREATE_ASYMMETRIC_PRIV_KEY=402, CREATE_ASYMMETRIC_PUB_KEY=403, 
		CREATE_DH_PARAMETERS=404, CREATE_DIGEST=405, CROSSES=406, DATEDIFF=407, 
		DATE_FORMAT=408, DAYNAME=409, DAYOFMONTH=410, DAYOFWEEK=411, DAYOFYEAR=412, 
		DECODE=413, DEGREES=414, DES_DECRYPT=415, DES_ENCRYPT=416, DIMENSION=417, 
		DISJOINT=418, ELT=419, ENCODE=420, ENCRYPT=421, ENDPOINT=422, ENVELOPE=423, 
		EQUALS=424, EXP=425, EXPORT_SET=426, EXTERIORRING=427, EXTRACTVALUE=428, 
		FIELD=429, FIND_IN_SET=430, FLOOR=431, FORMAT=432, FOUND_ROWS=433, FROM_BASE64=434, 
		FROM_DAYS=435, FROM_UNIXTIME=436, GEOMCOLLFROMTEXT=437, GEOMCOLLFROMWKB=438, 
		GEOMETRYCOLLECTIONFROMTEXT=439, GEOMETRYCOLLECTIONFROMWKB=440, GEOMETRYFROMTEXT=441, 
		GEOMETRYFROMWKB=442, GEOMETRYN=443, GEOMETRYTYPE=444, GEOMFROMTEXT=445, 
		GEOMFROMWKB=446, GET_FORMAT=447, GET_LOCK=448, GLENGTH=449, GREATEST=450, 
		GTID_SUBSET=451, GTID_SUBTRACT=452, HEX=453, IFNULL=454, INET6_ATON=455, 
		INET6_NTOA=456, INET_ATON=457, INET_NTOA=458, INSTR=459, INTERIORRINGN=460, 
		INTERSECTS=461, ISCLOSED=462, ISEMPTY=463, ISNULL=464, ISSIMPLE=465, IS_FREE_LOCK=466, 
		IS_IPV4=467, IS_IPV4_COMPAT=468, IS_IPV4_MAPPED=469, IS_IPV6=470, IS_USED_LOCK=471, 
		LAST_INSERT_ID=472, LCASE=473, LEAST=474, LENGTH=475, LINEFROMTEXT=476, 
		LINEFROMWKB=477, LINESTRINGFROMTEXT=478, LINESTRINGFROMWKB=479, LN=480, 
		LOAD_FILE=481, LOCATE=482, LOG=483, LOG10=484, LOG2=485, LOWER=486, LPAD=487, 
		LTRIM=488, MAKEDATE=489, MAKETIME=490, MAKE_SET=491, MASTER_POS_WAIT=492, 
		MBRCONTAINS=493, MBRDISJOINT=494, MBREQUAL=495, MBRINTERSECTS=496, MBROVERLAPS=497, 
		MBRTOUCHES=498, MBRWITHIN=499, MD5=500, MLINEFROMTEXT=501, MLINEFROMWKB=502, 
		MONTHNAME=503, MPOINTFROMTEXT=504, MPOINTFROMWKB=505, MPOLYFROMTEXT=506, 
		MPOLYFROMWKB=507, MULTILINESTRINGFROMTEXT=508, MULTILINESTRINGFROMWKB=509, 
		MULTIPOINTFROMTEXT=510, MULTIPOINTFROMWKB=511, MULTIPOLYGONFROMTEXT=512, 
		MULTIPOLYGONFROMWKB=513, NAME_CONST=514, NULLIF=515, NUMGEOMETRIES=516, 
		NUMINTERIORRINGS=517, NUMPOINTS=518, OCT=519, OCTET_LENGTH=520, ORD=521, 
		OVERLAPS=522, PERIOD_ADD=523, PERIOD_DIFF=524, PI=525, POINTFROMTEXT=526, 
		POINTFROMWKB=527, POINTN=528, POLYFROMTEXT=529, POLYFROMWKB=530, POLYGONFROMTEXT=531, 
		POLYGONFROMWKB=532, POW=533, POWER=534, QUOTE=535, RADIANS=536, RAND=537, 
		RANDOM_BYTES=538, RELEASE_LOCK=539, REVERSE=540, ROUND=541, ROW_COUNT=542, 
		RPAD=543, RTRIM=544, SEC_TO_TIME=545, SESSION_USER=546, SHA=547, SHA1=548, 
		SHA2=549, SCHEMA_NAME=550, SIGN=551, SIN=552, SLEEP=553, SOUNDEX=554, 
		SQL_THREAD_WAIT_AFTER_GTIDS=555, SQRT=556, SRID=557, STARTPOINT=558, STRCMP=559, 
		STR_TO_DATE=560, ST_AREA=561, ST_ASBINARY=562, ST_ASTEXT=563, ST_ASWKB=564, 
		ST_ASWKT=565, ST_BUFFER=566, ST_CENTROID=567, ST_CONTAINS=568, ST_CROSSES=569, 
		ST_DIFFERENCE=570, ST_DIMENSION=571, ST_DISJOINT=572, ST_DISTANCE=573, 
		ST_ENDPOINT=574, ST_ENVELOPE=575, ST_EQUALS=576, ST_EXTERIORRING=577, 
		ST_GEOMCOLLFROMTEXT=578, ST_GEOMCOLLFROMTXT=579, ST_GEOMCOLLFROMWKB=580, 
		ST_GEOMETRYCOLLECTIONFROMTEXT=581, ST_GEOMETRYCOLLECTIONFROMWKB=582, ST_GEOMETRYFROMTEXT=583, 
		ST_GEOMETRYFROMWKB=584, ST_GEOMETRYN=585, ST_GEOMETRYTYPE=586, ST_GEOMFROMTEXT=587, 
		ST_GEOMFROMWKB=588, ST_INTERIORRINGN=589, ST_INTERSECTION=590, ST_INTERSECTS=591, 
		ST_ISCLOSED=592, ST_ISEMPTY=593, ST_ISSIMPLE=594, ST_LINEFROMTEXT=595, 
		ST_LINEFROMWKB=596, ST_LINESTRINGFROMTEXT=597, ST_LINESTRINGFROMWKB=598, 
		ST_NUMGEOMETRIES=599, ST_NUMINTERIORRING=600, ST_NUMINTERIORRINGS=601, 
		ST_NUMPOINTS=602, ST_OVERLAPS=603, ST_POINTFROMTEXT=604, ST_POINTFROMWKB=605, 
		ST_POINTN=606, ST_POLYFROMTEXT=607, ST_POLYFROMWKB=608, ST_POLYGONFROMTEXT=609, 
		ST_POLYGONFROMWKB=610, ST_SRID=611, ST_STARTPOINT=612, ST_SYMDIFFERENCE=613, 
		ST_TOUCHES=614, ST_UNION=615, ST_WITHIN=616, ST_X=617, ST_Y=618, SUBDATE=619, 
		SUBSTRING_INDEX=620, SUBTIME=621, SYSTEM_USER=622, TAN=623, TIMEDIFF=624, 
		TIMESTAMPADD=625, TIMESTAMPDIFF=626, TIME_FORMAT=627, TIME_TO_SEC=628, 
		TOUCHES=629, TO_BASE64=630, TO_DAYS=631, TO_SECONDS=632, UCASE=633, UNCOMPRESS=634, 
		UNCOMPRESSED_LENGTH=635, UNHEX=636, UNIX_TIMESTAMP=637, UPDATEXML=638, 
		UPPER=639, UUID=640, UUID_SHORT=641, VALIDATE_PASSWORD_STRENGTH=642, VERSION=643, 
		WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=644, WEEKDAY=645, WEEKOFYEAR=646, WEIGHT_STRING=647, 
		WITHIN=648, YEARWEEK=649, Y_FUNCTION=650, X_FUNCTION=651, VAR_ASSIGN=652, 
		PLUS_ASSIGN=653, MINUS_ASSIGN=654, MULT_ASSIGN=655, DIV_ASSIGN=656, MOD_ASSIGN=657, 
		AND_ASSIGN=658, XOR_ASSIGN=659, OR_ASSIGN=660, STAR=661, DIVIDE=662, MODULE=663, 
		PLUS=664, MINUS=665, DIV=666, MOD=667, EQUAL_SYMBOL=668, GREATER_SYMBOL=669, 
		LESS_SYMBOL=670, EXCLAMATION_SYMBOL=671, BIT_NOT_OP=672, BIT_OR_OP=673, 
		BIT_AND_OP=674, BIT_XOR_OP=675, DOT=676, LR_BRACKET=677, RR_BRACKET=678, 
		COMMA=679, SEMI=680, AT_SIGN=681, ZERO_DECIMAL=682, ONE_DECIMAL=683, TWO_DECIMAL=684, 
		SINGLE_QUOTE_SYMB=685, DOUBLE_QUOTE_SYMB=686, REVERSE_QUOTE_SYMB=687, 
		COLON_SYMB=688, FILESIZE_LITERAL=689, START_NATIONAL_STRING_LITERAL=690, 
		STRING_LITERAL=691, DECIMAL_LITERAL=692, HEXADECIMAL_LITERAL=693, REAL_LITERAL=694, 
		NULL_SPEC_LITERAL=695, BIT_STRING=696, DOT_ID=697, ID=698, REVERSE_QUOTE_ID=699, 
		STRING_USER_NAME=700, IP_ADDRESS=701, LOCAL_ID=702, GLOBAL_ID=703, ERROR_RECONGNIGION=704;
	public static final int
		RULE_start = 0, RULE_selectStatement = 1, RULE_querySpecification = 2, 
		RULE_queryOrderSpecification = 3, RULE_multiQueryOrderSpecification = 4, 
		RULE_selectExpression = 5, RULE_selectClause = 6, RULE_selectKeyword = 7, 
		RULE_nothingElement = 8, RULE_nothingKeyword = 9, RULE_selectSpec = 10, 
		RULE_selectElements = 11, RULE_selectElement = 12, RULE_fullId = 13, RULE_uid = 14, 
		RULE_simpleId = 15, RULE_intervalTypeBase = 16, RULE_selectElementDot = 17, 
		RULE_fullColumnName = 18, RULE_dottedId = 19, RULE_selectElementAs = 20, 
		RULE_functionCall = 21, RULE_leftParen = 22, RULE_rightParen = 23, RULE_expression = 24, 
		RULE_logicalOperator = 25, RULE_predicate = 26, RULE_isKeyword = 27, RULE_expressionDelimiter = 28, 
		RULE_selectModifierExpression = 29, RULE_groupByClause = 30, RULE_groupByKeyword = 31, 
		RULE_groupByItem = 32, RULE_automaticGroupByKeyword = 33, RULE_groupByExpression = 34, 
		RULE_groupByItemDelimiter = 35, RULE_havingClause = 36, RULE_havingKeyword = 37, 
		RULE_orderByClause = 38, RULE_orderByExpression = 39, RULE_limitClause = 40, 
		RULE_limitClauseAtom = 41, RULE_queryExpression = 42, RULE_fromClauseNoJoin = 43, 
		RULE_fromClause = 44, RULE_fromKeyword = 45, RULE_tableKeyword = 46, RULE_tableSources = 47, 
		RULE_tableSourceNoJoin = 48, RULE_tableSource = 49, RULE_tableSourceItem = 50, 
		RULE_subQueryTable = 51, RULE_tableAlias = 52, RULE_tableAliasAs = 53, 
		RULE_tableName = 54, RULE_uidList = 55, RULE_indexHint = 56, RULE_indexHintType = 57, 
		RULE_joinKeyword = 58, RULE_multiJoinExpression = 59, RULE_multiJoinPart = 60, 
		RULE_multiInnerJoin = 61, RULE_multiOuterJoin = 62, RULE_multiNaturalJoin = 63, 
		RULE_withKeyword = 64, RULE_joinPart = 65, RULE_innerJoin = 66, RULE_innerJoinKeyword = 67, 
		RULE_onKeyword = 68, RULE_outerJoin = 69, RULE_joinDirection = 70, RULE_outerJoinKeyword = 71, 
		RULE_naturalJoin = 72, RULE_naturalJoinKeyword = 73, RULE_tableSourceDelimiter = 74, 
		RULE_expressions = 75, RULE_whereExpressionDelimiter = 76, RULE_nullNotnull = 77, 
		RULE_comparisonOperator = 78, RULE_simpleExpressionAtom = 79, RULE_constant = 80, 
		RULE_stringLiteral = 81, RULE_collationName = 82, RULE_decimalLiteral = 83, 
		RULE_hexadecimalLiteral = 84, RULE_booleanLiteral = 85, RULE_unaryOperator = 86, 
		RULE_mathOperator = 87, RULE_functionArgs = 88, RULE_aggregateWindowedFunction = 89, 
		RULE_ofKeyword = 90, RULE_theKeyword = 91, RULE_functionArg = 92, RULE_allAggregatorKeyword = 93, 
		RULE_distinctAggregatorKeyword = 94, RULE_scalarFunctionName = 95, RULE_selectElementDelimiter = 96, 
		RULE_whereKeyword = 97, RULE_whereExpression = 98, RULE_tableExpressionNoJoin = 99, 
		RULE_tableExpression = 100;
	private static String[] makeRuleNames() {
		return new String[] {
			"start", "selectStatement", "querySpecification", "queryOrderSpecification", 
			"multiQueryOrderSpecification", "selectExpression", "selectClause", "selectKeyword", 
			"nothingElement", "nothingKeyword", "selectSpec", "selectElements", "selectElement", 
			"fullId", "uid", "simpleId", "intervalTypeBase", "selectElementDot", 
			"fullColumnName", "dottedId", "selectElementAs", "functionCall", "leftParen", 
			"rightParen", "expression", "logicalOperator", "predicate", "isKeyword", 
			"expressionDelimiter", "selectModifierExpression", "groupByClause", "groupByKeyword", 
			"groupByItem", "automaticGroupByKeyword", "groupByExpression", "groupByItemDelimiter", 
			"havingClause", "havingKeyword", "orderByClause", "orderByExpression", 
			"limitClause", "limitClauseAtom", "queryExpression", "fromClauseNoJoin", 
			"fromClause", "fromKeyword", "tableKeyword", "tableSources", "tableSourceNoJoin", 
			"tableSource", "tableSourceItem", "subQueryTable", "tableAlias", "tableAliasAs", 
			"tableName", "uidList", "indexHint", "indexHintType", "joinKeyword", 
			"multiJoinExpression", "multiJoinPart", "multiInnerJoin", "multiOuterJoin", 
			"multiNaturalJoin", "withKeyword", "joinPart", "innerJoin", "innerJoinKeyword", 
			"onKeyword", "outerJoin", "joinDirection", "outerJoinKeyword", "naturalJoin", 
			"naturalJoinKeyword", "tableSourceDelimiter", "expressions", "whereExpressionDelimiter", 
			"nullNotnull", "comparisonOperator", "simpleExpressionAtom", "constant", 
			"stringLiteral", "collationName", "decimalLiteral", "hexadecimalLiteral", 
			"booleanLiteral", "unaryOperator", "mathOperator", "functionArgs", "aggregateWindowedFunction", 
			"ofKeyword", "theKeyword", "functionArg", "allAggregatorKeyword", "distinctAggregatorKeyword", 
			"scalarFunctionName", "selectElementDelimiter", "whereKeyword", "whereExpression", 
			"tableExpressionNoJoin", "tableExpression"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, "'<EOF>'", "'RETRIEVE'", "'SHOW ME'", "'DISPLAY'", 
			"'PRESENT'", "'FIND'", "'WHAT IS'", "'WHAT ARE'", "'WHAT IS THE'", "'WHAT ARE THE'", 
			"'IN TABLE'", "'IN TABLES'", "'FROM TABLE'", "'FROM TABLES'", "'JOIN TABLE'", 
			"'BY JOINING'", "'BY JOINING TABLE'", "'JOIN WITH'", "'JOIN WITH TABLE'", 
			"'JOINED WITH'", "'JOINED WITH TABLE'", "'BY JOINING WITH TABLE'", "'WITH TABLE'", 
			"'DOT'", "'AND THEN'", "'SUBQUERY'", "'__SCHROD'", "'AUTOMATIC'", "'AUTOMATICALLY'", 
			"'NOTHING'", "'NO COLUMNS'", "'OPEN PARENTHESIS'", "'LEFT PARENTHESIS'", 
			"'CLOSE PARENTHESIS'", "'RIGHT PARENTHESIS'", "'OPEN PAREN'", "'LEFT PAREN'", 
			"'CLOSE PAREN'", "'RIGHT PAREN'", "'THE'", "'ADD'", "'ALL'", "'ALTER'", 
			"'ALWAYS'", "'ANALYZE'", "'AND'", "'ARRAY'", "'AS'", "'ASC'", "'BEFORE'", 
			"'BETWEEN'", "'BOTH'", "'BY'", "'CALL'", "'CASE'", "'CAST'", "'CHANGE'", 
			"'CHARACTER'", "'COLLATE'", "'COLUMN'", "'CONDITION'", "'CONSTRAINT'", 
			"'CONTINUE'", "'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT'", "'DECLARE'", 
			"'DEFAULT'", "'DELAYED'", "'DELETE'", "'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", 
			"'DIAGNOSTICS'", "'DISTINCT'", "'DISTINCTROW'", "'DROP'", "'EACH'", "'ELSE'", 
			"'ELSEIF'", "'EMPTY'", "'ENCLOSED'", "'ESCAPED'", "'EXCEPT'", "'EXISTS'", 
			"'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", 
			"'FROM'", "'FULLTEXT'", "'GENERATED'", "'GET'", "'GRANT'", "'GROUP'", 
			"'HAVING'", "'HIGH_PRIORITY'", "'HISTOGRAM'", "'IF'", "'IGNORE'", "'IN'", 
			"'INDEX'", "'INFILE'", "'INNER'", "'INOUT'", "'INSERT'", "'INTERVAL'", 
			"'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", "'KILL'", "'LEADING'", 
			"'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'", "'LINES'", "'LOW_PRIORITY'", 
			"'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", "'MATCH'", "'MAXVALUE'", 
			"'MODIFIES'", "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", "'NULL'", 
			"'NUMBER'", "'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONALLY'", "'OR'", 
			"'ORDER'", "'OVER'", "'OUTER'", "'OUTFILE'", "'PARTITION'", "'PRIMARY'", 
			"'PROCEDURE'", "'PURGE'", "'RANGE'", "'REFERENCES'", "'REGEXP'", "'RELEASE'", 
			"'RENAME'", "'REPEAT'", "'REPLACE'", "'REQUIRE'", "'RESIGNAL'", "'RESTRICT'", 
			"'RETAIN'", "'RETURN'", "'REVOKE'", "'RIGHT'", "'RLIKE'", "'SELECT'", 
			"'SET'", "'SEPARATOR'", "'SHOW'", "'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", 
			"'SQLWARNING'", "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", "'SQL_SMALL_RESULT'", 
			"'STACKED'", "'STARTING'", "'STRAIGHT_JOIN'", "'TABLE'", "'TERMINATED'", 
			"'THEN'", "'TO'", "'TRUE'", "'UNIQUE'", "'UNSIGNED'", "'UPDATE'", "'USAGE'", 
			"'USE'", "'USING'", "'VALUES'", "'WHEN'", "'WHERE'", "'WHILE'", "'WITH'", 
			"'WRITE'", "'XOR'", "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", "'MEDIUMINT'", 
			"'MIDDLEINT'", "'INT'", "'INT1'", "'INT2'", "'INT3'", "'INT4'", "'INT8'", 
			"'INTEGER'", "'BIGINT'", "'REAL'", "'DOUBLE'", "'PRECISION'", "'FLOAT'", 
			"'FLOAT4'", "'FLOAT8'", "'DECIMAL'", "'DEC'", "'NUMERIC'", "'DATE'", 
			"'TIME'", "'TIMESTAMP'", "'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", 
			"'NVARCHAR'", "'NATIONAL'", "'BINARY'", "'VARBINARY'", "'TINYBLOB'", 
			"'BLOB'", "'MEDIUMBLOB'", "'LONG'", "'LONGBLOB'", "'TINYTEXT'", "'TEXT'", 
			"'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", "'VARYING'", "'SERIAL'", "'YEAR_MONTH'", 
			"'DAY_HOUR'", "'DAY_MINUTE'", "'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", 
			"'MINUTE_SECOND'", "'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", 
			"'DAY_MICROSECOND'", "'AVG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", 
			"'CUME_DIST'", "'DENSE_RANK'", "'FIRST_VALUE'", "'GROUP_CONCAT'", "'LAG'", 
			"'LAST_VALUE'", "'LEAD'", "'MAX'", "'MIN'", "'NTILE'", "'NTH_VALUE'", 
			"'PERCENT_RANK'", "'RANK'", "'ROW_NUMBER'", "'STD'", "'STDDEV'", "'STDDEV_POP'", 
			"'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", 
			"'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", 
			"'CURTIME'", "'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", 
			"'NOW'", "'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", 
			"'UTC_DATE'", "'UTC_TIME'", "'UTC_TIMESTAMP'", "'AFTER'", "'AGGREGATE'", 
			"'ALGORITHM'", "'ANY'", "'AT'", "'AUTOEXTEND_SIZE'", "'AUTO_INCREMENT'", 
			"'AVG_ROW_LENGTH'", "'BEGIN'", "'BOOL'", "'BOOLEAN'", "'CASCADED'", "'CHANGED'", 
			"'COLUMNS'", "'COLUMN_NAME'", "'CONTAINS'", "'DO'", "'DUPLICATE'", "'ESCAPE'", 
			"'FIELDS'", "'FIRST'", "'FOLLOWING'", "'FOLLOWS'", "'FUNCTION'", "'GLOBAL'", 
			"'ISSUER'", "'LAST'", "'MAX_ROWS'", "'MAX_SIZE'", "'MEMBER'", "'MID'", 
			"'MIN_ROWS'", "'OFFSET'", "'OF'", "'PRECEDING'", "'ROLLUP'", "'ROW'", 
			"'ROWS'", "'SOME'", "'SOUNDS'", "'STRING'", "'TABLE_NAME'", "'THAN'", 
			"'UNBOUNDED'", "'UNKNOWN'", "'WINDOW'", "'EUR'", "'USA'", "'JIS'", "'ISO'", 
			"'INTERNAL'", "'QUARTER'", "'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", 
			"'WEEK'", "'SECOND'", "'MICROSECOND'", "'ABS'", "'ACOS'", "'ADDDATE'", 
			"'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'", "'AREA'", "'ASBINARY'", 
			"'ASIN'", "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", "'ASYMMETRIC_DERIVE'", 
			"'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", "'ATAN'", 
			"'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", "'BUFFER'", 
			"'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
			"'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", 
			"'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
			"'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
			"'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
			"'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
			"'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
			"'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENVELOPE'", 
			"'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'", 
			"'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'", 
			"'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'", 
			"'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", 
			"'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", "'GEOMFROMTEXT'", 
			"'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", 
			"'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", 
			"'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", "'INTERIORRINGN'", 
			"'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", 
			"'IS_FREE_LOCK'", "'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", 
			"'IS_IPV6'", "'IS_USED_LOCK'", "'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", 
			"'LENGTH'", "'LINEFROMTEXT'", "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", 
			"'LINESTRINGFROMWKB'", "'LN'", "'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", 
			"'LOG2'", "'LOWER'", "'LPAD'", "'LTRIM'", "'MAKEDATE'", "'MAKETIME'", 
			"'MAKE_SET'", "'MASTER_POS_WAIT'", "'MBRCONTAINS'", "'MBRDISJOINT'", 
			"'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", "'MBRTOUCHES'", "'MBRWITHIN'", 
			"'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", "'MONTHNAME'", "'MPOINTFROMTEXT'", 
			"'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", 
			"'MULTILINESTRINGFROMWKB'", "'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", 
			"'MULTIPOLYGONFROMTEXT'", "'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", 
			"'NUMGEOMETRIES'", "'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", 
			"'ORD'", "'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
			"'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
			"'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
			"'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
			"'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SESSION_USER'", "'SHA'", "'SHA1'", 
			"'SHA2'", "'SCHEMA_NAME'", "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'", 
			"'SQL_THREAD_WAIT_AFTER_GTIDS'", "'SQRT'", "'SRID'", "'STARTPOINT'", 
			"'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", "'ST_ASBINARY'", "'ST_ASTEXT'", 
			"'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", "'ST_CONTAINS'", 
			"'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", "'ST_DISJOINT'", 
			"'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", "'ST_EXTERIORRING'", 
			"'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", "'ST_GEOMCOLLFROMWKB'", 
			"'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
			"'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", 
			"'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", 
			"'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", 
			"'ST_LINEFROMTEXT'", "'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
			"'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
			"'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", 
			"'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
			"'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
			"'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
			"'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", 
			"'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
			"'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", 
			"'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", 
			"'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", 
			"'VERSION'", "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", 
			"'WEIGHT_STRING'", "'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", 
			"'-='", "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", 
			"'%'", "'+'", "'-'", "'DIV'", "'MOD'", "'='", "'>'", "'<'", "'!'", "'~'", 
			"'|'", "'&'", "'^'", "'.'", "'('", "')'", "','", "';'", "'@'", "'0'", 
			"'1'", "'2'", "'''", "'\"'", "'`'", "':'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
			"END_OF_FILE", "RETRIEVE", "SHOW_ME", "DISPLAY", "PRESENT", "FIND", "WHAT_IS", 
			"WHAT_ARE", "WHAT_IS_THE", "WHAT_ARE_THE", "IN_TABLE", "IN_TABLES", "FROM_TABLE", 
			"FROM_TABLES", "JOIN_TABLE", "BY_JOINING", "BY_JOINING_TABLE", "JOIN_WITH", 
			"JOIN_WITH_TABLE", "JOINED_WITH", "JOINED_WITH_TABLE", "BY_JOINING_WITH_TABLE", 
			"WITH_TABLE", "SPOKEN_DOT", "AND_THEN", "SUBQUERY", "SCHRODINGER", "AUTOMATIC", 
			"AUTOMATICALLY", "NOTHING", "NO_COLUMNS", "OPEN_PARENTHESIS", "LEFT_PARENTHESIS", 
			"CLOSE_PARENTHESIS", "RIGHT_PARENTHESIS", "OPEN_PAREN", "LEFT_PAREN", 
			"CLOSE_PAREN", "RIGHT_PAREN", "THE", "ADD", "ALL", "ALTER", "ALWAYS", 
			"ANALYZE", "AND", "ARRAY", "AS", "ASC", "BEFORE", "BETWEEN", "BOTH", 
			"BY", "CALL", "CASE", "CAST", "CHANGE", "CHARACTER", "COLLATE", "COLUMN", 
			"CONDITION", "CONSTRAINT", "CONTINUE", "CONVERT", "CREATE", "CROSS", 
			"CURRENT", "DECLARE", "DEFAULT", "DELAYED", "DELETE", "DESC", "DESCRIBE", 
			"DETERMINISTIC", "DIAGNOSTICS", "DISTINCT", "DISTINCTROW", "DROP", "EACH", 
			"ELSE", "ELSEIF", "EMPTY", "ENCLOSED", "ESCAPED", "EXCEPT", "EXISTS", 
			"EXIT", "EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN", "FROM", 
			"FULLTEXT", "GENERATED", "GET", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", 
			"HISTOGRAM", "IF", "IGNORE", "IN", "INDEX", "INFILE", "INNER", "INOUT", 
			"INSERT", "INTERVAL", "INTO", "IS", "ITERATE", "JOIN", "KEY", "KILL", 
			"LEADING", "LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", "LOW_PRIORITY", 
			"MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", "MAXVALUE", 
			"MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", "NULL_LITERAL", "NUMBER", 
			"ON", "OPTIMIZE", "OPTION", "OPTIONALLY", "OR", "ORDER", "OVER", "OUTER", 
			"OUTFILE", "PARTITION", "PRIMARY", "PROCEDURE", "PURGE", "RANGE", "REFERENCES", 
			"REGEXP", "RELEASE", "RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", 
			"RESTRICT", "RETAIN", "RETURN", "REVOKE", "RIGHT", "RLIKE", "SELECT", 
			"SET", "SEPARATOR", "SHOW", "SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", 
			"SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", "STACKED", 
			"STARTING", "STRAIGHT_JOIN", "TABLE", "TERMINATED", "THEN", "TO", "TRUE", 
			"UNIQUE", "UNSIGNED", "UPDATE", "USAGE", "USE", "USING", "VALUES", "WHEN", 
			"WHERE", "WHILE", "WITH", "WRITE", "XOR", "ZEROFILL", "TINYINT", "SMALLINT", 
			"MEDIUMINT", "MIDDLEINT", "INT", "INT1", "INT2", "INT3", "INT4", "INT8", 
			"INTEGER", "BIGINT", "REAL", "DOUBLE", "PRECISION", "FLOAT", "FLOAT4", 
			"FLOAT8", "DECIMAL", "DEC", "NUMERIC", "DATE", "TIME", "TIMESTAMP", "DATETIME", 
			"YEAR", "CHAR", "VARCHAR", "NVARCHAR", "NATIONAL", "BINARY", "VARBINARY", 
			"TINYBLOB", "BLOB", "MEDIUMBLOB", "LONG", "LONGBLOB", "TINYTEXT", "TEXT", 
			"MEDIUMTEXT", "LONGTEXT", "ENUM", "VARYING", "SERIAL", "YEAR_MONTH", 
			"DAY_HOUR", "DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", 
			"MINUTE_SECOND", "SECOND_MICROSECOND", "MINUTE_MICROSECOND", "HOUR_MICROSECOND", 
			"DAY_MICROSECOND", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "COUNT", "CUME_DIST", 
			"DENSE_RANK", "FIRST_VALUE", "GROUP_CONCAT", "LAG", "LAST_VALUE", "LEAD", 
			"MAX", "MIN", "NTILE", "NTH_VALUE", "PERCENT_RANK", "RANK", "ROW_NUMBER", 
			"STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", 
			"VARIANCE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", 
			"CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", "LOCALTIMESTAMP", 
			"NOW", "POSITION", "SUBSTR", "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", 
			"UTC_TIME", "UTC_TIMESTAMP", "AFTER", "AGGREGATE", "ALGORITHM", "ANY", 
			"AT", "AUTOEXTEND_SIZE", "AUTO_INCREMENT", "AVG_ROW_LENGTH", "BEGIN", 
			"BOOL", "BOOLEAN", "CASCADED", "CHANGED", "COLUMNS", "COLUMN_NAME", "CONTAINS", 
			"DO", "DUPLICATE", "ESCAPE", "FIELDS", "FIRST", "FOLLOWING", "FOLLOWS", 
			"FUNCTION", "GLOBAL", "ISSUER", "LAST", "MAX_ROWS", "MAX_SIZE", "MEMBER", 
			"MID", "MIN_ROWS", "OFFSET", "OF", "PRECEDING", "ROLLUP", "ROW", "ROWS", 
			"SOME", "SOUNDS", "STRING", "TABLE_NAME", "THAN", "UNBOUNDED", "UNKNOWN", 
			"WINDOW", "EUR", "USA", "JIS", "ISO", "INTERNAL", "QUARTER", "MONTH", 
			"DAY", "HOUR", "MINUTE", "WEEK", "SECOND", "MICROSECOND", "ABS", "ACOS", 
			"ADDDATE", "ADDTIME", "AES_DECRYPT", "AES_ENCRYPT", "AREA", "ASBINARY", 
			"ASIN", "ASTEXT", "ASWKB", "ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", 
			"ASYMMETRIC_ENCRYPT", "ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", "ATAN", 
			"ATAN2", "BENCHMARK", "BIN", "BIT_COUNT", "BIT_LENGTH", "BUFFER", "CATALOG_NAME", 
			"CEIL", "CEILING", "CENTROID", "CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", 
			"COERCIBILITY", "COLLATION", "COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", 
			"CONV", "CONVERT_TZ", "COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", 
			"CREATE_ASYMMETRIC_PUB_KEY", "CREATE_DH_PARAMETERS", "CREATE_DIGEST", 
			"CROSSES", "DATEDIFF", "DATE_FORMAT", "DAYNAME", "DAYOFMONTH", "DAYOFWEEK", 
			"DAYOFYEAR", "DECODE", "DEGREES", "DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", 
			"DISJOINT", "ELT", "ENCODE", "ENCRYPT", "ENDPOINT", "ENVELOPE", "EQUALS", 
			"EXP", "EXPORT_SET", "EXTERIORRING", "EXTRACTVALUE", "FIELD", "FIND_IN_SET", 
			"FLOOR", "FORMAT", "FOUND_ROWS", "FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", 
			"GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", "GEOMETRYCOLLECTIONFROMTEXT", 
			"GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", "GEOMETRYFROMWKB", "GEOMETRYN", 
			"GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", "GET_FORMAT", "GET_LOCK", 
			"GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT", "HEX", "IFNULL", 
			"INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA", "INSTR", "INTERIORRINGN", 
			"INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", "ISSIMPLE", "IS_FREE_LOCK", 
			"IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", "IS_IPV6", "IS_USED_LOCK", 
			"LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", "LINEFROMTEXT", "LINEFROMWKB", 
			"LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", "LN", "LOAD_FILE", "LOCATE", 
			"LOG", "LOG10", "LOG2", "LOWER", "LPAD", "LTRIM", "MAKEDATE", "MAKETIME", 
			"MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", "MBRDISJOINT", "MBREQUAL", 
			"MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", "MBRWITHIN", "MD5", "MLINEFROMTEXT", 
			"MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", "MPOINTFROMWKB", "MPOLYFROMTEXT", 
			"MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", "MULTILINESTRINGFROMWKB", 
			"MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT", "MULTIPOLYGONFROMWKB", 
			"NAME_CONST", "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", 
			"OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", 
			"PI", "POINTFROMTEXT", "POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", 
			"POLYGONFROMTEXT", "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
			"RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", 
			"RPAD", "RTRIM", "SEC_TO_TIME", "SESSION_USER", "SHA", "SHA1", "SHA2", 
			"SCHEMA_NAME", "SIGN", "SIN", "SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", 
			"SQRT", "SRID", "STARTPOINT", "STRCMP", "STR_TO_DATE", "ST_AREA", "ST_ASBINARY", 
			"ST_ASTEXT", "ST_ASWKB", "ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", 
			"ST_CROSSES", "ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", 
			"ST_ENDPOINT", "ST_ENVELOPE", "ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", 
			"ST_GEOMCOLLFROMTXT", "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", 
			"ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", 
			"ST_GEOMETRYN", "ST_GEOMETRYTYPE", "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", 
			"ST_INTERIORRINGN", "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED", 
			"ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", 
			"ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", 
			"ST_NUMPOINTS", "ST_OVERLAPS", "ST_POINTFROMTEXT", "ST_POINTFROMWKB", 
			"ST_POINTN", "ST_POLYFROMTEXT", "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", 
			"ST_POLYGONFROMWKB", "ST_SRID", "ST_STARTPOINT", "ST_SYMDIFFERENCE", 
			"ST_TOUCHES", "ST_UNION", "ST_WITHIN", "ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", 
			"SUBTIME", "SYSTEM_USER", "TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", 
			"TIME_FORMAT", "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", 
			"UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", 
			"UPDATEXML", "UPPER", "UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", 
			"VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", 
			"WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", "X_FUNCTION", "VAR_ASSIGN", 
			"PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
			"AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", 
			"PLUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL", "LESS_SYMBOL", 
			"EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", 
			"DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", "ZERO_DECIMAL", 
			"ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", 
			"REVERSE_QUOTE_SYMB", "COLON_SYMB", "FILESIZE_LITERAL", "START_NATIONAL_STRING_LITERAL", 
			"STRING_LITERAL", "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "REAL_LITERAL", 
			"NULL_SPEC_LITERAL", "BIT_STRING", "DOT_ID", "ID", "REVERSE_QUOTE_ID", 
			"STRING_USER_NAME", "IP_ADDRESS", "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "SimpleSpeakQlParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public SimpleSpeakQlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class StartContext extends ParserRuleContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode END_OF_FILE() { return getToken(SimpleSpeakQlParser.END_OF_FILE, 0); }
		public StartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterStart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitStart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitStart(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartContext start() throws RecognitionException {
		StartContext _localctx = new StartContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(202);
			selectStatement();
			setState(204);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==END_OF_FILE) {
				{
				setState(203);
				match(END_OF_FILE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStatementContext extends ParserRuleContext {
		public SelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatement; }
	 
		public SelectStatementContext() { }
		public void copyFrom(SelectStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SimpleSelectContext extends SelectStatementContext {
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public SimpleSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSimpleSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSimpleSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSimpleSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ParenthesisSelectContext extends SelectStatementContext {
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public ParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterParenthesisSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitParenthesisSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitParenthesisSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStatementContext selectStatement() throws RecognitionException {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_selectStatement);
		try {
			setState(208);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RETRIEVE:
			case SHOW_ME:
			case DISPLAY:
			case PRESENT:
			case FIND:
			case WHAT_IS:
			case WHAT_ARE:
			case WHAT_IS_THE:
			case WHAT_ARE_THE:
			case IN_TABLE:
			case IN_TABLES:
			case FROM_TABLE:
			case FROM_TABLES:
			case JOIN_TABLE:
			case BY_JOINING:
			case BY_JOINING_TABLE:
			case JOIN_WITH:
			case JOIN_WITH_TABLE:
			case JOINED_WITH:
			case JOINED_WITH_TABLE:
			case BY_JOINING_WITH_TABLE:
			case AND_THEN:
			case CROSS:
			case FROM:
			case GET:
			case GROUP:
			case HAVING:
			case IN:
			case INNER:
			case JOIN:
			case LEFT:
			case LIMIT:
			case NATURAL:
			case ORDER:
			case RIGHT:
			case SELECT:
			case THEN:
				_localctx = new SimpleSelectContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(206);
				querySpecification();
				}
				break;
			case LR_BRACKET:
				_localctx = new ParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(207);
				queryExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationContext extends ParserRuleContext {
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecification; }
	 
		public QuerySpecificationContext() { }
		public void copyFrom(QuerySpecificationContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class MultiQuerySpecificationContext extends QuerySpecificationContext {
		public List<MultiQueryOrderSpecificationContext> multiQueryOrderSpecification() {
			return getRuleContexts(MultiQueryOrderSpecificationContext.class);
		}
		public MultiQueryOrderSpecificationContext multiQueryOrderSpecification(int i) {
			return getRuleContext(MultiQueryOrderSpecificationContext.class,i);
		}
		public List<MultiJoinExpressionContext> multiJoinExpression() {
			return getRuleContexts(MultiJoinExpressionContext.class);
		}
		public MultiJoinExpressionContext multiJoinExpression(int i) {
			return getRuleContext(MultiJoinExpressionContext.class,i);
		}
		public List<ExpressionDelimiterContext> expressionDelimiter() {
			return getRuleContexts(ExpressionDelimiterContext.class);
		}
		public ExpressionDelimiterContext expressionDelimiter(int i) {
			return getRuleContext(ExpressionDelimiterContext.class,i);
		}
		public List<SelectModifierExpressionContext> selectModifierExpression() {
			return getRuleContexts(SelectModifierExpressionContext.class);
		}
		public SelectModifierExpressionContext selectModifierExpression(int i) {
			return getRuleContext(SelectModifierExpressionContext.class,i);
		}
		public MultiQuerySpecificationContext(QuerySpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterMultiQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitMultiQuerySpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitMultiQuerySpecification(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SingleQuerySpecificationContext extends QuerySpecificationContext {
		public QueryOrderSpecificationContext queryOrderSpecification() {
			return getRuleContext(QueryOrderSpecificationContext.class,0);
		}
		public SelectModifierExpressionContext selectModifierExpression() {
			return getRuleContext(SelectModifierExpressionContext.class,0);
		}
		public SingleQuerySpecificationContext(QuerySpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSingleQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSingleQuerySpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSingleQuerySpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationContext querySpecification() throws RecognitionException {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_querySpecification);
		int _la;
		try {
			int _alt;
			setState(239);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
			case 1:
				_localctx = new SingleQuerySpecificationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(210);
				queryOrderSpecification();
				setState(211);
				selectModifierExpression();
				}
				break;
			case 2:
				_localctx = new MultiQuerySpecificationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(216);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 19)) & ~0x3f) == 0 && ((1L << (_la - 19)) & ((1L << (JOIN_TABLE - 19)) | (1L << (BY_JOINING - 19)) | (1L << (BY_JOINING_TABLE - 19)) | (1L << (JOIN_WITH - 19)) | (1L << (JOIN_WITH_TABLE - 19)) | (1L << (JOINED_WITH - 19)) | (1L << (JOINED_WITH_TABLE - 19)) | (1L << (BY_JOINING_WITH_TABLE - 19)) | (1L << (CROSS - 19)))) != 0) || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (INNER - 112)) | (1L << (JOIN - 112)) | (1L << (LEFT - 112)) | (1L << (NATURAL - 112)) | (1L << (RIGHT - 112)))) != 0)) {
					{
					setState(213);
					multiJoinExpression();
					setState(214);
					expressionDelimiter();
					}
				}

				setState(221);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND_THEN || ((((_la - 103)) & ~0x3f) == 0 && ((1L << (_la - 103)) & ((1L << (GROUP - 103)) | (1L << (HAVING - 103)) | (1L << (LIMIT - 103)) | (1L << (ORDER - 103)))) != 0) || _la==THEN) {
					{
					setState(218);
					selectModifierExpression();
					setState(219);
					expressionDelimiter();
					}
				}

				setState(223);
				multiQueryOrderSpecification();
				setState(231);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(224);
						expressionDelimiter();
						setState(227);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case RETRIEVE:
						case SHOW_ME:
						case DISPLAY:
						case PRESENT:
						case FIND:
						case WHAT_IS:
						case WHAT_ARE:
						case WHAT_IS_THE:
						case WHAT_ARE_THE:
						case IN_TABLE:
						case IN_TABLES:
						case FROM_TABLE:
						case FROM_TABLES:
						case FROM:
						case GET:
						case IN:
						case SELECT:
							{
							setState(225);
							multiQueryOrderSpecification();
							}
							break;
						case JOIN_TABLE:
						case BY_JOINING:
						case BY_JOINING_TABLE:
						case JOIN_WITH:
						case JOIN_WITH_TABLE:
						case JOINED_WITH:
						case JOINED_WITH_TABLE:
						case BY_JOINING_WITH_TABLE:
						case CROSS:
						case INNER:
						case JOIN:
						case LEFT:
						case NATURAL:
						case RIGHT:
							{
							setState(226);
							multiJoinExpression();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						} 
					}
					setState(233);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
				}
				setState(237);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND_THEN || _la==THEN) {
					{
					setState(234);
					expressionDelimiter();
					setState(235);
					selectModifierExpression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryOrderSpecificationContext extends ParserRuleContext {
		public SelectExpressionContext selectExpression() {
			return getRuleContext(SelectExpressionContext.class,0);
		}
		public TableExpressionContext tableExpression() {
			return getRuleContext(TableExpressionContext.class,0);
		}
		public WhereKeywordContext whereKeyword() {
			return getRuleContext(WhereKeywordContext.class,0);
		}
		public WhereExpressionContext whereExpression() {
			return getRuleContext(WhereExpressionContext.class,0);
		}
		public QueryOrderSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryOrderSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterQueryOrderSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitQueryOrderSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitQueryOrderSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryOrderSpecificationContext queryOrderSpecification() throws RecognitionException {
		QueryOrderSpecificationContext _localctx = new QueryOrderSpecificationContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_queryOrderSpecification);
		int _la;
		try {
			setState(271);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(241);
				selectExpression();
				setState(245);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(242);
					whereKeyword();
					setState(243);
					whereExpression();
					}
				}

				setState(247);
				tableExpression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(249);
				selectExpression();
				setState(250);
				tableExpression();
				setState(254);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(251);
					whereKeyword();
					setState(252);
					whereExpression();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(256);
				tableExpression();
				setState(257);
				selectExpression();
				setState(261);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(258);
					whereKeyword();
					setState(259);
					whereExpression();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(263);
				tableExpression();
				setState(267);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(264);
					whereKeyword();
					setState(265);
					whereExpression();
					}
				}

				setState(269);
				selectExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultiQueryOrderSpecificationContext extends ParserRuleContext {
		public SelectExpressionContext selectExpression() {
			return getRuleContext(SelectExpressionContext.class,0);
		}
		public TableExpressionNoJoinContext tableExpressionNoJoin() {
			return getRuleContext(TableExpressionNoJoinContext.class,0);
		}
		public WhereKeywordContext whereKeyword() {
			return getRuleContext(WhereKeywordContext.class,0);
		}
		public WhereExpressionContext whereExpression() {
			return getRuleContext(WhereExpressionContext.class,0);
		}
		public MultiQueryOrderSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiQueryOrderSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterMultiQueryOrderSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitMultiQueryOrderSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitMultiQueryOrderSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultiQueryOrderSpecificationContext multiQueryOrderSpecification() throws RecognitionException {
		MultiQueryOrderSpecificationContext _localctx = new MultiQueryOrderSpecificationContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_multiQueryOrderSpecification);
		int _la;
		try {
			setState(303);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(273);
				selectExpression();
				setState(277);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(274);
					whereKeyword();
					setState(275);
					whereExpression();
					}
				}

				setState(279);
				tableExpressionNoJoin();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(281);
				selectExpression();
				setState(282);
				tableExpressionNoJoin();
				setState(286);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(283);
					whereKeyword();
					setState(284);
					whereExpression();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(288);
				tableExpressionNoJoin();
				setState(289);
				selectExpression();
				setState(293);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(290);
					whereKeyword();
					setState(291);
					whereExpression();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(295);
				tableExpressionNoJoin();
				setState(299);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(296);
					whereKeyword();
					setState(297);
					whereExpression();
					}
				}

				setState(301);
				selectExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectExpressionContext extends ParserRuleContext {
		public SelectClauseContext selectClause() {
			return getRuleContext(SelectClauseContext.class,0);
		}
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public NothingElementContext nothingElement() {
			return getRuleContext(NothingElementContext.class,0);
		}
		public SelectExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSelectExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSelectExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSelectExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectExpressionContext selectExpression() throws RecognitionException {
		SelectExpressionContext _localctx = new SelectExpressionContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_selectExpression);
		int _la;
		try {
			setState(326);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(305);
				selectClause();
				setState(309);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & ((1L << (ALL - 46)) | (1L << (DISTINCT - 46)) | (1L << (DISTINCTROW - 46)))) != 0)) {
					{
					{
					setState(306);
					selectSpec();
					}
					}
					setState(311);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(312);
				selectElements();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(314);
				selectClause();
				setState(318);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & ((1L << (ALL - 46)) | (1L << (DISTINCT - 46)) | (1L << (DISTINCTROW - 46)))) != 0)) {
					{
					{
					setState(315);
					selectSpec();
					}
					}
					setState(320);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(321);
				selectElements();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(323);
				selectClause();
				setState(324);
				nothingElement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectClauseContext extends ParserRuleContext {
		public SelectKeywordContext selectKeyword() {
			return getRuleContext(SelectKeywordContext.class,0);
		}
		public SelectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSelectClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSelectClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSelectClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectClauseContext selectClause() throws RecognitionException {
		SelectClauseContext _localctx = new SelectClauseContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_selectClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(328);
			selectKeyword();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectKeywordContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(SimpleSpeakQlParser.SELECT, 0); }
		public TerminalNode RETRIEVE() { return getToken(SimpleSpeakQlParser.RETRIEVE, 0); }
		public TerminalNode SHOW_ME() { return getToken(SimpleSpeakQlParser.SHOW_ME, 0); }
		public TerminalNode DISPLAY() { return getToken(SimpleSpeakQlParser.DISPLAY, 0); }
		public TerminalNode PRESENT() { return getToken(SimpleSpeakQlParser.PRESENT, 0); }
		public TerminalNode FIND() { return getToken(SimpleSpeakQlParser.FIND, 0); }
		public TerminalNode GET() { return getToken(SimpleSpeakQlParser.GET, 0); }
		public TerminalNode WHAT_IS() { return getToken(SimpleSpeakQlParser.WHAT_IS, 0); }
		public TerminalNode WHAT_ARE() { return getToken(SimpleSpeakQlParser.WHAT_ARE, 0); }
		public TerminalNode WHAT_IS_THE() { return getToken(SimpleSpeakQlParser.WHAT_IS_THE, 0); }
		public TerminalNode WHAT_ARE_THE() { return getToken(SimpleSpeakQlParser.WHAT_ARE_THE, 0); }
		public SelectKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSelectKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSelectKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSelectKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectKeywordContext selectKeyword() throws RecognitionException {
		SelectKeywordContext _localctx = new SelectKeywordContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_selectKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(330);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RETRIEVE) | (1L << SHOW_ME) | (1L << DISPLAY) | (1L << PRESENT) | (1L << FIND) | (1L << WHAT_IS) | (1L << WHAT_ARE) | (1L << WHAT_IS_THE) | (1L << WHAT_ARE_THE))) != 0) || _la==GET || _la==SELECT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NothingElementContext extends ParserRuleContext {
		public NothingKeywordContext nothingKeyword() {
			return getRuleContext(NothingKeywordContext.class,0);
		}
		public NothingElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nothingElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterNothingElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitNothingElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitNothingElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NothingElementContext nothingElement() throws RecognitionException {
		NothingElementContext _localctx = new NothingElementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_nothingElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(332);
			nothingKeyword();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NothingKeywordContext extends ParserRuleContext {
		public TerminalNode NOTHING() { return getToken(SimpleSpeakQlParser.NOTHING, 0); }
		public TerminalNode NO_COLUMNS() { return getToken(SimpleSpeakQlParser.NO_COLUMNS, 0); }
		public NothingKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nothingKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterNothingKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitNothingKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitNothingKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NothingKeywordContext nothingKeyword() throws RecognitionException {
		NothingKeywordContext _localctx = new NothingKeywordContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_nothingKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(334);
			_la = _input.LA(1);
			if ( !(_la==NOTHING || _la==NO_COLUMNS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectSpecContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(SimpleSpeakQlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(SimpleSpeakQlParser.DISTINCT, 0); }
		public TerminalNode DISTINCTROW() { return getToken(SimpleSpeakQlParser.DISTINCTROW, 0); }
		public SelectSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSelectSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSelectSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSelectSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectSpecContext selectSpec() throws RecognitionException {
		SelectSpecContext _localctx = new SelectSpecContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_selectSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(336);
			_la = _input.LA(1);
			if ( !(((((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & ((1L << (ALL - 46)) | (1L << (DISTINCT - 46)) | (1L << (DISTINCTROW - 46)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementsContext extends ParserRuleContext {
		public Token star;
		public List<SelectElementContext> selectElement() {
			return getRuleContexts(SelectElementContext.class);
		}
		public SelectElementContext selectElement(int i) {
			return getRuleContext(SelectElementContext.class,i);
		}
		public TerminalNode STAR() { return getToken(SimpleSpeakQlParser.STAR, 0); }
		public List<SelectElementDelimiterContext> selectElementDelimiter() {
			return getRuleContexts(SelectElementDelimiterContext.class);
		}
		public SelectElementDelimiterContext selectElementDelimiter(int i) {
			return getRuleContext(SelectElementDelimiterContext.class,i);
		}
		public SelectElementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSelectElements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSelectElements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSelectElements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementsContext selectElements() throws RecognitionException {
		SelectElementsContext _localctx = new SelectElementsContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_selectElements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(340);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STAR:
				{
				setState(338);
				((SelectElementsContext)_localctx).star = match(STAR);
				}
				break;
			case SPOKEN_DOT:
			case THE:
			case IF:
			case INSERT:
			case REPLACE:
			case AVG:
			case COUNT:
			case MAX:
			case MIN:
			case SUM:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case MID:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case DOT:
			case ID:
				{
				setState(339);
				selectElement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(347);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AND || _la==COMMA) {
				{
				{
				setState(342);
				selectElementDelimiter();
				setState(343);
				selectElement();
				}
				}
				setState(349);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementContext extends ParserRuleContext {
		public SelectElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElement; }
	 
		public SelectElementContext() { }
		public void copyFrom(SelectElementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectFunctionElementContext extends SelectElementContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public SelectElementAsContext selectElementAs() {
			return getRuleContext(SelectElementAsContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public SelectFunctionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSelectFunctionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSelectFunctionElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSelectFunctionElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectStarElementContext extends SelectElementContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public SelectElementDotContext selectElementDot() {
			return getRuleContext(SelectElementDotContext.class,0);
		}
		public TerminalNode STAR() { return getToken(SimpleSpeakQlParser.STAR, 0); }
		public SelectStarElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSelectStarElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSelectStarElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSelectStarElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectColumnElementContext extends SelectElementContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public SelectElementAsContext selectElementAs() {
			return getRuleContext(SelectElementAsContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public SelectColumnElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSelectColumnElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSelectColumnElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSelectColumnElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementContext selectElement() throws RecognitionException {
		SelectElementContext _localctx = new SelectElementContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_selectElement);
		int _la;
		try {
			setState(366);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
			case 1:
				_localctx = new SelectStarElementContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(350);
				fullId();
				setState(351);
				selectElementDot();
				setState(352);
				match(STAR);
				}
				break;
			case 2:
				_localctx = new SelectColumnElementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(354);
				fullColumnName();
				setState(358);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(355);
					selectElementAs();
					setState(356);
					uid();
					}
				}

				}
				break;
			case 3:
				_localctx = new SelectFunctionElementContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(360);
				functionCall();
				setState(364);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(361);
					selectElementAs();
					setState(362);
					uid();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullIdContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode DOT() { return getToken(SimpleSpeakQlParser.DOT, 0); }
		public FullIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterFullId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitFullId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitFullId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullIdContext fullId() throws RecognitionException {
		FullIdContext _localctx = new FullIdContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_fullId);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(368);
			uid();
			setState(371);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				setState(369);
				match(DOT);
				setState(370);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UidContext extends ParserRuleContext {
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public UidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterUid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitUid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitUid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UidContext uid() throws RecognitionException {
		UidContext _localctx = new UidContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_uid);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(373);
			simpleId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleIdContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(SimpleSpeakQlParser.ID, 0); }
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public SimpleIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSimpleId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSimpleId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSimpleId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleIdContext simpleId() throws RecognitionException {
		SimpleIdContext _localctx = new SimpleIdContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_simpleId);
		try {
			setState(377);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(375);
				match(ID);
				}
				break;
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
				enterOuterAlt(_localctx, 2);
				{
				setState(376);
				intervalTypeBase();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeBaseContext extends ParserRuleContext {
		public TerminalNode QUARTER() { return getToken(SimpleSpeakQlParser.QUARTER, 0); }
		public TerminalNode MONTH() { return getToken(SimpleSpeakQlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(SimpleSpeakQlParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(SimpleSpeakQlParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(SimpleSpeakQlParser.MINUTE, 0); }
		public TerminalNode WEEK() { return getToken(SimpleSpeakQlParser.WEEK, 0); }
		public TerminalNode SECOND() { return getToken(SimpleSpeakQlParser.SECOND, 0); }
		public TerminalNode MICROSECOND() { return getToken(SimpleSpeakQlParser.MICROSECOND, 0); }
		public IntervalTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalTypeBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterIntervalTypeBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitIntervalTypeBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitIntervalTypeBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalTypeBaseContext intervalTypeBase() throws RecognitionException {
		IntervalTypeBaseContext _localctx = new IntervalTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_intervalTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(379);
			_la = _input.LA(1);
			if ( !(((((_la - 352)) & ~0x3f) == 0 && ((1L << (_la - 352)) & ((1L << (QUARTER - 352)) | (1L << (MONTH - 352)) | (1L << (DAY - 352)) | (1L << (HOUR - 352)) | (1L << (MINUTE - 352)) | (1L << (WEEK - 352)) | (1L << (SECOND - 352)) | (1L << (MICROSECOND - 352)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementDotContext extends ParserRuleContext {
		public TerminalNode DOT() { return getToken(SimpleSpeakQlParser.DOT, 0); }
		public TerminalNode SPOKEN_DOT() { return getToken(SimpleSpeakQlParser.SPOKEN_DOT, 0); }
		public SelectElementDotContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElementDot; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSelectElementDot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSelectElementDot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSelectElementDot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementDotContext selectElementDot() throws RecognitionException {
		SelectElementDotContext _localctx = new SelectElementDotContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_selectElementDot);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(381);
			_la = _input.LA(1);
			if ( !(_la==SPOKEN_DOT || _la==DOT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullColumnNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<DottedIdContext> dottedId() {
			return getRuleContexts(DottedIdContext.class);
		}
		public DottedIdContext dottedId(int i) {
			return getRuleContext(DottedIdContext.class,i);
		}
		public SelectElementDotContext selectElementDot() {
			return getRuleContext(SelectElementDotContext.class,0);
		}
		public FullColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterFullColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitFullColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitFullColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullColumnNameContext fullColumnName() throws RecognitionException {
		FullColumnNameContext _localctx = new FullColumnNameContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_fullColumnName);
		int _la;
		try {
			setState(395);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(383);
				uid();
				setState(388);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SPOKEN_DOT || _la==DOT) {
					{
					setState(384);
					dottedId();
					setState(386);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==SPOKEN_DOT || _la==DOT) {
						{
						setState(385);
						dottedId();
						}
					}

					}
				}

				}
				break;
			case SPOKEN_DOT:
			case DOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(390);
				selectElementDot();
				setState(391);
				dottedId();
				setState(393);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SPOKEN_DOT || _la==DOT) {
					{
					setState(392);
					dottedId();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DottedIdContext extends ParserRuleContext {
		public SelectElementDotContext selectElementDot() {
			return getRuleContext(SelectElementDotContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DottedIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dottedId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterDottedId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitDottedId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitDottedId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DottedIdContext dottedId() throws RecognitionException {
		DottedIdContext _localctx = new DottedIdContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_dottedId);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(397);
			selectElementDot();
			setState(398);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementAsContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SimpleSpeakQlParser.AS, 0); }
		public SelectElementAsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElementAs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSelectElementAs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSelectElementAs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSelectElementAs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementAsContext selectElementAs() throws RecognitionException {
		SelectElementAsContext _localctx = new SelectElementAsContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_selectElementAs);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(400);
			match(AS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionCallContext extends ParserRuleContext {
		public FunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionCall; }
	 
		public FunctionCallContext() { }
		public void copyFrom(FunctionCallContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AggregateFunctionCallContext extends FunctionCallContext {
		public AggregateWindowedFunctionContext aggregateWindowedFunction() {
			return getRuleContext(AggregateWindowedFunctionContext.class,0);
		}
		public AggregateFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterAggregateFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitAggregateFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitAggregateFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ScalarFunctionCallContext extends FunctionCallContext {
		public ScalarFunctionNameContext scalarFunctionName() {
			return getRuleContext(ScalarFunctionNameContext.class,0);
		}
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public ScalarFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterScalarFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitScalarFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitScalarFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionCallContext functionCall() throws RecognitionException {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_functionCall);
		int _la;
		try {
			setState(410);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case THE:
			case AVG:
			case COUNT:
			case MAX:
			case MIN:
			case SUM:
				_localctx = new AggregateFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(402);
				aggregateWindowedFunction();
				}
				break;
			case IF:
			case INSERT:
			case REPLACE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case MID:
				_localctx = new ScalarFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(403);
				scalarFunctionName();
				setState(404);
				leftParen();
				setState(406);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SPOKEN_DOT || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (FALSE - 93)) | (1L << (NOT - 93)) | (1L << (NULL_LITERAL - 93)))) != 0) || _la==TRUE || ((((_la - 352)) & ~0x3f) == 0 && ((1L << (_la - 352)) & ((1L << (QUARTER - 352)) | (1L << (MONTH - 352)) | (1L << (DAY - 352)) | (1L << (HOUR - 352)) | (1L << (MINUTE - 352)) | (1L << (WEEK - 352)) | (1L << (SECOND - 352)) | (1L << (MICROSECOND - 352)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (MINUS - 665)) | (1L << (DOT - 665)) | (1L << (ZERO_DECIMAL - 665)) | (1L << (ONE_DECIMAL - 665)) | (1L << (TWO_DECIMAL - 665)) | (1L << (START_NATIONAL_STRING_LITERAL - 665)) | (1L << (STRING_LITERAL - 665)) | (1L << (DECIMAL_LITERAL - 665)) | (1L << (HEXADECIMAL_LITERAL - 665)) | (1L << (REAL_LITERAL - 665)) | (1L << (NULL_SPEC_LITERAL - 665)) | (1L << (BIT_STRING - 665)) | (1L << (ID - 665)))) != 0)) {
					{
					setState(405);
					functionArgs();
					}
				}

				setState(408);
				rightParen();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LeftParenContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(SimpleSpeakQlParser.LR_BRACKET, 0); }
		public LeftParenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leftParen; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterLeftParen(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitLeftParen(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitLeftParen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LeftParenContext leftParen() throws RecognitionException {
		LeftParenContext _localctx = new LeftParenContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_leftParen);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(412);
			match(LR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RightParenContext extends ParserRuleContext {
		public TerminalNode RR_BRACKET() { return getToken(SimpleSpeakQlParser.RR_BRACKET, 0); }
		public RightParenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rightParen; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterRightParen(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitRightParen(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitRightParen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RightParenContext rightParen() throws RecognitionException {
		RightParenContext _localctx = new RightParenContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_rightParen);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(414);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
	 
		public ExpressionContext() { }
		public void copyFrom(ExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class IsExpressionContext extends ExpressionContext {
		public Token testValue;
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(SimpleSpeakQlParser.IS, 0); }
		public TerminalNode TRUE() { return getToken(SimpleSpeakQlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(SimpleSpeakQlParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(SimpleSpeakQlParser.UNKNOWN, 0); }
		public TerminalNode NOT() { return getToken(SimpleSpeakQlParser.NOT, 0); }
		public IsExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterIsExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitIsExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitIsExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NotExpressionContext extends ExpressionContext {
		public Token notOperator;
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SimpleSpeakQlParser.NOT, 0); }
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(SimpleSpeakQlParser.EXCLAMATION_SYMBOL, 0); }
		public NotExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterNotExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitNotExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitNotExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PredicateExpressionContext extends ExpressionContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PredicateExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterPredicateExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitPredicateExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitPredicateExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_expression);
		int _la;
		try {
			setState(426);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
			case 1:
				_localctx = new NotExpressionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(416);
				((NotExpressionContext)_localctx).notOperator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NOT || _la==EXCLAMATION_SYMBOL) ) {
					((NotExpressionContext)_localctx).notOperator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(417);
				predicate();
				}
				break;
			case 2:
				_localctx = new IsExpressionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(418);
				predicate();
				setState(419);
				match(IS);
				setState(421);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(420);
					match(NOT);
					}
				}

				setState(423);
				((IsExpressionContext)_localctx).testValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
					((IsExpressionContext)_localctx).testValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				_localctx = new PredicateExpressionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(425);
				predicate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogicalOperatorContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(SimpleSpeakQlParser.AND, 0); }
		public List<TerminalNode> BIT_AND_OP() { return getTokens(SimpleSpeakQlParser.BIT_AND_OP); }
		public TerminalNode BIT_AND_OP(int i) {
			return getToken(SimpleSpeakQlParser.BIT_AND_OP, i);
		}
		public TerminalNode XOR() { return getToken(SimpleSpeakQlParser.XOR, 0); }
		public TerminalNode OR() { return getToken(SimpleSpeakQlParser.OR, 0); }
		public List<TerminalNode> BIT_OR_OP() { return getTokens(SimpleSpeakQlParser.BIT_OR_OP); }
		public TerminalNode BIT_OR_OP(int i) {
			return getToken(SimpleSpeakQlParser.BIT_OR_OP, i);
		}
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logicalOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterLogicalOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitLogicalOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitLogicalOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogicalOperatorContext logicalOperator() throws RecognitionException {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_logicalOperator);
		try {
			setState(435);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
				enterOuterAlt(_localctx, 1);
				{
				setState(428);
				match(AND);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(429);
				match(BIT_AND_OP);
				setState(430);
				match(BIT_AND_OP);
				}
				break;
			case XOR:
				enterOuterAlt(_localctx, 3);
				{
				setState(431);
				match(XOR);
				}
				break;
			case OR:
				enterOuterAlt(_localctx, 4);
				{
				setState(432);
				match(OR);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(433);
				match(BIT_OR_OP);
				setState(434);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
	 
		public PredicateContext() { }
		public void copyFrom(PredicateContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SimpleExpressionAtomPredicateContext extends PredicateContext {
		public SimpleExpressionAtomContext simpleExpressionAtom() {
			return getRuleContext(SimpleExpressionAtomContext.class,0);
		}
		public SimpleExpressionAtomPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSimpleExpressionAtomPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSimpleExpressionAtomPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSimpleExpressionAtomPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BinaryComparisonPredicateContext extends PredicateContext {
		public SimpleExpressionAtomContext left;
		public SimpleExpressionAtomContext right;
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public List<SimpleExpressionAtomContext> simpleExpressionAtom() {
			return getRuleContexts(SimpleExpressionAtomContext.class);
		}
		public SimpleExpressionAtomContext simpleExpressionAtom(int i) {
			return getRuleContext(SimpleExpressionAtomContext.class,i);
		}
		public BinaryComparisonPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterBinaryComparisonPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitBinaryComparisonPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitBinaryComparisonPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IsNullPredicateContext extends PredicateContext {
		public SimpleExpressionAtomContext simpleExpressionAtom() {
			return getRuleContext(SimpleExpressionAtomContext.class,0);
		}
		public TerminalNode IS() { return getToken(SimpleSpeakQlParser.IS, 0); }
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public IsNullPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterIsNullPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitIsNullPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitIsNullPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_predicate);
		try {
			setState(446);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,37,_ctx) ) {
			case 1:
				_localctx = new IsNullPredicateContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(437);
				simpleExpressionAtom();
				setState(438);
				match(IS);
				setState(439);
				nullNotnull();
				}
				break;
			case 2:
				_localctx = new BinaryComparisonPredicateContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(441);
				((BinaryComparisonPredicateContext)_localctx).left = simpleExpressionAtom();
				setState(442);
				comparisonOperator();
				setState(443);
				((BinaryComparisonPredicateContext)_localctx).right = simpleExpressionAtom();
				}
				break;
			case 3:
				_localctx = new SimpleExpressionAtomPredicateContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(445);
				simpleExpressionAtom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IsKeywordContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(SimpleSpeakQlParser.IS, 0); }
		public IsKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterIsKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitIsKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitIsKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IsKeywordContext isKeyword() throws RecognitionException {
		IsKeywordContext _localctx = new IsKeywordContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_isKeyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(448);
			match(IS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionDelimiterContext extends ParserRuleContext {
		public TerminalNode AND_THEN() { return getToken(SimpleSpeakQlParser.AND_THEN, 0); }
		public TerminalNode THEN() { return getToken(SimpleSpeakQlParser.THEN, 0); }
		public ExpressionDelimiterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionDelimiter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterExpressionDelimiter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitExpressionDelimiter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitExpressionDelimiter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionDelimiterContext expressionDelimiter() throws RecognitionException {
		ExpressionDelimiterContext _localctx = new ExpressionDelimiterContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_expressionDelimiter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(450);
			_la = _input.LA(1);
			if ( !(_la==AND_THEN || _la==THEN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectModifierExpressionContext extends ParserRuleContext {
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public SelectModifierExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectModifierExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSelectModifierExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSelectModifierExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSelectModifierExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectModifierExpressionContext selectModifierExpression() throws RecognitionException {
		SelectModifierExpressionContext _localctx = new SelectModifierExpressionContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_selectModifierExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(453);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(452);
				groupByClause();
				}
			}

			setState(456);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(455);
				havingClause();
				}
			}

			setState(459);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(458);
				orderByClause();
				}
			}

			setState(462);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(461);
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByClauseContext extends ParserRuleContext {
		public GroupByKeywordContext groupByKeyword() {
			return getRuleContext(GroupByKeywordContext.class,0);
		}
		public List<GroupByItemContext> groupByItem() {
			return getRuleContexts(GroupByItemContext.class);
		}
		public GroupByItemContext groupByItem(int i) {
			return getRuleContext(GroupByItemContext.class,i);
		}
		public List<GroupByItemDelimiterContext> groupByItemDelimiter() {
			return getRuleContexts(GroupByItemDelimiterContext.class);
		}
		public GroupByItemDelimiterContext groupByItemDelimiter(int i) {
			return getRuleContext(GroupByItemDelimiterContext.class,i);
		}
		public TerminalNode WITH() { return getToken(SimpleSpeakQlParser.WITH, 0); }
		public TerminalNode ROLLUP() { return getToken(SimpleSpeakQlParser.ROLLUP, 0); }
		public ExpressionDelimiterContext expressionDelimiter() {
			return getRuleContext(ExpressionDelimiterContext.class,0);
		}
		public List<AggregateWindowedFunctionContext> aggregateWindowedFunction() {
			return getRuleContexts(AggregateWindowedFunctionContext.class);
		}
		public AggregateWindowedFunctionContext aggregateWindowedFunction(int i) {
			return getRuleContext(AggregateWindowedFunctionContext.class,i);
		}
		public SelectKeywordContext selectKeyword() {
			return getRuleContext(SelectKeywordContext.class,0);
		}
		public List<SelectElementDelimiterContext> selectElementDelimiter() {
			return getRuleContexts(SelectElementDelimiterContext.class);
		}
		public SelectElementDelimiterContext selectElementDelimiter(int i) {
			return getRuleContext(SelectElementDelimiterContext.class,i);
		}
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterGroupByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitGroupByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitGroupByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_groupByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(464);
			groupByKeyword();
			setState(465);
			groupByItem();
			setState(471);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AND || _la==COMMA) {
				{
				{
				setState(466);
				groupByItemDelimiter();
				setState(467);
				groupByItem();
				}
				}
				setState(473);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(476);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(474);
				match(WITH);
				setState(475);
				match(ROLLUP);
				}
			}

			setState(491);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
			case 1:
				{
				setState(478);
				expressionDelimiter();
				setState(480);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RETRIEVE) | (1L << SHOW_ME) | (1L << DISPLAY) | (1L << PRESENT) | (1L << FIND) | (1L << WHAT_IS) | (1L << WHAT_ARE) | (1L << WHAT_IS_THE) | (1L << WHAT_ARE_THE))) != 0) || _la==GET || _la==SELECT) {
					{
					setState(479);
					selectKeyword();
					}
				}

				setState(482);
				aggregateWindowedFunction();
				setState(488);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==AND || _la==COMMA) {
					{
					{
					setState(483);
					selectElementDelimiter();
					setState(484);
					aggregateWindowedFunction();
					}
					}
					setState(490);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByKeywordContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(SimpleSpeakQlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(SimpleSpeakQlParser.BY, 0); }
		public GroupByKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterGroupByKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitGroupByKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitGroupByKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByKeywordContext groupByKeyword() throws RecognitionException {
		GroupByKeywordContext _localctx = new GroupByKeywordContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_groupByKeyword);
		try {
			setState(496);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(493);
				match(GROUP);
				setState(494);
				match(BY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(495);
				match(GROUP);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByItemContext extends ParserRuleContext {
		public Token order;
		public GroupByExpressionContext groupByExpression() {
			return getRuleContext(GroupByExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(SimpleSpeakQlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(SimpleSpeakQlParser.DESC, 0); }
		public AutomaticGroupByKeywordContext automaticGroupByKeyword() {
			return getRuleContext(AutomaticGroupByKeywordContext.class,0);
		}
		public GroupByItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterGroupByItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitGroupByItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitGroupByItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByItemContext groupByItem() throws RecognitionException {
		GroupByItemContext _localctx = new GroupByItemContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_groupByItem);
		int _la;
		try {
			setState(503);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SPOKEN_DOT:
			case FALSE:
			case NOT:
			case NULL_LITERAL:
			case TRUE:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case PLUS:
			case MINUS:
			case EXCLAMATION_SYMBOL:
			case BIT_NOT_OP:
			case DOT:
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case START_NATIONAL_STRING_LITERAL:
			case STRING_LITERAL:
			case DECIMAL_LITERAL:
			case HEXADECIMAL_LITERAL:
			case REAL_LITERAL:
			case NULL_SPEC_LITERAL:
			case BIT_STRING:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(498);
				groupByExpression();
				setState(500);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(499);
					((GroupByItemContext)_localctx).order = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
						((GroupByItemContext)_localctx).order = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case AUTOMATIC:
			case AUTOMATICALLY:
				enterOuterAlt(_localctx, 2);
				{
				setState(502);
				automaticGroupByKeyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AutomaticGroupByKeywordContext extends ParserRuleContext {
		public TerminalNode AUTOMATIC() { return getToken(SimpleSpeakQlParser.AUTOMATIC, 0); }
		public TerminalNode AUTOMATICALLY() { return getToken(SimpleSpeakQlParser.AUTOMATICALLY, 0); }
		public AutomaticGroupByKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_automaticGroupByKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterAutomaticGroupByKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitAutomaticGroupByKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitAutomaticGroupByKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AutomaticGroupByKeywordContext automaticGroupByKeyword() throws RecognitionException {
		AutomaticGroupByKeywordContext _localctx = new AutomaticGroupByKeywordContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_automaticGroupByKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(505);
			_la = _input.LA(1);
			if ( !(_la==AUTOMATIC || _la==AUTOMATICALLY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByExpressionContext extends ParserRuleContext {
		public Token notOperator;
		public Token testValue;
		public GroupByExpressionContext groupByExpression() {
			return getRuleContext(GroupByExpressionContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SimpleSpeakQlParser.NOT, 0); }
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(SimpleSpeakQlParser.EXCLAMATION_SYMBOL, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(SimpleSpeakQlParser.IS, 0); }
		public TerminalNode TRUE() { return getToken(SimpleSpeakQlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(SimpleSpeakQlParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(SimpleSpeakQlParser.UNKNOWN, 0); }
		public GroupByExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterGroupByExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitGroupByExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitGroupByExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByExpressionContext groupByExpression() throws RecognitionException {
		GroupByExpressionContext _localctx = new GroupByExpressionContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_groupByExpression);
		int _la;
		try {
			setState(517);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,51,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(507);
				((GroupByExpressionContext)_localctx).notOperator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NOT || _la==EXCLAMATION_SYMBOL) ) {
					((GroupByExpressionContext)_localctx).notOperator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(508);
				groupByExpression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(509);
				predicate();
				setState(510);
				match(IS);
				setState(512);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(511);
					match(NOT);
					}
				}

				setState(514);
				((GroupByExpressionContext)_localctx).testValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
					((GroupByExpressionContext)_localctx).testValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(516);
				predicate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByItemDelimiterContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(SimpleSpeakQlParser.COMMA, 0); }
		public TerminalNode AND() { return getToken(SimpleSpeakQlParser.AND, 0); }
		public GroupByItemDelimiterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByItemDelimiter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterGroupByItemDelimiter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitGroupByItemDelimiter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitGroupByItemDelimiter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByItemDelimiterContext groupByItemDelimiter() throws RecognitionException {
		GroupByItemDelimiterContext _localctx = new GroupByItemDelimiterContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_groupByItemDelimiter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(519);
			_la = _input.LA(1);
			if ( !(_la==AND || _la==COMMA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingClauseContext extends ParserRuleContext {
		public ExpressionContext havingExpr;
		public HavingKeywordContext havingKeyword() {
			return getRuleContext(HavingKeywordContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterHavingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitHavingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitHavingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(521);
			havingKeyword();
			setState(522);
			((HavingClauseContext)_localctx).havingExpr = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingKeywordContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(SimpleSpeakQlParser.HAVING, 0); }
		public HavingKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterHavingKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitHavingKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitHavingKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingKeywordContext havingKeyword() throws RecognitionException {
		HavingKeywordContext _localctx = new HavingKeywordContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_havingKeyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(524);
			match(HAVING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(SimpleSpeakQlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(SimpleSpeakQlParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SimpleSpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SimpleSpeakQlParser.COMMA, i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterOrderByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitOrderByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitOrderByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByClauseContext orderByClause() throws RecognitionException {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_orderByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(526);
			match(ORDER);
			setState(527);
			match(BY);
			setState(528);
			orderByExpression();
			setState(533);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(529);
				match(COMMA);
				setState(530);
				orderByExpression();
				}
				}
				setState(535);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByExpressionContext extends ParserRuleContext {
		public Token order;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(SimpleSpeakQlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(SimpleSpeakQlParser.DESC, 0); }
		public OrderByExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterOrderByExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitOrderByExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitOrderByExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByExpressionContext orderByExpression() throws RecognitionException {
		OrderByExpressionContext _localctx = new OrderByExpressionContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_orderByExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(536);
			expression();
			setState(538);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(537);
				((OrderByExpressionContext)_localctx).order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((OrderByExpressionContext)_localctx).order = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseContext extends ParserRuleContext {
		public LimitClauseAtomContext offset;
		public LimitClauseAtomContext limit;
		public TerminalNode LIMIT() { return getToken(SimpleSpeakQlParser.LIMIT, 0); }
		public TerminalNode OFFSET() { return getToken(SimpleSpeakQlParser.OFFSET, 0); }
		public List<LimitClauseAtomContext> limitClauseAtom() {
			return getRuleContexts(LimitClauseAtomContext.class);
		}
		public LimitClauseAtomContext limitClauseAtom(int i) {
			return getRuleContext(LimitClauseAtomContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(SimpleSpeakQlParser.COMMA, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterLimitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitLimitClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitLimitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_limitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(540);
			match(LIMIT);
			setState(551);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
			case 1:
				{
				setState(544);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
				case 1:
					{
					setState(541);
					((LimitClauseContext)_localctx).offset = limitClauseAtom();
					setState(542);
					match(COMMA);
					}
					break;
				}
				setState(546);
				((LimitClauseContext)_localctx).limit = limitClauseAtom();
				}
				break;
			case 2:
				{
				setState(547);
				((LimitClauseContext)_localctx).limit = limitClauseAtom();
				setState(548);
				match(OFFSET);
				setState(549);
				((LimitClauseContext)_localctx).offset = limitClauseAtom();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseAtomContext extends ParserRuleContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public LimitClauseAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClauseAtom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterLimitClauseAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitLimitClauseAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitLimitClauseAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseAtomContext limitClauseAtom() throws RecognitionException {
		LimitClauseAtomContext _localctx = new LimitClauseAtomContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_limitClauseAtom);
		try {
			setState(555);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(553);
				decimalLiteral();
				}
				break;
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(554);
				simpleId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionContext extends ParserRuleContext {
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitQueryExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitQueryExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionContext queryExpression() throws RecognitionException {
		QueryExpressionContext _localctx = new QueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_queryExpression);
		try {
			setState(565);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(557);
				leftParen();
				setState(558);
				querySpecification();
				setState(559);
				rightParen();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(561);
				leftParen();
				setState(562);
				queryExpression();
				setState(563);
				rightParen();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseNoJoinContext extends ParserRuleContext {
		public FromKeywordContext fromKeyword() {
			return getRuleContext(FromKeywordContext.class,0);
		}
		public TableSourceNoJoinContext tableSourceNoJoin() {
			return getRuleContext(TableSourceNoJoinContext.class,0);
		}
		public FromClauseNoJoinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClauseNoJoin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterFromClauseNoJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitFromClauseNoJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitFromClauseNoJoin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseNoJoinContext fromClauseNoJoin() throws RecognitionException {
		FromClauseNoJoinContext _localctx = new FromClauseNoJoinContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_fromClauseNoJoin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(567);
			fromKeyword();
			setState(568);
			tableSourceNoJoin();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public FromKeywordContext fromKeyword() {
			return getRuleContext(FromKeywordContext.class,0);
		}
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitFromClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_fromClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(570);
			fromKeyword();
			setState(571);
			tableSources();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromKeywordContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(SimpleSpeakQlParser.FROM, 0); }
		public TerminalNode FROM_TABLE() { return getToken(SimpleSpeakQlParser.FROM_TABLE, 0); }
		public TerminalNode FROM_TABLES() { return getToken(SimpleSpeakQlParser.FROM_TABLES, 0); }
		public TerminalNode IN() { return getToken(SimpleSpeakQlParser.IN, 0); }
		public TerminalNode IN_TABLE() { return getToken(SimpleSpeakQlParser.IN_TABLE, 0); }
		public TerminalNode IN_TABLES() { return getToken(SimpleSpeakQlParser.IN_TABLES, 0); }
		public FromKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterFromKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitFromKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitFromKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromKeywordContext fromKeyword() throws RecognitionException {
		FromKeywordContext _localctx = new FromKeywordContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_fromKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(573);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IN_TABLE) | (1L << IN_TABLES) | (1L << FROM_TABLE) | (1L << FROM_TABLES))) != 0) || _la==FROM || _la==IN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableKeywordContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(SimpleSpeakQlParser.TABLE, 0); }
		public TableKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterTableKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitTableKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitTableKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableKeywordContext tableKeyword() throws RecognitionException {
		TableKeywordContext _localctx = new TableKeywordContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_tableKeyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(575);
			match(TABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourcesContext extends ParserRuleContext {
		public List<TableSourceContext> tableSource() {
			return getRuleContexts(TableSourceContext.class);
		}
		public TableSourceContext tableSource(int i) {
			return getRuleContext(TableSourceContext.class,i);
		}
		public List<TheKeywordContext> theKeyword() {
			return getRuleContexts(TheKeywordContext.class);
		}
		public TheKeywordContext theKeyword(int i) {
			return getRuleContext(TheKeywordContext.class,i);
		}
		public List<TableKeywordContext> tableKeyword() {
			return getRuleContexts(TableKeywordContext.class);
		}
		public TableKeywordContext tableKeyword(int i) {
			return getRuleContext(TableKeywordContext.class,i);
		}
		public List<TableSourceDelimiterContext> tableSourceDelimiter() {
			return getRuleContexts(TableSourceDelimiterContext.class);
		}
		public TableSourceDelimiterContext tableSourceDelimiter(int i) {
			return getRuleContext(TableSourceDelimiterContext.class,i);
		}
		public TableSourcesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSources; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterTableSources(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitTableSources(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitTableSources(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourcesContext tableSources() throws RecognitionException {
		TableSourcesContext _localctx = new TableSourcesContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_tableSources);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(578);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
			case 1:
				{
				setState(577);
				theKeyword();
				}
				break;
			}
			setState(580);
			tableSource();
			setState(582);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(581);
				tableKeyword();
				}
			}

			setState(594);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AND || _la==COMMA) {
				{
				{
				setState(584);
				tableSourceDelimiter();
				setState(586);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
				case 1:
					{
					setState(585);
					theKeyword();
					}
					break;
				}
				setState(588);
				tableSource();
				setState(590);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(589);
					tableKeyword();
					}
				}

				}
				}
				setState(596);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceNoJoinContext extends ParserRuleContext {
		public TableSourceNoJoinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSourceNoJoin; }
	 
		public TableSourceNoJoinContext() { }
		public void copyFrom(TableSourceNoJoinContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableSourceNoJoinBaseContext extends TableSourceNoJoinContext {
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TableSourceNoJoinBaseContext(TableSourceNoJoinContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterTableSourceNoJoinBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitTableSourceNoJoinBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitTableSourceNoJoinBase(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableSourceNoJoinNestedContext extends TableSourceNoJoinContext {
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public TableSourceNoJoinNestedContext(TableSourceNoJoinContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterTableSourceNoJoinNested(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitTableSourceNoJoinNested(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitTableSourceNoJoinNested(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceNoJoinContext tableSourceNoJoin() throws RecognitionException {
		TableSourceNoJoinContext _localctx = new TableSourceNoJoinContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_tableSourceNoJoin);
		try {
			setState(602);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
			case 1:
				_localctx = new TableSourceNoJoinBaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(597);
				tableSourceItem();
				}
				break;
			case 2:
				_localctx = new TableSourceNoJoinNestedContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(598);
				leftParen();
				setState(599);
				tableSourceItem();
				setState(600);
				rightParen();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceContext extends ParserRuleContext {
		public TableSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSource; }
	 
		public TableSourceContext() { }
		public void copyFrom(TableSourceContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableSourceNestedContext extends TableSourceContext {
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public TableSourceNestedContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterTableSourceNested(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitTableSourceNested(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitTableSourceNested(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableSourceBaseContext extends TableSourceContext {
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public TableSourceBaseContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterTableSourceBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitTableSourceBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitTableSourceBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceContext tableSource() throws RecognitionException {
		TableSourceContext _localctx = new TableSourceContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_tableSource);
		int _la;
		try {
			setState(621);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,66,_ctx) ) {
			case 1:
				_localctx = new TableSourceBaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(604);
				tableSourceItem();
				setState(608);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 19)) & ~0x3f) == 0 && ((1L << (_la - 19)) & ((1L << (JOIN_TABLE - 19)) | (1L << (BY_JOINING - 19)) | (1L << (BY_JOINING_TABLE - 19)) | (1L << (JOIN_WITH - 19)) | (1L << (JOIN_WITH_TABLE - 19)) | (1L << (JOINED_WITH - 19)) | (1L << (JOINED_WITH_TABLE - 19)) | (1L << (BY_JOINING_WITH_TABLE - 19)) | (1L << (CROSS - 19)))) != 0) || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (INNER - 112)) | (1L << (JOIN - 112)) | (1L << (LEFT - 112)) | (1L << (NATURAL - 112)) | (1L << (RIGHT - 112)))) != 0)) {
					{
					{
					setState(605);
					joinPart();
					}
					}
					setState(610);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new TableSourceNestedContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(611);
				leftParen();
				setState(612);
				tableSourceItem();
				setState(616);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 19)) & ~0x3f) == 0 && ((1L << (_la - 19)) & ((1L << (JOIN_TABLE - 19)) | (1L << (BY_JOINING - 19)) | (1L << (BY_JOINING_TABLE - 19)) | (1L << (JOIN_WITH - 19)) | (1L << (JOIN_WITH_TABLE - 19)) | (1L << (JOINED_WITH - 19)) | (1L << (JOINED_WITH_TABLE - 19)) | (1L << (BY_JOINING_WITH_TABLE - 19)) | (1L << (CROSS - 19)))) != 0) || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (INNER - 112)) | (1L << (JOIN - 112)) | (1L << (LEFT - 112)) | (1L << (NATURAL - 112)) | (1L << (RIGHT - 112)))) != 0)) {
					{
					{
					setState(613);
					joinPart();
					}
					}
					setState(618);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(619);
				rightParen();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceItemContext extends ParserRuleContext {
		public TableSourceItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSourceItem; }
	 
		public TableSourceItemContext() { }
		public void copyFrom(TableSourceItemContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubqueryTableItemContext extends TableSourceItemContext {
		public SubQueryTableContext subQueryTable() {
			return getRuleContext(SubQueryTableContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public SubqueryTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSubqueryTableItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSubqueryTableItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSubqueryTableItem(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableSourcesItemContext extends TableSourceItemContext {
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public TableSourcesItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterTableSourcesItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitTableSourcesItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitTableSourcesItem(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OnlyTableNameItemContext extends TableSourceItemContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TheKeywordContext theKeyword() {
			return getRuleContext(TheKeywordContext.class,0);
		}
		public TableKeywordContext tableKeyword() {
			return getRuleContext(TableKeywordContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public OnlyTableNameItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterOnlyTableNameItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitOnlyTableNameItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitOnlyTableNameItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceItemContext tableSourceItem() throws RecognitionException {
		TableSourceItemContext _localctx = new TableSourceItemContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_tableSourceItem);
		int _la;
		try {
			setState(640);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,70,_ctx) ) {
			case 1:
				_localctx = new OnlyTableNameItemContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(624);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==THE) {
					{
					setState(623);
					theKeyword();
					}
				}

				setState(626);
				tableName();
				setState(628);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
				case 1:
					{
					setState(627);
					tableKeyword();
					}
					break;
				}
				setState(631);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS || ((((_la - 352)) & ~0x3f) == 0 && ((1L << (_la - 352)) & ((1L << (QUARTER - 352)) | (1L << (MONTH - 352)) | (1L << (DAY - 352)) | (1L << (HOUR - 352)) | (1L << (MINUTE - 352)) | (1L << (WEEK - 352)) | (1L << (SECOND - 352)) | (1L << (MICROSECOND - 352)))) != 0) || _la==ID) {
					{
					setState(630);
					tableAlias();
					}
				}

				}
				break;
			case 2:
				_localctx = new SubqueryTableItemContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(633);
				subQueryTable();
				setState(634);
				tableAlias();
				}
				break;
			case 3:
				_localctx = new TableSourcesItemContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(636);
				leftParen();
				setState(637);
				tableSources();
				setState(638);
				rightParen();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubQueryTableContext extends ParserRuleContext {
		public SelectStatementContext parenthesisSubquery;
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public SubQueryTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subQueryTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSubQueryTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSubQueryTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSubQueryTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubQueryTableContext subQueryTable() throws RecognitionException {
		SubQueryTableContext _localctx = new SubQueryTableContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_subQueryTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(642);
			leftParen();
			setState(643);
			((SubQueryTableContext)_localctx).parenthesisSubquery = selectStatement();
			setState(644);
			rightParen();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableAliasContext extends ParserRuleContext {
		public UidContext alias;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TableAliasAsContext tableAliasAs() {
			return getRuleContext(TableAliasAsContext.class,0);
		}
		public TableAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterTableAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitTableAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitTableAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableAliasContext tableAlias() throws RecognitionException {
		TableAliasContext _localctx = new TableAliasContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_tableAlias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(647);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(646);
				tableAliasAs();
				}
			}

			setState(649);
			((TableAliasContext)_localctx).alias = uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableAliasAsContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SimpleSpeakQlParser.AS, 0); }
		public TableAliasAsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAliasAs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterTableAliasAs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitTableAliasAs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitTableAliasAs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableAliasAsContext tableAliasAs() throws RecognitionException {
		TableAliasAsContext _localctx = new TableAliasAsContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_tableAliasAs);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(651);
			match(AS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_tableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(653);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UidListContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SimpleSpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SimpleSpeakQlParser.COMMA, i);
		}
		public UidListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uidList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterUidList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitUidList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitUidList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UidListContext uidList() throws RecognitionException {
		UidListContext _localctx = new UidListContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_uidList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(655);
			uid();
			setState(660);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(656);
				match(COMMA);
				setState(657);
				uid();
				}
				}
				setState(662);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintContext extends ParserRuleContext {
		public Token indexHintAction;
		public Token keyFormat;
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public TerminalNode USE() { return getToken(SimpleSpeakQlParser.USE, 0); }
		public TerminalNode IGNORE() { return getToken(SimpleSpeakQlParser.IGNORE, 0); }
		public TerminalNode FORCE() { return getToken(SimpleSpeakQlParser.FORCE, 0); }
		public TerminalNode INDEX() { return getToken(SimpleSpeakQlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(SimpleSpeakQlParser.KEY, 0); }
		public TerminalNode FOR() { return getToken(SimpleSpeakQlParser.FOR, 0); }
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public IndexHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterIndexHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitIndexHint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitIndexHint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintContext indexHint() throws RecognitionException {
		IndexHintContext _localctx = new IndexHintContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_indexHint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(663);
			((IndexHintContext)_localctx).indexHintAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FORCE || _la==IGNORE || _la==USE) ) {
				((IndexHintContext)_localctx).indexHintAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(664);
			((IndexHintContext)_localctx).keyFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==INDEX || _la==KEY) ) {
				((IndexHintContext)_localctx).keyFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(667);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(665);
				match(FOR);
				setState(666);
				indexHintType();
				}
			}

			setState(669);
			leftParen();
			setState(670);
			uidList();
			setState(671);
			rightParen();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintTypeContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(SimpleSpeakQlParser.JOIN, 0); }
		public TerminalNode ORDER() { return getToken(SimpleSpeakQlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(SimpleSpeakQlParser.BY, 0); }
		public TerminalNode GROUP() { return getToken(SimpleSpeakQlParser.GROUP, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterIndexHintType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitIndexHintType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitIndexHintType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintTypeContext indexHintType() throws RecognitionException {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_indexHintType);
		try {
			setState(678);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(673);
				match(JOIN);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 2);
				{
				setState(674);
				match(ORDER);
				setState(675);
				match(BY);
				}
				break;
			case GROUP:
				enterOuterAlt(_localctx, 3);
				{
				setState(676);
				match(GROUP);
				setState(677);
				match(BY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinKeywordContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(SimpleSpeakQlParser.JOIN, 0); }
		public TerminalNode JOIN_TABLE() { return getToken(SimpleSpeakQlParser.JOIN_TABLE, 0); }
		public TerminalNode BY_JOINING() { return getToken(SimpleSpeakQlParser.BY_JOINING, 0); }
		public TerminalNode BY_JOINING_TABLE() { return getToken(SimpleSpeakQlParser.BY_JOINING_TABLE, 0); }
		public TerminalNode JOINED_WITH() { return getToken(SimpleSpeakQlParser.JOINED_WITH, 0); }
		public TerminalNode JOIN_WITH() { return getToken(SimpleSpeakQlParser.JOIN_WITH, 0); }
		public TerminalNode JOINED_WITH_TABLE() { return getToken(SimpleSpeakQlParser.JOINED_WITH_TABLE, 0); }
		public TerminalNode JOIN_WITH_TABLE() { return getToken(SimpleSpeakQlParser.JOIN_WITH_TABLE, 0); }
		public TerminalNode BY_JOINING_WITH_TABLE() { return getToken(SimpleSpeakQlParser.BY_JOINING_WITH_TABLE, 0); }
		public JoinKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterJoinKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitJoinKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitJoinKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinKeywordContext joinKeyword() throws RecognitionException {
		JoinKeywordContext _localctx = new JoinKeywordContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_joinKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(680);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << JOIN_TABLE) | (1L << BY_JOINING) | (1L << BY_JOINING_TABLE) | (1L << JOIN_WITH) | (1L << JOIN_WITH_TABLE) | (1L << JOINED_WITH) | (1L << JOINED_WITH_TABLE) | (1L << BY_JOINING_WITH_TABLE))) != 0) || _la==JOIN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultiJoinExpressionContext extends ParserRuleContext {
		public List<MultiJoinPartContext> multiJoinPart() {
			return getRuleContexts(MultiJoinPartContext.class);
		}
		public MultiJoinPartContext multiJoinPart(int i) {
			return getRuleContext(MultiJoinPartContext.class,i);
		}
		public List<ExpressionDelimiterContext> expressionDelimiter() {
			return getRuleContexts(ExpressionDelimiterContext.class);
		}
		public ExpressionDelimiterContext expressionDelimiter(int i) {
			return getRuleContext(ExpressionDelimiterContext.class,i);
		}
		public MultiJoinExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiJoinExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterMultiJoinExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitMultiJoinExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitMultiJoinExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultiJoinExpressionContext multiJoinExpression() throws RecognitionException {
		MultiJoinExpressionContext _localctx = new MultiJoinExpressionContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_multiJoinExpression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(682);
			multiJoinPart();
			setState(688);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,75,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(683);
					expressionDelimiter();
					setState(684);
					multiJoinPart();
					}
					} 
				}
				setState(690);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,75,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultiJoinPartContext extends ParserRuleContext {
		public MultiInnerJoinContext multiInnerJoin() {
			return getRuleContext(MultiInnerJoinContext.class,0);
		}
		public MultiOuterJoinContext multiOuterJoin() {
			return getRuleContext(MultiOuterJoinContext.class,0);
		}
		public MultiNaturalJoinContext multiNaturalJoin() {
			return getRuleContext(MultiNaturalJoinContext.class,0);
		}
		public MultiJoinPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiJoinPart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterMultiJoinPart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitMultiJoinPart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitMultiJoinPart(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultiJoinPartContext multiJoinPart() throws RecognitionException {
		MultiJoinPartContext _localctx = new MultiJoinPartContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_multiJoinPart);
		try {
			setState(694);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JOIN_TABLE:
			case BY_JOINING:
			case BY_JOINING_TABLE:
			case JOIN_WITH:
			case JOIN_WITH_TABLE:
			case JOINED_WITH:
			case JOINED_WITH_TABLE:
			case BY_JOINING_WITH_TABLE:
			case CROSS:
			case INNER:
			case JOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(691);
				multiInnerJoin();
				}
				break;
			case LEFT:
			case RIGHT:
				enterOuterAlt(_localctx, 2);
				{
				setState(692);
				multiOuterJoin();
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(693);
				multiNaturalJoin();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultiInnerJoinContext extends ParserRuleContext {
		public JoinKeywordContext joinKeyword() {
			return getRuleContext(JoinKeywordContext.class,0);
		}
		public List<TableSourceItemContext> tableSourceItem() {
			return getRuleContexts(TableSourceItemContext.class);
		}
		public TableSourceItemContext tableSourceItem(int i) {
			return getRuleContext(TableSourceItemContext.class,i);
		}
		public WithKeywordContext withKeyword() {
			return getRuleContext(WithKeywordContext.class,0);
		}
		public InnerJoinKeywordContext innerJoinKeyword() {
			return getRuleContext(InnerJoinKeywordContext.class,0);
		}
		public OnKeywordContext onKeyword() {
			return getRuleContext(OnKeywordContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(SimpleSpeakQlParser.USING, 0); }
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public MultiInnerJoinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiInnerJoin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterMultiInnerJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitMultiInnerJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitMultiInnerJoin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultiInnerJoinContext multiInnerJoin() throws RecognitionException {
		MultiInnerJoinContext _localctx = new MultiInnerJoinContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_multiInnerJoin);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(697);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CROSS || _la==INNER) {
				{
				setState(696);
				innerJoinKeyword();
				}
			}

			setState(699);
			joinKeyword();
			setState(700);
			tableSourceItem();
			setState(701);
			withKeyword();
			setState(702);
			tableSourceItem();
			setState(711);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				{
				setState(703);
				onKeyword();
				setState(704);
				expression();
				}
				break;
			case USING:
				{
				setState(706);
				match(USING);
				setState(707);
				leftParen();
				setState(708);
				uidList();
				setState(709);
				rightParen();
				}
				break;
			case EOF:
			case END_OF_FILE:
			case AND_THEN:
			case THEN:
			case RR_BRACKET:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultiOuterJoinContext extends ParserRuleContext {
		public JoinKeywordContext joinKeyword() {
			return getRuleContext(JoinKeywordContext.class,0);
		}
		public List<TableSourceItemContext> tableSourceItem() {
			return getRuleContexts(TableSourceItemContext.class);
		}
		public TableSourceItemContext tableSourceItem(int i) {
			return getRuleContext(TableSourceItemContext.class,i);
		}
		public WithKeywordContext withKeyword() {
			return getRuleContext(WithKeywordContext.class,0);
		}
		public JoinDirectionContext joinDirection() {
			return getRuleContext(JoinDirectionContext.class,0);
		}
		public OnKeywordContext onKeyword() {
			return getRuleContext(OnKeywordContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(SimpleSpeakQlParser.USING, 0); }
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public OuterJoinKeywordContext outerJoinKeyword() {
			return getRuleContext(OuterJoinKeywordContext.class,0);
		}
		public MultiOuterJoinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiOuterJoin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterMultiOuterJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitMultiOuterJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitMultiOuterJoin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultiOuterJoinContext multiOuterJoin() throws RecognitionException {
		MultiOuterJoinContext _localctx = new MultiOuterJoinContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_multiOuterJoin);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(713);
			joinDirection();
			}
			setState(715);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTER) {
				{
				setState(714);
				outerJoinKeyword();
				}
			}

			setState(717);
			joinKeyword();
			setState(718);
			tableSourceItem();
			setState(719);
			withKeyword();
			setState(720);
			tableSourceItem();
			setState(729);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				{
				setState(721);
				onKeyword();
				setState(722);
				expression();
				}
				break;
			case USING:
				{
				setState(724);
				match(USING);
				setState(725);
				leftParen();
				setState(726);
				uidList();
				setState(727);
				rightParen();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultiNaturalJoinContext extends ParserRuleContext {
		public NaturalJoinKeywordContext naturalJoinKeyword() {
			return getRuleContext(NaturalJoinKeywordContext.class,0);
		}
		public JoinKeywordContext joinKeyword() {
			return getRuleContext(JoinKeywordContext.class,0);
		}
		public List<TableSourceItemContext> tableSourceItem() {
			return getRuleContexts(TableSourceItemContext.class);
		}
		public TableSourceItemContext tableSourceItem(int i) {
			return getRuleContext(TableSourceItemContext.class,i);
		}
		public WithKeywordContext withKeyword() {
			return getRuleContext(WithKeywordContext.class,0);
		}
		public JoinDirectionContext joinDirection() {
			return getRuleContext(JoinDirectionContext.class,0);
		}
		public OuterJoinKeywordContext outerJoinKeyword() {
			return getRuleContext(OuterJoinKeywordContext.class,0);
		}
		public MultiNaturalJoinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiNaturalJoin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterMultiNaturalJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitMultiNaturalJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitMultiNaturalJoin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultiNaturalJoinContext multiNaturalJoin() throws RecognitionException {
		MultiNaturalJoinContext _localctx = new MultiNaturalJoinContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_multiNaturalJoin);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(731);
			naturalJoinKeyword();
			setState(736);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT || _la==RIGHT) {
				{
				{
				setState(732);
				joinDirection();
				}
				setState(734);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(733);
					outerJoinKeyword();
					}
				}

				}
			}

			setState(738);
			joinKeyword();
			setState(739);
			tableSourceItem();
			setState(740);
			withKeyword();
			setState(741);
			tableSourceItem();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithKeywordContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SimpleSpeakQlParser.WITH, 0); }
		public TerminalNode WITH_TABLE() { return getToken(SimpleSpeakQlParser.WITH_TABLE, 0); }
		public WithKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterWithKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitWithKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitWithKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithKeywordContext withKeyword() throws RecognitionException {
		WithKeywordContext _localctx = new WithKeywordContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_withKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(743);
			_la = _input.LA(1);
			if ( !(_la==WITH_TABLE || _la==WITH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinPartContext extends ParserRuleContext {
		public InnerJoinContext innerJoin() {
			return getRuleContext(InnerJoinContext.class,0);
		}
		public OuterJoinContext outerJoin() {
			return getRuleContext(OuterJoinContext.class,0);
		}
		public NaturalJoinContext naturalJoin() {
			return getRuleContext(NaturalJoinContext.class,0);
		}
		public JoinPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinPart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterJoinPart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitJoinPart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitJoinPart(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinPartContext joinPart() throws RecognitionException {
		JoinPartContext _localctx = new JoinPartContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_joinPart);
		try {
			setState(748);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JOIN_TABLE:
			case BY_JOINING:
			case BY_JOINING_TABLE:
			case JOIN_WITH:
			case JOIN_WITH_TABLE:
			case JOINED_WITH:
			case JOINED_WITH_TABLE:
			case BY_JOINING_WITH_TABLE:
			case CROSS:
			case INNER:
			case JOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(745);
				innerJoin();
				}
				break;
			case LEFT:
			case RIGHT:
				enterOuterAlt(_localctx, 2);
				{
				setState(746);
				outerJoin();
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(747);
				naturalJoin();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InnerJoinContext extends ParserRuleContext {
		public JoinKeywordContext joinKeyword() {
			return getRuleContext(JoinKeywordContext.class,0);
		}
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public InnerJoinKeywordContext innerJoinKeyword() {
			return getRuleContext(InnerJoinKeywordContext.class,0);
		}
		public OnKeywordContext onKeyword() {
			return getRuleContext(OnKeywordContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(SimpleSpeakQlParser.USING, 0); }
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public InnerJoinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_innerJoin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterInnerJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitInnerJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitInnerJoin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InnerJoinContext innerJoin() throws RecognitionException {
		InnerJoinContext _localctx = new InnerJoinContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_innerJoin);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(751);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CROSS || _la==INNER) {
				{
				setState(750);
				innerJoinKeyword();
				}
			}

			setState(753);
			joinKeyword();
			setState(754);
			tableSourceItem();
			setState(763);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				{
				setState(755);
				onKeyword();
				setState(756);
				expression();
				}
				break;
			case USING:
				{
				setState(758);
				match(USING);
				setState(759);
				leftParen();
				setState(760);
				uidList();
				setState(761);
				rightParen();
				}
				break;
			case EOF:
			case END_OF_FILE:
			case RETRIEVE:
			case SHOW_ME:
			case DISPLAY:
			case PRESENT:
			case FIND:
			case WHAT_IS:
			case WHAT_ARE:
			case WHAT_IS_THE:
			case WHAT_ARE_THE:
			case JOIN_TABLE:
			case BY_JOINING:
			case BY_JOINING_TABLE:
			case JOIN_WITH:
			case JOIN_WITH_TABLE:
			case JOINED_WITH:
			case JOINED_WITH_TABLE:
			case BY_JOINING_WITH_TABLE:
			case AND:
			case CROSS:
			case GET:
			case GROUP:
			case HAVING:
			case INNER:
			case JOIN:
			case LEFT:
			case LIMIT:
			case NATURAL:
			case ORDER:
			case RIGHT:
			case SELECT:
			case TABLE:
			case WHERE:
			case RR_BRACKET:
			case COMMA:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InnerJoinKeywordContext extends ParserRuleContext {
		public TerminalNode INNER() { return getToken(SimpleSpeakQlParser.INNER, 0); }
		public TerminalNode CROSS() { return getToken(SimpleSpeakQlParser.CROSS, 0); }
		public InnerJoinKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_innerJoinKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterInnerJoinKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitInnerJoinKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitInnerJoinKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InnerJoinKeywordContext innerJoinKeyword() throws RecognitionException {
		InnerJoinKeywordContext _localctx = new InnerJoinKeywordContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_innerJoinKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(765);
			_la = _input.LA(1);
			if ( !(_la==CROSS || _la==INNER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnKeywordContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SimpleSpeakQlParser.ON, 0); }
		public OnKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterOnKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitOnKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitOnKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnKeywordContext onKeyword() throws RecognitionException {
		OnKeywordContext _localctx = new OnKeywordContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_onKeyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(767);
			match(ON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OuterJoinContext extends ParserRuleContext {
		public JoinKeywordContext joinKeyword() {
			return getRuleContext(JoinKeywordContext.class,0);
		}
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public JoinDirectionContext joinDirection() {
			return getRuleContext(JoinDirectionContext.class,0);
		}
		public OnKeywordContext onKeyword() {
			return getRuleContext(OnKeywordContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(SimpleSpeakQlParser.USING, 0); }
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public OuterJoinKeywordContext outerJoinKeyword() {
			return getRuleContext(OuterJoinKeywordContext.class,0);
		}
		public OuterJoinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outerJoin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterOuterJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitOuterJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitOuterJoin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OuterJoinContext outerJoin() throws RecognitionException {
		OuterJoinContext _localctx = new OuterJoinContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_outerJoin);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(769);
			joinDirection();
			}
			setState(771);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTER) {
				{
				setState(770);
				outerJoinKeyword();
				}
			}

			setState(773);
			joinKeyword();
			setState(774);
			tableSourceItem();
			setState(783);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				{
				setState(775);
				onKeyword();
				setState(776);
				expression();
				}
				break;
			case USING:
				{
				setState(778);
				match(USING);
				setState(779);
				leftParen();
				setState(780);
				uidList();
				setState(781);
				rightParen();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinDirectionContext extends ParserRuleContext {
		public TerminalNode LEFT() { return getToken(SimpleSpeakQlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(SimpleSpeakQlParser.RIGHT, 0); }
		public JoinDirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinDirection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterJoinDirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitJoinDirection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitJoinDirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinDirectionContext joinDirection() throws RecognitionException {
		JoinDirectionContext _localctx = new JoinDirectionContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_joinDirection);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(785);
			_la = _input.LA(1);
			if ( !(_la==LEFT || _la==RIGHT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OuterJoinKeywordContext extends ParserRuleContext {
		public TerminalNode OUTER() { return getToken(SimpleSpeakQlParser.OUTER, 0); }
		public OuterJoinKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outerJoinKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterOuterJoinKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitOuterJoinKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitOuterJoinKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OuterJoinKeywordContext outerJoinKeyword() throws RecognitionException {
		OuterJoinKeywordContext _localctx = new OuterJoinKeywordContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_outerJoinKeyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(787);
			match(OUTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NaturalJoinContext extends ParserRuleContext {
		public NaturalJoinKeywordContext naturalJoinKeyword() {
			return getRuleContext(NaturalJoinKeywordContext.class,0);
		}
		public JoinKeywordContext joinKeyword() {
			return getRuleContext(JoinKeywordContext.class,0);
		}
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public JoinDirectionContext joinDirection() {
			return getRuleContext(JoinDirectionContext.class,0);
		}
		public OuterJoinKeywordContext outerJoinKeyword() {
			return getRuleContext(OuterJoinKeywordContext.class,0);
		}
		public NaturalJoinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_naturalJoin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterNaturalJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitNaturalJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitNaturalJoin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NaturalJoinContext naturalJoin() throws RecognitionException {
		NaturalJoinContext _localctx = new NaturalJoinContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_naturalJoin);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(789);
			naturalJoinKeyword();
			setState(794);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT || _la==RIGHT) {
				{
				{
				setState(790);
				joinDirection();
				}
				setState(792);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(791);
					outerJoinKeyword();
					}
				}

				}
			}

			setState(796);
			joinKeyword();
			setState(797);
			tableSourceItem();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NaturalJoinKeywordContext extends ParserRuleContext {
		public TerminalNode NATURAL() { return getToken(SimpleSpeakQlParser.NATURAL, 0); }
		public NaturalJoinKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_naturalJoinKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterNaturalJoinKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitNaturalJoinKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitNaturalJoinKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NaturalJoinKeywordContext naturalJoinKeyword() throws RecognitionException {
		NaturalJoinKeywordContext _localctx = new NaturalJoinKeywordContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_naturalJoinKeyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(799);
			match(NATURAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceDelimiterContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(SimpleSpeakQlParser.COMMA, 0); }
		public TerminalNode AND() { return getToken(SimpleSpeakQlParser.AND, 0); }
		public TableSourceDelimiterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSourceDelimiter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterTableSourceDelimiter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitTableSourceDelimiter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitTableSourceDelimiter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceDelimiterContext tableSourceDelimiter() throws RecognitionException {
		TableSourceDelimiterContext _localctx = new TableSourceDelimiterContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_tableSourceDelimiter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(801);
			_la = _input.LA(1);
			if ( !(_la==AND || _la==COMMA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<WhereExpressionDelimiterContext> whereExpressionDelimiter() {
			return getRuleContexts(WhereExpressionDelimiterContext.class);
		}
		public WhereExpressionDelimiterContext whereExpressionDelimiter(int i) {
			return getRuleContext(WhereExpressionDelimiterContext.class,i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterExpressions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitExpressions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitExpressions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsContext expressions() throws RecognitionException {
		ExpressionsContext _localctx = new ExpressionsContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_expressions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(803);
			expression();
			setState(809);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AND || _la==COMMA) {
				{
				{
				setState(804);
				whereExpressionDelimiter();
				setState(805);
				expression();
				}
				}
				setState(811);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhereExpressionDelimiterContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(SimpleSpeakQlParser.COMMA, 0); }
		public TerminalNode AND() { return getToken(SimpleSpeakQlParser.AND, 0); }
		public WhereExpressionDelimiterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereExpressionDelimiter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterWhereExpressionDelimiter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitWhereExpressionDelimiter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitWhereExpressionDelimiter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhereExpressionDelimiterContext whereExpressionDelimiter() throws RecognitionException {
		WhereExpressionDelimiterContext _localctx = new WhereExpressionDelimiterContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_whereExpressionDelimiter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(812);
			_la = _input.LA(1);
			if ( !(_la==AND || _la==COMMA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullNotnullContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(SimpleSpeakQlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(SimpleSpeakQlParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(SimpleSpeakQlParser.NOT, 0); }
		public NullNotnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullNotnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterNullNotnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitNullNotnull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitNullNotnull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullNotnullContext nullNotnull() throws RecognitionException {
		NullNotnullContext _localctx = new NullNotnullContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_nullNotnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(815);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(814);
				match(NOT);
				}
			}

			setState(817);
			_la = _input.LA(1);
			if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQUAL_SYMBOL() { return getToken(SimpleSpeakQlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode GREATER_SYMBOL() { return getToken(SimpleSpeakQlParser.GREATER_SYMBOL, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(SimpleSpeakQlParser.LESS_SYMBOL, 0); }
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(SimpleSpeakQlParser.EXCLAMATION_SYMBOL, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitComparisonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_comparisonOperator);
		try {
			setState(833);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,92,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(819);
				match(EQUAL_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(820);
				match(GREATER_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(821);
				match(LESS_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(822);
				match(LESS_SYMBOL);
				setState(823);
				match(EQUAL_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(824);
				match(GREATER_SYMBOL);
				setState(825);
				match(EQUAL_SYMBOL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(826);
				match(LESS_SYMBOL);
				setState(827);
				match(GREATER_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(828);
				match(EXCLAMATION_SYMBOL);
				setState(829);
				match(EQUAL_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(830);
				match(LESS_SYMBOL);
				setState(831);
				match(EQUAL_SYMBOL);
				setState(832);
				match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleExpressionAtomContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<FullColumnNameContext> fullColumnName() {
			return getRuleContexts(FullColumnNameContext.class);
		}
		public FullColumnNameContext fullColumnName(int i) {
			return getRuleContext(FullColumnNameContext.class,i);
		}
		public MathOperatorContext mathOperator() {
			return getRuleContext(MathOperatorContext.class,0);
		}
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public SimpleExpressionAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleExpressionAtom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSimpleExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSimpleExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSimpleExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleExpressionAtomContext simpleExpressionAtom() throws RecognitionException {
		SimpleExpressionAtomContext _localctx = new SimpleExpressionAtomContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_simpleExpressionAtom);
		try {
			setState(858);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,94,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(835);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(836);
				fullColumnName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(837);
				fullColumnName();
				setState(838);
				mathOperator();
				setState(839);
				fullColumnName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(841);
				fullColumnName();
				setState(842);
				mathOperator();
				setState(843);
				constant();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(845);
				constant();
				setState(846);
				mathOperator();
				setState(847);
				fullColumnName();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(849);
				constant();
				setState(850);
				mathOperator();
				setState(851);
				constant();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(853);
				unaryOperator();
				setState(856);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FALSE:
				case NOT:
				case NULL_LITERAL:
				case TRUE:
				case MINUS:
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case START_NATIONAL_STRING_LITERAL:
				case STRING_LITERAL:
				case DECIMAL_LITERAL:
				case HEXADECIMAL_LITERAL:
				case REAL_LITERAL:
				case NULL_SPEC_LITERAL:
				case BIT_STRING:
					{
					setState(854);
					constant();
					}
					break;
				case SPOKEN_DOT:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case DOT:
				case ID:
					{
					setState(855);
					fullColumnName();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public Token nullLiteral;
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MINUS() { return getToken(SimpleSpeakQlParser.MINUS, 0); }
		public HexadecimalLiteralContext hexadecimalLiteral() {
			return getRuleContext(HexadecimalLiteralContext.class,0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return getRuleContext(BooleanLiteralContext.class,0);
		}
		public TerminalNode REAL_LITERAL() { return getToken(SimpleSpeakQlParser.REAL_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(SimpleSpeakQlParser.BIT_STRING, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(SimpleSpeakQlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(SimpleSpeakQlParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(SimpleSpeakQlParser.NOT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_constant);
		int _la;
		try {
			setState(872);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,96,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(860);
				stringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(861);
				decimalLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(862);
				match(MINUS);
				setState(863);
				decimalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(864);
				hexadecimalLiteral();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(865);
				booleanLiteral();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(866);
				match(REAL_LITERAL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(867);
				match(BIT_STRING);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(869);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(868);
					match(NOT);
					}
				}

				setState(871);
				((ConstantContext)_localctx).nullLiteral = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
					((ConstantContext)_localctx).nullLiteral = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringLiteralContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(SimpleSpeakQlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(SimpleSpeakQlParser.STRING_LITERAL, i);
		}
		public TerminalNode START_NATIONAL_STRING_LITERAL() { return getToken(SimpleSpeakQlParser.START_NATIONAL_STRING_LITERAL, 0); }
		public TerminalNode COLLATE() { return getToken(SimpleSpeakQlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitStringLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitStringLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringLiteralContext stringLiteral() throws RecognitionException {
		StringLiteralContext _localctx = new StringLiteralContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_stringLiteral);
		int _la;
		try {
			setState(885);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(874);
				_la = _input.LA(1);
				if ( !(_la==START_NATIONAL_STRING_LITERAL || _la==STRING_LITERAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(876); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(875);
					match(STRING_LITERAL);
					}
					}
					setState(878); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==STRING_LITERAL );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(880);
				_la = _input.LA(1);
				if ( !(_la==START_NATIONAL_STRING_LITERAL || _la==STRING_LITERAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(883);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(881);
					match(COLLATE);
					setState(882);
					collationName();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollationNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(SimpleSpeakQlParser.STRING_LITERAL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterCollationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitCollationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitCollationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollationNameContext collationName() throws RecognitionException {
		CollationNameContext _localctx = new CollationNameContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_collationName);
		try {
			setState(889);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(887);
				uid();
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(888);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalLiteralContext extends ParserRuleContext {
		public TerminalNode DECIMAL_LITERAL() { return getToken(SimpleSpeakQlParser.DECIMAL_LITERAL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(SimpleSpeakQlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(SimpleSpeakQlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(SimpleSpeakQlParser.TWO_DECIMAL, 0); }
		public TerminalNode REAL_LITERAL() { return getToken(SimpleSpeakQlParser.REAL_LITERAL, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterDecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitDecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitDecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DecimalLiteralContext decimalLiteral() throws RecognitionException {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_decimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(891);
			_la = _input.LA(1);
			if ( !(((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & ((1L << (ZERO_DECIMAL - 682)) | (1L << (ONE_DECIMAL - 682)) | (1L << (TWO_DECIMAL - 682)) | (1L << (DECIMAL_LITERAL - 682)) | (1L << (REAL_LITERAL - 682)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HexadecimalLiteralContext extends ParserRuleContext {
		public TerminalNode HEXADECIMAL_LITERAL() { return getToken(SimpleSpeakQlParser.HEXADECIMAL_LITERAL, 0); }
		public HexadecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hexadecimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterHexadecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitHexadecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitHexadecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HexadecimalLiteralContext hexadecimalLiteral() throws RecognitionException {
		HexadecimalLiteralContext _localctx = new HexadecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_hexadecimalLiteral);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(893);
			match(HEXADECIMAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanLiteralContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(SimpleSpeakQlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(SimpleSpeakQlParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterBooleanLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitBooleanLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitBooleanLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanLiteralContext booleanLiteral() throws RecognitionException {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_booleanLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(895);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnaryOperatorContext extends ParserRuleContext {
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(SimpleSpeakQlParser.EXCLAMATION_SYMBOL, 0); }
		public TerminalNode BIT_NOT_OP() { return getToken(SimpleSpeakQlParser.BIT_NOT_OP, 0); }
		public TerminalNode PLUS() { return getToken(SimpleSpeakQlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(SimpleSpeakQlParser.MINUS, 0); }
		public TerminalNode NOT() { return getToken(SimpleSpeakQlParser.NOT, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unaryOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterUnaryOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitUnaryOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitUnaryOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnaryOperatorContext unaryOperator() throws RecognitionException {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_unaryOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(897);
			_la = _input.LA(1);
			if ( !(_la==NOT || ((((_la - 664)) & ~0x3f) == 0 && ((1L << (_la - 664)) & ((1L << (PLUS - 664)) | (1L << (MINUS - 664)) | (1L << (EXCLAMATION_SYMBOL - 664)) | (1L << (BIT_NOT_OP - 664)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MathOperatorContext extends ParserRuleContext {
		public TerminalNode STAR() { return getToken(SimpleSpeakQlParser.STAR, 0); }
		public TerminalNode DIVIDE() { return getToken(SimpleSpeakQlParser.DIVIDE, 0); }
		public TerminalNode MODULE() { return getToken(SimpleSpeakQlParser.MODULE, 0); }
		public TerminalNode DIV() { return getToken(SimpleSpeakQlParser.DIV, 0); }
		public TerminalNode MOD() { return getToken(SimpleSpeakQlParser.MOD, 0); }
		public TerminalNode PLUS() { return getToken(SimpleSpeakQlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(SimpleSpeakQlParser.MINUS, 0); }
		public MathOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterMathOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitMathOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitMathOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MathOperatorContext mathOperator() throws RecognitionException {
		MathOperatorContext _localctx = new MathOperatorContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_mathOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(899);
			_la = _input.LA(1);
			if ( !(((((_la - 661)) & ~0x3f) == 0 && ((1L << (_la - 661)) & ((1L << (STAR - 661)) | (1L << (DIVIDE - 661)) | (1L << (MODULE - 661)) | (1L << (PLUS - 661)) | (1L << (MINUS - 661)) | (1L << (DIV - 661)) | (1L << (MOD - 661)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgsContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<FullColumnNameContext> fullColumnName() {
			return getRuleContexts(FullColumnNameContext.class);
		}
		public FullColumnNameContext fullColumnName(int i) {
			return getRuleContext(FullColumnNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SimpleSpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SimpleSpeakQlParser.COMMA, i);
		}
		public FunctionArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterFunctionArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitFunctionArgs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitFunctionArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionArgsContext functionArgs() throws RecognitionException {
		FunctionArgsContext _localctx = new FunctionArgsContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_functionArgs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(903);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FALSE:
			case NOT:
			case NULL_LITERAL:
			case TRUE:
			case MINUS:
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case START_NATIONAL_STRING_LITERAL:
			case STRING_LITERAL:
			case DECIMAL_LITERAL:
			case HEXADECIMAL_LITERAL:
			case REAL_LITERAL:
			case NULL_SPEC_LITERAL:
			case BIT_STRING:
				{
				setState(901);
				constant();
				}
				break;
			case SPOKEN_DOT:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case DOT:
			case ID:
				{
				setState(902);
				fullColumnName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(912);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(905);
				match(COMMA);
				setState(908);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FALSE:
				case NOT:
				case NULL_LITERAL:
				case TRUE:
				case MINUS:
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case START_NATIONAL_STRING_LITERAL:
				case STRING_LITERAL:
				case DECIMAL_LITERAL:
				case HEXADECIMAL_LITERAL:
				case REAL_LITERAL:
				case NULL_SPEC_LITERAL:
				case BIT_STRING:
					{
					setState(906);
					constant();
					}
					break;
				case SPOKEN_DOT:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case DOT:
				case ID:
					{
					setState(907);
					fullColumnName();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				setState(914);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateWindowedFunctionContext extends ParserRuleContext {
		public Token aggregator;
		public Token starArg;
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public TerminalNode AVG() { return getToken(SimpleSpeakQlParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(SimpleSpeakQlParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(SimpleSpeakQlParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(SimpleSpeakQlParser.SUM, 0); }
		public TheKeywordContext theKeyword() {
			return getRuleContext(TheKeywordContext.class,0);
		}
		public OfKeywordContext ofKeyword() {
			return getRuleContext(OfKeywordContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SimpleSpeakQlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(SimpleSpeakQlParser.DISTINCT, 0); }
		public TerminalNode COUNT() { return getToken(SimpleSpeakQlParser.COUNT, 0); }
		public DistinctAggregatorKeywordContext distinctAggregatorKeyword() {
			return getRuleContext(DistinctAggregatorKeywordContext.class,0);
		}
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode STAR() { return getToken(SimpleSpeakQlParser.STAR, 0); }
		public AllAggregatorKeywordContext allAggregatorKeyword() {
			return getRuleContext(AllAggregatorKeywordContext.class,0);
		}
		public AggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateWindowedFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterAggregateWindowedFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitAggregateWindowedFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitAggregateWindowedFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateWindowedFunctionContext aggregateWindowedFunction() throws RecognitionException {
		AggregateWindowedFunctionContext _localctx = new AggregateWindowedFunctionContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_aggregateWindowedFunction);
		int _la;
		try {
			setState(949);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(916);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==THE) {
					{
					setState(915);
					theKeyword();
					}
				}

				setState(918);
				_la = _input.LA(1);
				if ( !(((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (AVG - 255)) | (1L << (MAX - 255)) | (1L << (MIN - 255)) | (1L << (SUM - 255)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(920);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OF) {
					{
					setState(919);
					ofKeyword();
					}
				}

				setState(922);
				leftParen();
				setState(924);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(923);
					((AggregateWindowedFunctionContext)_localctx).aggregator = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
						((AggregateWindowedFunctionContext)_localctx).aggregator = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(926);
				functionArg();
				setState(927);
				rightParen();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(930);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==THE) {
					{
					setState(929);
					theKeyword();
					}
				}

				setState(932);
				match(COUNT);
				setState(934);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OF) {
					{
					setState(933);
					ofKeyword();
					}
				}

				setState(936);
				leftParen();
				setState(945);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STAR:
					{
					setState(937);
					((AggregateWindowedFunctionContext)_localctx).starArg = match(STAR);
					}
					break;
				case SPOKEN_DOT:
				case ALL:
				case FALSE:
				case NOT:
				case NULL_LITERAL:
				case TRUE:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case MINUS:
				case DOT:
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case START_NATIONAL_STRING_LITERAL:
				case STRING_LITERAL:
				case DECIMAL_LITERAL:
				case HEXADECIMAL_LITERAL:
				case REAL_LITERAL:
				case NULL_SPEC_LITERAL:
				case BIT_STRING:
				case ID:
					{
					setState(939);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL) {
						{
						setState(938);
						allAggregatorKeyword();
						}
					}

					setState(941);
					functionArg();
					}
					break;
				case DISTINCT:
					{
					setState(942);
					distinctAggregatorKeyword();
					setState(943);
					functionArgs();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(947);
				rightParen();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OfKeywordContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(SimpleSpeakQlParser.OF, 0); }
		public OfKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ofKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterOfKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitOfKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitOfKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OfKeywordContext ofKeyword() throws RecognitionException {
		OfKeywordContext _localctx = new OfKeywordContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_ofKeyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(951);
			match(OF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TheKeywordContext extends ParserRuleContext {
		public TerminalNode THE() { return getToken(SimpleSpeakQlParser.THE, 0); }
		public TheKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_theKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterTheKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitTheKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitTheKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TheKeywordContext theKeyword() throws RecognitionException {
		TheKeywordContext _localctx = new TheKeywordContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_theKeyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(953);
			match(THE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterFunctionArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitFunctionArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitFunctionArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionArgContext functionArg() throws RecognitionException {
		FunctionArgContext _localctx = new FunctionArgContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_functionArg);
		try {
			setState(957);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FALSE:
			case NOT:
			case NULL_LITERAL:
			case TRUE:
			case MINUS:
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case START_NATIONAL_STRING_LITERAL:
			case STRING_LITERAL:
			case DECIMAL_LITERAL:
			case HEXADECIMAL_LITERAL:
			case REAL_LITERAL:
			case NULL_SPEC_LITERAL:
			case BIT_STRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(955);
				constant();
				}
				break;
			case SPOKEN_DOT:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case DOT:
			case ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(956);
				fullColumnName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllAggregatorKeywordContext extends ParserRuleContext {
		public Token aggregator;
		public TerminalNode ALL() { return getToken(SimpleSpeakQlParser.ALL, 0); }
		public AllAggregatorKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allAggregatorKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterAllAggregatorKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitAllAggregatorKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitAllAggregatorKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AllAggregatorKeywordContext allAggregatorKeyword() throws RecognitionException {
		AllAggregatorKeywordContext _localctx = new AllAggregatorKeywordContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_allAggregatorKeyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(959);
			((AllAggregatorKeywordContext)_localctx).aggregator = match(ALL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DistinctAggregatorKeywordContext extends ParserRuleContext {
		public Token aggregator;
		public TerminalNode DISTINCT() { return getToken(SimpleSpeakQlParser.DISTINCT, 0); }
		public DistinctAggregatorKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinctAggregatorKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterDistinctAggregatorKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitDistinctAggregatorKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitDistinctAggregatorKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistinctAggregatorKeywordContext distinctAggregatorKeyword() throws RecognitionException {
		DistinctAggregatorKeywordContext _localctx = new DistinctAggregatorKeywordContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_distinctAggregatorKeyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(961);
			((DistinctAggregatorKeywordContext)_localctx).aggregator = match(DISTINCT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScalarFunctionNameContext extends ParserRuleContext {
		public TerminalNode CURDATE() { return getToken(SimpleSpeakQlParser.CURDATE, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(SimpleSpeakQlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(SimpleSpeakQlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(SimpleSpeakQlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURTIME() { return getToken(SimpleSpeakQlParser.CURTIME, 0); }
		public TerminalNode DATE_ADD() { return getToken(SimpleSpeakQlParser.DATE_ADD, 0); }
		public TerminalNode DATE_SUB() { return getToken(SimpleSpeakQlParser.DATE_SUB, 0); }
		public TerminalNode IF() { return getToken(SimpleSpeakQlParser.IF, 0); }
		public TerminalNode INSERT() { return getToken(SimpleSpeakQlParser.INSERT, 0); }
		public TerminalNode LOCALTIME() { return getToken(SimpleSpeakQlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(SimpleSpeakQlParser.LOCALTIMESTAMP, 0); }
		public TerminalNode MID() { return getToken(SimpleSpeakQlParser.MID, 0); }
		public TerminalNode NOW() { return getToken(SimpleSpeakQlParser.NOW, 0); }
		public TerminalNode REPLACE() { return getToken(SimpleSpeakQlParser.REPLACE, 0); }
		public TerminalNode SUBSTR() { return getToken(SimpleSpeakQlParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(SimpleSpeakQlParser.SUBSTRING, 0); }
		public TerminalNode SYSDATE() { return getToken(SimpleSpeakQlParser.SYSDATE, 0); }
		public TerminalNode TRIM() { return getToken(SimpleSpeakQlParser.TRIM, 0); }
		public TerminalNode UTC_DATE() { return getToken(SimpleSpeakQlParser.UTC_DATE, 0); }
		public TerminalNode UTC_TIME() { return getToken(SimpleSpeakQlParser.UTC_TIME, 0); }
		public TerminalNode UTC_TIMESTAMP() { return getToken(SimpleSpeakQlParser.UTC_TIMESTAMP, 0); }
		public ScalarFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalarFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterScalarFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitScalarFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitScalarFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScalarFunctionNameContext scalarFunctionName() throws RecognitionException {
		ScalarFunctionNameContext _localctx = new ScalarFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_scalarFunctionName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(963);
			_la = _input.LA(1);
			if ( !(((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (IF - 107)) | (1L << (INSERT - 107)) | (1L << (REPLACE - 107)))) != 0) || ((((_la - 282)) & ~0x3f) == 0 && ((1L << (_la - 282)) & ((1L << (CURRENT_DATE - 282)) | (1L << (CURRENT_TIME - 282)) | (1L << (CURRENT_TIMESTAMP - 282)) | (1L << (LOCALTIME - 282)) | (1L << (CURDATE - 282)) | (1L << (CURTIME - 282)) | (1L << (DATE_ADD - 282)) | (1L << (DATE_SUB - 282)) | (1L << (LOCALTIMESTAMP - 282)) | (1L << (NOW - 282)) | (1L << (SUBSTR - 282)) | (1L << (SUBSTRING - 282)) | (1L << (SYSDATE - 282)) | (1L << (TRIM - 282)) | (1L << (UTC_DATE - 282)) | (1L << (UTC_TIME - 282)) | (1L << (UTC_TIMESTAMP - 282)) | (1L << (MID - 282)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementDelimiterContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(SimpleSpeakQlParser.COMMA, 0); }
		public TerminalNode AND() { return getToken(SimpleSpeakQlParser.AND, 0); }
		public SelectElementDelimiterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElementDelimiter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSelectElementDelimiter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSelectElementDelimiter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSelectElementDelimiter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementDelimiterContext selectElementDelimiter() throws RecognitionException {
		SelectElementDelimiterContext _localctx = new SelectElementDelimiterContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_selectElementDelimiter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(965);
			_la = _input.LA(1);
			if ( !(_la==AND || _la==COMMA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhereKeywordContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(SimpleSpeakQlParser.WHERE, 0); }
		public WhereKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterWhereKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitWhereKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitWhereKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhereKeywordContext whereKeyword() throws RecognitionException {
		WhereKeywordContext _localctx = new WhereKeywordContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_whereKeyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(967);
			match(WHERE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhereExpressionContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<LogicalOperatorContext> logicalOperator() {
			return getRuleContexts(LogicalOperatorContext.class);
		}
		public LogicalOperatorContext logicalOperator(int i) {
			return getRuleContext(LogicalOperatorContext.class,i);
		}
		public WhereExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterWhereExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitWhereExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitWhereExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhereExpressionContext whereExpression() throws RecognitionException {
		WhereExpressionContext _localctx = new WhereExpressionContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_whereExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(969);
			expression();
			setState(975);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AND || _la==OR || _la==XOR || _la==BIT_OR_OP || _la==BIT_AND_OP) {
				{
				{
				setState(970);
				logicalOperator();
				setState(971);
				expression();
				}
				}
				setState(977);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableExpressionNoJoinContext extends ParserRuleContext {
		public FromClauseNoJoinContext fromClauseNoJoin() {
			return getRuleContext(FromClauseNoJoinContext.class,0);
		}
		public TableExpressionNoJoinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableExpressionNoJoin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterTableExpressionNoJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitTableExpressionNoJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitTableExpressionNoJoin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableExpressionNoJoinContext tableExpressionNoJoin() throws RecognitionException {
		TableExpressionNoJoinContext _localctx = new TableExpressionNoJoinContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_tableExpressionNoJoin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(978);
			fromClauseNoJoin();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableExpressionContext extends ParserRuleContext {
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public TableExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterTableExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitTableExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitTableExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableExpressionContext tableExpression() throws RecognitionException {
		TableExpressionContext _localctx = new TableExpressionContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_tableExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(980);
			fromClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u02c2\u03d9\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\3\2\3\2\5\2\u00cf\n\2\3\3\3\3"+
		"\5\3\u00d3\n\3\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u00db\n\4\3\4\3\4\3\4\5\4\u00e0"+
		"\n\4\3\4\3\4\3\4\3\4\5\4\u00e6\n\4\7\4\u00e8\n\4\f\4\16\4\u00eb\13\4\3"+
		"\4\3\4\3\4\5\4\u00f0\n\4\5\4\u00f2\n\4\3\5\3\5\3\5\3\5\5\5\u00f8\n\5\3"+
		"\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0101\n\5\3\5\3\5\3\5\3\5\3\5\5\5\u0108"+
		"\n\5\3\5\3\5\3\5\3\5\5\5\u010e\n\5\3\5\3\5\5\5\u0112\n\5\3\6\3\6\3\6\3"+
		"\6\5\6\u0118\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u0121\n\6\3\6\3\6\3\6"+
		"\3\6\3\6\5\6\u0128\n\6\3\6\3\6\3\6\3\6\5\6\u012e\n\6\3\6\3\6\5\6\u0132"+
		"\n\6\3\7\3\7\7\7\u0136\n\7\f\7\16\7\u0139\13\7\3\7\3\7\3\7\3\7\7\7\u013f"+
		"\n\7\f\7\16\7\u0142\13\7\3\7\3\7\3\7\3\7\3\7\5\7\u0149\n\7\3\b\3\b\3\t"+
		"\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\5\r\u0157\n\r\3\r\3\r\3\r\7\r\u015c"+
		"\n\r\f\r\16\r\u015f\13\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\5\16"+
		"\u0169\n\16\3\16\3\16\3\16\3\16\5\16\u016f\n\16\5\16\u0171\n\16\3\17\3"+
		"\17\3\17\5\17\u0176\n\17\3\20\3\20\3\21\3\21\5\21\u017c\n\21\3\22\3\22"+
		"\3\23\3\23\3\24\3\24\3\24\5\24\u0185\n\24\5\24\u0187\n\24\3\24\3\24\3"+
		"\24\5\24\u018c\n\24\5\24\u018e\n\24\3\25\3\25\3\25\3\26\3\26\3\27\3\27"+
		"\3\27\3\27\5\27\u0199\n\27\3\27\3\27\5\27\u019d\n\27\3\30\3\30\3\31\3"+
		"\31\3\32\3\32\3\32\3\32\3\32\5\32\u01a8\n\32\3\32\3\32\3\32\5\32\u01ad"+
		"\n\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u01b6\n\33\3\34\3\34\3\34"+
		"\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u01c1\n\34\3\35\3\35\3\36\3\36\3\37"+
		"\5\37\u01c8\n\37\3\37\5\37\u01cb\n\37\3\37\5\37\u01ce\n\37\3\37\5\37\u01d1"+
		"\n\37\3 \3 \3 \3 \3 \7 \u01d8\n \f \16 \u01db\13 \3 \3 \5 \u01df\n \3"+
		" \3 \5 \u01e3\n \3 \3 \3 \3 \7 \u01e9\n \f \16 \u01ec\13 \5 \u01ee\n "+
		"\3!\3!\3!\5!\u01f3\n!\3\"\3\"\5\"\u01f7\n\"\3\"\5\"\u01fa\n\"\3#\3#\3"+
		"$\3$\3$\3$\3$\5$\u0203\n$\3$\3$\3$\5$\u0208\n$\3%\3%\3&\3&\3&\3\'\3\'"+
		"\3(\3(\3(\3(\3(\7(\u0216\n(\f(\16(\u0219\13(\3)\3)\5)\u021d\n)\3*\3*\3"+
		"*\3*\5*\u0223\n*\3*\3*\3*\3*\3*\5*\u022a\n*\3+\3+\5+\u022e\n+\3,\3,\3"+
		",\3,\3,\3,\3,\3,\5,\u0238\n,\3-\3-\3-\3.\3.\3.\3/\3/\3\60\3\60\3\61\5"+
		"\61\u0245\n\61\3\61\3\61\5\61\u0249\n\61\3\61\3\61\5\61\u024d\n\61\3\61"+
		"\3\61\5\61\u0251\n\61\7\61\u0253\n\61\f\61\16\61\u0256\13\61\3\62\3\62"+
		"\3\62\3\62\3\62\5\62\u025d\n\62\3\63\3\63\7\63\u0261\n\63\f\63\16\63\u0264"+
		"\13\63\3\63\3\63\3\63\7\63\u0269\n\63\f\63\16\63\u026c\13\63\3\63\3\63"+
		"\5\63\u0270\n\63\3\64\5\64\u0273\n\64\3\64\3\64\5\64\u0277\n\64\3\64\5"+
		"\64\u027a\n\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u0283\n\64\3\65"+
		"\3\65\3\65\3\65\3\66\5\66\u028a\n\66\3\66\3\66\3\67\3\67\38\38\39\39\3"+
		"9\79\u0295\n9\f9\169\u0298\139\3:\3:\3:\3:\5:\u029e\n:\3:\3:\3:\3:\3;"+
		"\3;\3;\3;\3;\5;\u02a9\n;\3<\3<\3=\3=\3=\3=\7=\u02b1\n=\f=\16=\u02b4\13"+
		"=\3>\3>\3>\5>\u02b9\n>\3?\5?\u02bc\n?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3"+
		"?\3?\5?\u02ca\n?\3@\3@\5@\u02ce\n@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3"+
		"@\5@\u02dc\n@\3A\3A\3A\5A\u02e1\nA\5A\u02e3\nA\3A\3A\3A\3A\3A\3B\3B\3"+
		"C\3C\3C\5C\u02ef\nC\3D\5D\u02f2\nD\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u02fe"+
		"\nD\3E\3E\3F\3F\3G\3G\5G\u0306\nG\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\5G\u0312"+
		"\nG\3H\3H\3I\3I\3J\3J\3J\5J\u031b\nJ\5J\u031d\nJ\3J\3J\3J\3K\3K\3L\3L"+
		"\3M\3M\3M\3M\7M\u032a\nM\fM\16M\u032d\13M\3N\3N\3O\5O\u0332\nO\3O\3O\3"+
		"P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\5P\u0344\nP\3Q\3Q\3Q\3Q\3Q\3"+
		"Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u035b\nQ\5Q\u035d\n"+
		"Q\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u0368\nR\3R\5R\u036b\nR\3S\3S\6S\u036f"+
		"\nS\rS\16S\u0370\3S\3S\3S\5S\u0376\nS\5S\u0378\nS\3T\3T\5T\u037c\nT\3"+
		"U\3U\3V\3V\3W\3W\3X\3X\3Y\3Y\3Z\3Z\5Z\u038a\nZ\3Z\3Z\3Z\5Z\u038f\nZ\7"+
		"Z\u0391\nZ\fZ\16Z\u0394\13Z\3[\5[\u0397\n[\3[\3[\5[\u039b\n[\3[\3[\5["+
		"\u039f\n[\3[\3[\3[\3[\5[\u03a5\n[\3[\3[\5[\u03a9\n[\3[\3[\3[\5[\u03ae"+
		"\n[\3[\3[\3[\3[\5[\u03b4\n[\3[\3[\5[\u03b8\n[\3\\\3\\\3]\3]\3^\3^\5^\u03c0"+
		"\n^\3_\3_\3`\3`\3a\3a\3b\3b\3c\3c\3d\3d\3d\3d\7d\u03d0\nd\fd\16d\u03d3"+
		"\13d\3e\3e\3f\3f\3f\2\2g\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&("+
		"*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084"+
		"\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c"+
		"\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4"+
		"\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\2\35"+
		"\5\2\b\20gg\u00a9\u00a9\3\2$%\4\2\60\60RS\3\2\u0162\u0169\4\2\36\36\u02a6"+
		"\u02a6\4\2\u0089\u0089\u02a1\u02a1\5\2__\u00bb\u00bb\u015b\u015b\4\2\37"+
		"\37\u00b9\u00b9\4\2\67\67NN\3\2\"#\4\2\64\64\u02a9\u02a9\5\2\21\24ddo"+
		"o\5\2bbnn\u00c0\u00c0\4\2ppzz\4\2\25\34yy\4\2\35\35\u00c6\u00c6\4\2HH"+
		"rr\4\2}}\u00a7\u00a7\4\2\u008b\u008b\u02b9\u02b9\3\2\u02b4\u02b5\5\2\u02ac"+
		"\u02ae\u02b6\u02b6\u02b8\u02b8\4\2__\u00bb\u00bb\5\2\u0089\u0089\u029a"+
		"\u029b\u02a1\u02a2\3\2\u0297\u029d\5\2\u0101\u0101\u010d\u010e\u0118\u0118"+
		"\4\2\60\60RR\t\2mmtt\u00a0\u00a0\u011c\u0123\u0125\u0126\u0128\u012e\u014d"+
		"\u014d\2\u0409\2\u00cc\3\2\2\2\4\u00d2\3\2\2\2\6\u00f1\3\2\2\2\b\u0111"+
		"\3\2\2\2\n\u0131\3\2\2\2\f\u0148\3\2\2\2\16\u014a\3\2\2\2\20\u014c\3\2"+
		"\2\2\22\u014e\3\2\2\2\24\u0150\3\2\2\2\26\u0152\3\2\2\2\30\u0156\3\2\2"+
		"\2\32\u0170\3\2\2\2\34\u0172\3\2\2\2\36\u0177\3\2\2\2 \u017b\3\2\2\2\""+
		"\u017d\3\2\2\2$\u017f\3\2\2\2&\u018d\3\2\2\2(\u018f\3\2\2\2*\u0192\3\2"+
		"\2\2,\u019c\3\2\2\2.\u019e\3\2\2\2\60\u01a0\3\2\2\2\62\u01ac\3\2\2\2\64"+
		"\u01b5\3\2\2\2\66\u01c0\3\2\2\28\u01c2\3\2\2\2:\u01c4\3\2\2\2<\u01c7\3"+
		"\2\2\2>\u01d2\3\2\2\2@\u01f2\3\2\2\2B\u01f9\3\2\2\2D\u01fb\3\2\2\2F\u0207"+
		"\3\2\2\2H\u0209\3\2\2\2J\u020b\3\2\2\2L\u020e\3\2\2\2N\u0210\3\2\2\2P"+
		"\u021a\3\2\2\2R\u021e\3\2\2\2T\u022d\3\2\2\2V\u0237\3\2\2\2X\u0239\3\2"+
		"\2\2Z\u023c\3\2\2\2\\\u023f\3\2\2\2^\u0241\3\2\2\2`\u0244\3\2\2\2b\u025c"+
		"\3\2\2\2d\u026f\3\2\2\2f\u0282\3\2\2\2h\u0284\3\2\2\2j\u0289\3\2\2\2l"+
		"\u028d\3\2\2\2n\u028f\3\2\2\2p\u0291\3\2\2\2r\u0299\3\2\2\2t\u02a8\3\2"+
		"\2\2v\u02aa\3\2\2\2x\u02ac\3\2\2\2z\u02b8\3\2\2\2|\u02bb\3\2\2\2~\u02cb"+
		"\3\2\2\2\u0080\u02dd\3\2\2\2\u0082\u02e9\3\2\2\2\u0084\u02ee\3\2\2\2\u0086"+
		"\u02f1\3\2\2\2\u0088\u02ff\3\2\2\2\u008a\u0301\3\2\2\2\u008c\u0303\3\2"+
		"\2\2\u008e\u0313\3\2\2\2\u0090\u0315\3\2\2\2\u0092\u0317\3\2\2\2\u0094"+
		"\u0321\3\2\2\2\u0096\u0323\3\2\2\2\u0098\u0325\3\2\2\2\u009a\u032e\3\2"+
		"\2\2\u009c\u0331\3\2\2\2\u009e\u0343\3\2\2\2\u00a0\u035c\3\2\2\2\u00a2"+
		"\u036a\3\2\2\2\u00a4\u0377\3\2\2\2\u00a6\u037b\3\2\2\2\u00a8\u037d\3\2"+
		"\2\2\u00aa\u037f\3\2\2\2\u00ac\u0381\3\2\2\2\u00ae\u0383\3\2\2\2\u00b0"+
		"\u0385\3\2\2\2\u00b2\u0389\3\2\2\2\u00b4\u03b7\3\2\2\2\u00b6\u03b9\3\2"+
		"\2\2\u00b8\u03bb\3\2\2\2\u00ba\u03bf\3\2\2\2\u00bc\u03c1\3\2\2\2\u00be"+
		"\u03c3\3\2\2\2\u00c0\u03c5\3\2\2\2\u00c2\u03c7\3\2\2\2\u00c4\u03c9\3\2"+
		"\2\2\u00c6\u03cb\3\2\2\2\u00c8\u03d4\3\2\2\2\u00ca\u03d6\3\2\2\2\u00cc"+
		"\u00ce\5\4\3\2\u00cd\u00cf\7\7\2\2\u00ce\u00cd\3\2\2\2\u00ce\u00cf\3\2"+
		"\2\2\u00cf\3\3\2\2\2\u00d0\u00d3\5\6\4\2\u00d1\u00d3\5V,\2\u00d2\u00d0"+
		"\3\2\2\2\u00d2\u00d1\3\2\2\2\u00d3\5\3\2\2\2\u00d4\u00d5\5\b\5\2\u00d5"+
		"\u00d6\5<\37\2\u00d6\u00f2\3\2\2\2\u00d7\u00d8\5x=\2\u00d8\u00d9\5:\36"+
		"\2\u00d9\u00db\3\2\2\2\u00da\u00d7\3\2\2\2\u00da\u00db\3\2\2\2\u00db\u00df"+
		"\3\2\2\2\u00dc\u00dd\5<\37\2\u00dd\u00de\5:\36\2\u00de\u00e0\3\2\2\2\u00df"+
		"\u00dc\3\2\2\2\u00df\u00e0\3\2\2\2\u00e0\u00e1\3\2\2\2\u00e1\u00e9\5\n"+
		"\6\2\u00e2\u00e5\5:\36\2\u00e3\u00e6\5\n\6\2\u00e4\u00e6\5x=\2\u00e5\u00e3"+
		"\3\2\2\2\u00e5\u00e4\3\2\2\2\u00e6\u00e8\3\2\2\2\u00e7\u00e2\3\2\2\2\u00e8"+
		"\u00eb\3\2\2\2\u00e9\u00e7\3\2\2\2\u00e9\u00ea\3\2\2\2\u00ea\u00ef\3\2"+
		"\2\2\u00eb\u00e9\3\2\2\2\u00ec\u00ed\5:\36\2\u00ed\u00ee\5<\37\2\u00ee"+
		"\u00f0\3\2\2\2\u00ef\u00ec\3\2\2\2\u00ef\u00f0\3\2\2\2\u00f0\u00f2\3\2"+
		"\2\2\u00f1\u00d4\3\2\2\2\u00f1\u00da\3\2\2\2\u00f2\7\3\2\2\2\u00f3\u00f7"+
		"\5\f\7\2\u00f4\u00f5\5\u00c4c\2\u00f5\u00f6\5\u00c6d\2\u00f6\u00f8\3\2"+
		"\2\2\u00f7\u00f4\3\2\2\2\u00f7\u00f8\3\2\2\2\u00f8\u00f9\3\2\2\2\u00f9"+
		"\u00fa\5\u00caf\2\u00fa\u0112\3\2\2\2\u00fb\u00fc\5\f\7\2\u00fc\u0100"+
		"\5\u00caf\2\u00fd\u00fe\5\u00c4c\2\u00fe\u00ff\5\u00c6d\2\u00ff\u0101"+
		"\3\2\2\2\u0100\u00fd\3\2\2\2\u0100\u0101\3\2\2\2\u0101\u0112\3\2\2\2\u0102"+
		"\u0103\5\u00caf\2\u0103\u0107\5\f\7\2\u0104\u0105\5\u00c4c\2\u0105\u0106"+
		"\5\u00c6d\2\u0106\u0108\3\2\2\2\u0107\u0104\3\2\2\2\u0107\u0108\3\2\2"+
		"\2\u0108\u0112\3\2\2\2\u0109\u010d\5\u00caf\2\u010a\u010b\5\u00c4c\2\u010b"+
		"\u010c\5\u00c6d\2\u010c\u010e\3\2\2\2\u010d\u010a\3\2\2\2\u010d\u010e"+
		"\3\2\2\2\u010e\u010f\3\2\2\2\u010f\u0110\5\f\7\2\u0110\u0112\3\2\2\2\u0111"+
		"\u00f3\3\2\2\2\u0111\u00fb\3\2\2\2\u0111\u0102\3\2\2\2\u0111\u0109\3\2"+
		"\2\2\u0112\t\3\2\2\2\u0113\u0117\5\f\7\2\u0114\u0115\5\u00c4c\2\u0115"+
		"\u0116\5\u00c6d\2\u0116\u0118\3\2\2\2\u0117\u0114\3\2\2\2\u0117\u0118"+
		"\3\2\2\2\u0118\u0119\3\2\2\2\u0119\u011a\5\u00c8e\2\u011a\u0132\3\2\2"+
		"\2\u011b\u011c\5\f\7\2\u011c\u0120\5\u00c8e\2\u011d\u011e\5\u00c4c\2\u011e"+
		"\u011f\5\u00c6d\2\u011f\u0121\3\2\2\2\u0120\u011d\3\2\2\2\u0120\u0121"+
		"\3\2\2\2\u0121\u0132\3\2\2\2\u0122\u0123\5\u00c8e\2\u0123\u0127\5\f\7"+
		"\2\u0124\u0125\5\u00c4c\2\u0125\u0126\5\u00c6d\2\u0126\u0128\3\2\2\2\u0127"+
		"\u0124\3\2\2\2\u0127\u0128\3\2\2\2\u0128\u0132\3\2\2\2\u0129\u012d\5\u00c8"+
		"e\2\u012a\u012b\5\u00c4c\2\u012b\u012c\5\u00c6d\2\u012c\u012e\3\2\2\2"+
		"\u012d\u012a\3\2\2\2\u012d\u012e\3\2\2\2\u012e\u012f\3\2\2\2\u012f\u0130"+
		"\5\f\7\2\u0130\u0132\3\2\2\2\u0131\u0113\3\2\2\2\u0131\u011b\3\2\2\2\u0131"+
		"\u0122\3\2\2\2\u0131\u0129\3\2\2\2\u0132\13\3\2\2\2\u0133\u0137\5\16\b"+
		"\2\u0134\u0136\5\26\f\2\u0135\u0134\3\2\2\2\u0136\u0139\3\2\2\2\u0137"+
		"\u0135\3\2\2\2\u0137\u0138\3\2\2\2\u0138\u013a\3\2\2\2\u0139\u0137\3\2"+
		"\2\2\u013a\u013b\5\30\r\2\u013b\u0149\3\2\2\2\u013c\u0140\5\16\b\2\u013d"+
		"\u013f\5\26\f\2\u013e\u013d\3\2\2\2\u013f\u0142\3\2\2\2\u0140\u013e\3"+
		"\2\2\2\u0140\u0141\3\2\2\2\u0141\u0143\3\2\2\2\u0142\u0140\3\2\2\2\u0143"+
		"\u0144\5\30\r\2\u0144\u0149\3\2\2\2\u0145\u0146\5\16\b\2\u0146\u0147\5"+
		"\22\n\2\u0147\u0149\3\2\2\2\u0148\u0133\3\2\2\2\u0148\u013c\3\2\2\2\u0148"+
		"\u0145\3\2\2\2\u0149\r\3\2\2\2\u014a\u014b\5\20\t\2\u014b\17\3\2\2\2\u014c"+
		"\u014d\t\2\2\2\u014d\21\3\2\2\2\u014e\u014f\5\24\13\2\u014f\23\3\2\2\2"+
		"\u0150\u0151\t\3\2\2\u0151\25\3\2\2\2\u0152\u0153\t\4\2\2\u0153\27\3\2"+
		"\2\2\u0154\u0157\7\u0297\2\2\u0155\u0157\5\32\16\2\u0156\u0154\3\2\2\2"+
		"\u0156\u0155\3\2\2\2\u0157\u015d\3\2\2\2\u0158\u0159\5\u00c2b\2\u0159"+
		"\u015a\5\32\16\2\u015a\u015c\3\2\2\2\u015b\u0158\3\2\2\2\u015c\u015f\3"+
		"\2\2\2\u015d\u015b\3\2\2\2\u015d\u015e\3\2\2\2\u015e\31\3\2\2\2\u015f"+
		"\u015d\3\2\2\2\u0160\u0161\5\34\17\2\u0161\u0162\5$\23\2\u0162\u0163\7"+
		"\u0297\2\2\u0163\u0171\3\2\2\2\u0164\u0168\5&\24\2\u0165\u0166\5*\26\2"+
		"\u0166\u0167\5\36\20\2\u0167\u0169\3\2\2\2\u0168\u0165\3\2\2\2\u0168\u0169"+
		"\3\2\2\2\u0169\u0171\3\2\2\2\u016a\u016e\5,\27\2\u016b\u016c\5*\26\2\u016c"+
		"\u016d\5\36\20\2\u016d\u016f\3\2\2\2\u016e\u016b\3\2\2\2\u016e\u016f\3"+
		"\2\2\2\u016f\u0171\3\2\2\2\u0170\u0160\3\2\2\2\u0170\u0164\3\2\2\2\u0170"+
		"\u016a\3\2\2\2\u0171\33\3\2\2\2\u0172\u0175\5\36\20\2\u0173\u0174\7\u02a6"+
		"\2\2\u0174\u0176\5\36\20\2\u0175\u0173\3\2\2\2\u0175\u0176\3\2\2\2\u0176"+
		"\35\3\2\2\2\u0177\u0178\5 \21\2\u0178\37\3\2\2\2\u0179\u017c\7\u02bc\2"+
		"\2\u017a\u017c\5\"\22\2\u017b\u0179\3\2\2\2\u017b\u017a\3\2\2\2\u017c"+
		"!\3\2\2\2\u017d\u017e\t\5\2\2\u017e#\3\2\2\2\u017f\u0180\t\6\2\2\u0180"+
		"%\3\2\2\2\u0181\u0186\5\36\20\2\u0182\u0184\5(\25\2\u0183\u0185\5(\25"+
		"\2\u0184\u0183\3\2\2\2\u0184\u0185\3\2\2\2\u0185\u0187\3\2\2\2\u0186\u0182"+
		"\3\2\2\2\u0186\u0187\3\2\2\2\u0187\u018e\3\2\2\2\u0188\u0189\5$\23\2\u0189"+
		"\u018b\5(\25\2\u018a\u018c\5(\25\2\u018b\u018a\3\2\2\2\u018b\u018c\3\2"+
		"\2\2\u018c\u018e\3\2\2\2\u018d\u0181\3\2\2\2\u018d\u0188\3\2\2\2\u018e"+
		"\'\3\2\2\2\u018f\u0190\5$\23\2\u0190\u0191\5\36\20\2\u0191)\3\2\2\2\u0192"+
		"\u0193\7\66\2\2\u0193+\3\2\2\2\u0194\u019d\5\u00b4[\2\u0195\u0196\5\u00c0"+
		"a\2\u0196\u0198\5.\30\2\u0197\u0199\5\u00b2Z\2\u0198\u0197\3\2\2\2\u0198"+
		"\u0199\3\2\2\2\u0199\u019a\3\2\2\2\u019a\u019b\5\60\31\2\u019b\u019d\3"+
		"\2\2\2\u019c\u0194\3\2\2\2\u019c\u0195\3\2\2\2\u019d-\3\2\2\2\u019e\u019f"+
		"\7\u02a7\2\2\u019f/\3\2\2\2\u01a0\u01a1\7\u02a8\2\2\u01a1\61\3\2\2\2\u01a2"+
		"\u01a3\t\7\2\2\u01a3\u01ad\5\66\34\2\u01a4\u01a5\5\66\34\2\u01a5\u01a7"+
		"\7w\2\2\u01a6\u01a8\7\u0089\2\2\u01a7\u01a6\3\2\2\2\u01a7\u01a8\3\2\2"+
		"\2\u01a8\u01a9\3\2\2\2\u01a9\u01aa\t\b\2\2\u01aa\u01ad\3\2\2\2\u01ab\u01ad"+
		"\5\66\34\2\u01ac\u01a2\3\2\2\2\u01ac\u01a4\3\2\2\2\u01ac\u01ab\3\2\2\2"+
		"\u01ad\63\3\2\2\2\u01ae\u01b6\7\64\2\2\u01af\u01b0\7\u02a4\2\2\u01b0\u01b6"+
		"\7\u02a4\2\2\u01b1\u01b6\7\u00c8\2\2\u01b2\u01b6\7\u0091\2\2\u01b3\u01b4"+
		"\7\u02a3\2\2\u01b4\u01b6\7\u02a3\2\2\u01b5\u01ae\3\2\2\2\u01b5\u01af\3"+
		"\2\2\2\u01b5\u01b1\3\2\2\2\u01b5\u01b2\3\2\2\2\u01b5\u01b3\3\2\2\2\u01b6"+
		"\65\3\2\2\2\u01b7\u01b8\5\u00a0Q\2\u01b8\u01b9\7w\2\2\u01b9\u01ba\5\u009c"+
		"O\2\u01ba\u01c1\3\2\2\2\u01bb\u01bc\5\u00a0Q\2\u01bc\u01bd\5\u009eP\2"+
		"\u01bd\u01be\5\u00a0Q\2\u01be\u01c1\3\2\2\2\u01bf\u01c1\5\u00a0Q\2\u01c0"+
		"\u01b7\3\2\2\2\u01c0\u01bb\3\2\2\2\u01c0\u01bf\3\2\2\2\u01c1\67\3\2\2"+
		"\2\u01c2\u01c3\7w\2\2\u01c39\3\2\2\2\u01c4\u01c5\t\t\2\2\u01c5;\3\2\2"+
		"\2\u01c6\u01c8\5> \2\u01c7\u01c6\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01ca"+
		"\3\2\2\2\u01c9\u01cb\5J&\2\u01ca\u01c9\3\2\2\2\u01ca\u01cb\3\2\2\2\u01cb"+
		"\u01cd\3\2\2\2\u01cc\u01ce\5N(\2\u01cd\u01cc\3\2\2\2\u01cd\u01ce\3\2\2"+
		"\2\u01ce\u01d0\3\2\2\2\u01cf\u01d1\5R*\2\u01d0\u01cf\3\2\2\2\u01d0\u01d1"+
		"\3\2\2\2\u01d1=\3\2\2\2\u01d2\u01d3\5@!\2\u01d3\u01d9\5B\"\2\u01d4\u01d5"+
		"\5H%\2\u01d5\u01d6\5B\"\2\u01d6\u01d8\3\2\2\2\u01d7\u01d4\3\2\2\2\u01d8"+
		"\u01db\3\2\2\2\u01d9\u01d7\3\2\2\2\u01d9\u01da\3\2\2\2\u01da\u01de\3\2"+
		"\2\2\u01db\u01d9\3\2\2\2\u01dc\u01dd\7\u00c6\2\2\u01dd\u01df\7\u0152\2"+
		"\2\u01de\u01dc\3\2\2\2\u01de\u01df\3\2\2\2\u01df\u01ed\3\2\2\2\u01e0\u01e2"+
		"\5:\36\2\u01e1\u01e3\5\20\t\2\u01e2\u01e1\3\2\2\2\u01e2\u01e3\3\2\2\2"+
		"\u01e3\u01e4\3\2\2\2\u01e4\u01ea\5\u00b4[\2\u01e5\u01e6\5\u00c2b\2\u01e6"+
		"\u01e7\5\u00b4[\2\u01e7\u01e9\3\2\2\2\u01e8\u01e5\3\2\2\2\u01e9\u01ec"+
		"\3\2\2\2\u01ea\u01e8\3\2\2\2\u01ea\u01eb\3\2\2\2\u01eb\u01ee\3\2\2\2\u01ec"+
		"\u01ea\3\2\2\2\u01ed\u01e0\3\2\2\2\u01ed\u01ee\3\2\2\2\u01ee?\3\2\2\2"+
		"\u01ef\u01f0\7i\2\2\u01f0\u01f3\7;\2\2\u01f1\u01f3\7i\2\2\u01f2\u01ef"+
		"\3\2\2\2\u01f2\u01f1\3\2\2\2\u01f3A\3\2\2\2\u01f4\u01f6\5F$\2\u01f5\u01f7"+
		"\t\n\2\2\u01f6\u01f5\3\2\2\2\u01f6\u01f7\3\2\2\2\u01f7\u01fa\3\2\2\2\u01f8"+
		"\u01fa\5D#\2\u01f9\u01f4\3\2\2\2\u01f9\u01f8\3\2\2\2\u01faC\3\2\2\2\u01fb"+
		"\u01fc\t\13\2\2\u01fcE\3\2\2\2\u01fd\u01fe\t\7\2\2\u01fe\u0208\5F$\2\u01ff"+
		"\u0200\5\66\34\2\u0200\u0202\7w\2\2\u0201\u0203\7\u0089\2\2\u0202\u0201"+
		"\3\2\2\2\u0202\u0203\3\2\2\2\u0203\u0204\3\2\2\2\u0204\u0205\t\b\2\2\u0205"+
		"\u0208\3\2\2\2\u0206\u0208\5\66\34\2\u0207\u01fd\3\2\2\2\u0207\u01ff\3"+
		"\2\2\2\u0207\u0206\3\2\2\2\u0208G\3\2\2\2\u0209\u020a\t\f\2\2\u020aI\3"+
		"\2\2\2\u020b\u020c\5L\'\2\u020c\u020d\5\62\32\2\u020dK\3\2\2\2\u020e\u020f"+
		"\7j\2\2\u020fM\3\2\2\2\u0210\u0211\7\u0092\2\2\u0211\u0212\7;\2\2\u0212"+
		"\u0217\5P)\2\u0213\u0214\7\u02a9\2\2\u0214\u0216\5P)\2\u0215\u0213\3\2"+
		"\2\2\u0216\u0219\3\2\2\2\u0217\u0215\3\2\2\2\u0217\u0218\3\2\2\2\u0218"+
		"O\3\2\2\2\u0219\u0217\3\2\2\2\u021a\u021c\5\62\32\2\u021b\u021d\t\n\2"+
		"\2\u021c\u021b\3\2\2\2\u021c\u021d\3\2\2\2\u021dQ\3\2\2\2\u021e\u0229"+
		"\7\177\2\2\u021f\u0220\5T+\2\u0220\u0221\7\u02a9\2\2\u0221\u0223\3\2\2"+
		"\2\u0222\u021f\3\2\2\2\u0222\u0223\3\2\2\2\u0223\u0224\3\2\2\2\u0224\u022a"+
		"\5T+\2\u0225\u0226\5T+\2\u0226\u0227\7\u014f\2\2\u0227\u0228\5T+\2\u0228"+
		"\u022a\3\2\2\2\u0229\u0222\3\2\2\2\u0229\u0225\3\2\2\2\u022aS\3\2\2\2"+
		"\u022b\u022e\5\u00a8U\2\u022c\u022e\5 \21\2\u022d\u022b\3\2\2\2\u022d"+
		"\u022c\3\2\2\2\u022eU\3\2\2\2\u022f\u0230\5.\30\2\u0230\u0231\5\6\4\2"+
		"\u0231\u0232\5\60\31\2\u0232\u0238\3\2\2\2\u0233\u0234\5.\30\2\u0234\u0235"+
		"\5V,\2\u0235\u0236\5\60\31\2\u0236\u0238\3\2\2\2\u0237\u022f\3\2\2\2\u0237"+
		"\u0233\3\2\2\2\u0238W\3\2\2\2\u0239\u023a\5\\/\2\u023a\u023b\5b\62\2\u023b"+
		"Y\3\2\2\2\u023c\u023d\5\\/\2\u023d\u023e\5`\61\2\u023e[\3\2\2\2\u023f"+
		"\u0240\t\r\2\2\u0240]\3\2\2\2\u0241\u0242\7\u00b7\2\2\u0242_\3\2\2\2\u0243"+
		"\u0245\5\u00b8]\2\u0244\u0243\3\2\2\2\u0244\u0245\3\2\2\2\u0245\u0246"+
		"\3\2\2\2\u0246\u0248\5d\63\2\u0247\u0249\5^\60\2\u0248\u0247\3\2\2\2\u0248"+
		"\u0249\3\2\2\2\u0249\u0254\3\2\2\2\u024a\u024c\5\u0096L\2\u024b\u024d"+
		"\5\u00b8]\2\u024c\u024b\3\2\2\2\u024c\u024d\3\2\2\2\u024d\u024e\3\2\2"+
		"\2\u024e\u0250\5d\63\2\u024f\u0251\5^\60\2\u0250\u024f\3\2\2\2\u0250\u0251"+
		"\3\2\2\2\u0251\u0253\3\2\2\2\u0252\u024a\3\2\2\2\u0253\u0256\3\2\2\2\u0254"+
		"\u0252\3\2\2\2\u0254\u0255\3\2\2\2\u0255a\3\2\2\2\u0256\u0254\3\2\2\2"+
		"\u0257\u025d\5f\64\2\u0258\u0259\5.\30\2\u0259\u025a\5f\64\2\u025a\u025b"+
		"\5\60\31\2\u025b\u025d\3\2\2\2\u025c\u0257\3\2\2\2\u025c\u0258\3\2\2\2"+
		"\u025dc\3\2\2\2\u025e\u0262\5f\64\2\u025f\u0261\5\u0084C\2\u0260\u025f"+
		"\3\2\2\2\u0261\u0264\3\2\2\2\u0262\u0260\3\2\2\2\u0262\u0263\3\2\2\2\u0263"+
		"\u0270\3\2\2\2\u0264\u0262\3\2\2\2\u0265\u0266\5.\30\2\u0266\u026a\5f"+
		"\64\2\u0267\u0269\5\u0084C\2\u0268\u0267\3\2\2\2\u0269\u026c\3\2\2\2\u026a"+
		"\u0268\3\2\2\2\u026a\u026b\3\2\2\2\u026b\u026d\3\2\2\2\u026c\u026a\3\2"+
		"\2\2\u026d\u026e\5\60\31\2\u026e\u0270\3\2\2\2\u026f\u025e\3\2\2\2\u026f"+
		"\u0265\3\2\2\2\u0270e\3\2\2\2\u0271\u0273\5\u00b8]\2\u0272\u0271\3\2\2"+
		"\2\u0272\u0273\3\2\2\2\u0273\u0274\3\2\2\2\u0274\u0276\5n8\2\u0275\u0277"+
		"\5^\60\2\u0276\u0275\3\2\2\2\u0276\u0277\3\2\2\2\u0277\u0279\3\2\2\2\u0278"+
		"\u027a\5j\66\2\u0279\u0278\3\2\2\2\u0279\u027a\3\2\2\2\u027a\u0283\3\2"+
		"\2\2\u027b\u027c\5h\65\2\u027c\u027d\5j\66\2\u027d\u0283\3\2\2\2\u027e"+
		"\u027f\5.\30\2\u027f\u0280\5`\61\2\u0280\u0281\5\60\31\2\u0281\u0283\3"+
		"\2\2\2\u0282\u0272\3\2\2\2\u0282\u027b\3\2\2\2\u0282\u027e\3\2\2\2\u0283"+
		"g\3\2\2\2\u0284\u0285\5.\30\2\u0285\u0286\5\4\3\2\u0286\u0287\5\60\31"+
		"\2\u0287i\3\2\2\2\u0288\u028a\5l\67\2\u0289\u0288\3\2\2\2\u0289\u028a"+
		"\3\2\2\2\u028a\u028b\3\2\2\2\u028b\u028c\5\36\20\2\u028ck\3\2\2\2\u028d"+
		"\u028e\7\66\2\2\u028em\3\2\2\2\u028f\u0290\5\34\17\2\u0290o\3\2\2\2\u0291"+
		"\u0296\5\36\20\2\u0292\u0293\7\u02a9\2\2\u0293\u0295\5\36\20\2\u0294\u0292"+
		"\3\2\2\2\u0295\u0298\3\2\2\2\u0296\u0294\3\2\2\2\u0296\u0297\3\2\2\2\u0297"+
		"q\3\2\2\2\u0298\u0296\3\2\2\2\u0299\u029a\t\16\2\2\u029a\u029d\t\17\2"+
		"\2\u029b\u029c\7a\2\2\u029c\u029e\5t;\2\u029d\u029b\3\2\2\2\u029d\u029e"+
		"\3\2\2\2\u029e\u029f\3\2\2\2\u029f\u02a0\5.\30\2\u02a0\u02a1\5p9\2\u02a1"+
		"\u02a2\5\60\31\2\u02a2s\3\2\2\2\u02a3\u02a9\7y\2\2\u02a4\u02a5\7\u0092"+
		"\2\2\u02a5\u02a9\7;\2\2\u02a6\u02a7\7i\2\2\u02a7\u02a9\7;\2\2\u02a8\u02a3"+
		"\3\2\2\2\u02a8\u02a4\3\2\2\2\u02a8\u02a6\3\2\2\2\u02a9u\3\2\2\2\u02aa"+
		"\u02ab\t\20\2\2\u02abw\3\2\2\2\u02ac\u02b2\5z>\2\u02ad\u02ae\5:\36\2\u02ae"+
		"\u02af\5z>\2\u02af\u02b1\3\2\2\2\u02b0\u02ad\3\2\2\2\u02b1\u02b4\3\2\2"+
		"\2\u02b2\u02b0\3\2\2\2\u02b2\u02b3\3\2\2\2\u02b3y\3\2\2\2\u02b4\u02b2"+
		"\3\2\2\2\u02b5\u02b9\5|?\2\u02b6\u02b9\5~@\2\u02b7\u02b9\5\u0080A\2\u02b8"+
		"\u02b5\3\2\2\2\u02b8\u02b6\3\2\2\2\u02b8\u02b7\3\2\2\2\u02b9{\3\2\2\2"+
		"\u02ba\u02bc\5\u0088E\2\u02bb\u02ba\3\2\2\2\u02bb\u02bc\3\2\2\2\u02bc"+
		"\u02bd\3\2\2\2\u02bd\u02be\5v<\2\u02be\u02bf\5f\64\2\u02bf\u02c0\5\u0082"+
		"B\2\u02c0\u02c9\5f\64\2\u02c1\u02c2\5\u008aF\2\u02c2\u02c3\5\62\32\2\u02c3"+
		"\u02ca\3\2\2\2\u02c4\u02c5\7\u00c1\2\2\u02c5\u02c6\5.\30\2\u02c6\u02c7"+
		"\5p9\2\u02c7\u02c8\5\60\31\2\u02c8\u02ca\3\2\2\2\u02c9\u02c1\3\2\2\2\u02c9"+
		"\u02c4\3\2\2\2\u02c9\u02ca\3\2\2\2\u02ca}\3\2\2\2\u02cb\u02cd\5\u008e"+
		"H\2\u02cc\u02ce\5\u0090I\2\u02cd\u02cc\3\2\2\2\u02cd\u02ce\3\2\2\2\u02ce"+
		"\u02cf\3\2\2\2\u02cf\u02d0\5v<\2\u02d0\u02d1\5f\64\2\u02d1\u02d2\5\u0082"+
		"B\2\u02d2\u02db\5f\64\2\u02d3\u02d4\5\u008aF\2\u02d4\u02d5\5\62\32\2\u02d5"+
		"\u02dc\3\2\2\2\u02d6\u02d7\7\u00c1\2\2\u02d7\u02d8\5.\30\2\u02d8\u02d9"+
		"\5p9\2\u02d9\u02da\5\60\31\2\u02da\u02dc\3\2\2\2\u02db\u02d3\3\2\2\2\u02db"+
		"\u02d6\3\2\2\2\u02dc\177\3\2\2\2\u02dd\u02e2\5\u0094K\2\u02de\u02e0\5"+
		"\u008eH\2\u02df\u02e1\5\u0090I\2\u02e0\u02df\3\2\2\2\u02e0\u02e1\3\2\2"+
		"\2\u02e1\u02e3\3\2\2\2\u02e2\u02de\3\2\2\2\u02e2\u02e3\3\2\2\2\u02e3\u02e4"+
		"\3\2\2\2\u02e4\u02e5\5v<\2\u02e5\u02e6\5f\64\2\u02e6\u02e7\5\u0082B\2"+
		"\u02e7\u02e8\5f\64\2\u02e8\u0081\3\2\2\2\u02e9\u02ea\t\21\2\2\u02ea\u0083"+
		"\3\2\2\2\u02eb\u02ef\5\u0086D\2\u02ec\u02ef\5\u008cG\2\u02ed\u02ef\5\u0092"+
		"J\2\u02ee\u02eb\3\2\2\2\u02ee\u02ec\3\2\2\2\u02ee\u02ed\3\2\2\2\u02ef"+
		"\u0085\3\2\2\2\u02f0\u02f2\5\u0088E\2\u02f1\u02f0\3\2\2\2\u02f1\u02f2"+
		"\3\2\2\2\u02f2\u02f3\3\2\2\2\u02f3\u02f4\5v<\2\u02f4\u02fd\5f\64\2\u02f5"+
		"\u02f6\5\u008aF\2\u02f6\u02f7\5\62\32\2\u02f7\u02fe\3\2\2\2\u02f8\u02f9"+
		"\7\u00c1\2\2\u02f9\u02fa\5.\30\2\u02fa\u02fb\5p9\2\u02fb\u02fc\5\60\31"+
		"\2\u02fc\u02fe\3\2\2\2\u02fd\u02f5\3\2\2\2\u02fd\u02f8\3\2\2\2\u02fd\u02fe"+
		"\3\2\2\2\u02fe\u0087\3\2\2\2\u02ff\u0300\t\22\2\2\u0300\u0089\3\2\2\2"+
		"\u0301\u0302\7\u008d\2\2\u0302\u008b\3\2\2\2\u0303\u0305\5\u008eH\2\u0304"+
		"\u0306\5\u0090I\2\u0305\u0304\3\2\2\2\u0305\u0306\3\2\2\2\u0306\u0307"+
		"\3\2\2\2\u0307\u0308\5v<\2\u0308\u0311\5f\64\2\u0309\u030a\5\u008aF\2"+
		"\u030a\u030b\5\62\32\2\u030b\u0312\3\2\2\2\u030c\u030d\7\u00c1\2\2\u030d"+
		"\u030e\5.\30\2\u030e\u030f\5p9\2\u030f\u0310\5\60\31\2\u0310\u0312\3\2"+
		"\2\2\u0311\u0309\3\2\2\2\u0311\u030c\3\2\2\2\u0312\u008d\3\2\2\2\u0313"+
		"\u0314\t\23\2\2\u0314\u008f\3\2\2\2\u0315\u0316\7\u0094\2\2\u0316\u0091"+
		"\3\2\2\2\u0317\u031c\5\u0094K\2\u0318\u031a\5\u008eH\2\u0319\u031b\5\u0090"+
		"I\2\u031a\u0319\3\2\2\2\u031a\u031b\3\2\2\2\u031b\u031d\3\2\2\2\u031c"+
		"\u0318\3\2\2\2\u031c\u031d\3\2\2\2\u031d\u031e\3\2\2\2\u031e\u031f\5v"+
		"<\2\u031f\u0320\5f\64\2\u0320\u0093\3\2\2\2\u0321\u0322\7\u0088\2\2\u0322"+
		"\u0095\3\2\2\2\u0323\u0324\t\f\2\2\u0324\u0097\3\2\2\2\u0325\u032b\5\62"+
		"\32\2\u0326\u0327\5\u009aN\2\u0327\u0328\5\62\32\2\u0328\u032a\3\2\2\2"+
		"\u0329\u0326\3\2\2\2\u032a\u032d\3\2\2\2\u032b\u0329\3\2\2\2\u032b\u032c"+
		"\3\2\2\2\u032c\u0099\3\2\2\2\u032d\u032b\3\2\2\2\u032e\u032f\t\f\2\2\u032f"+
		"\u009b\3\2\2\2\u0330\u0332\7\u0089\2\2\u0331\u0330\3\2\2\2\u0331\u0332"+
		"\3\2\2\2\u0332\u0333\3\2\2\2\u0333\u0334\t\24\2\2\u0334\u009d\3\2\2\2"+
		"\u0335\u0344\7\u029e\2\2\u0336\u0344\7\u029f\2\2\u0337\u0344\7\u02a0\2"+
		"\2\u0338\u0339\7\u02a0\2\2\u0339\u0344\7\u029e\2\2\u033a\u033b\7\u029f"+
		"\2\2\u033b\u0344\7\u029e\2\2\u033c\u033d\7\u02a0\2\2\u033d\u0344\7\u029f"+
		"\2\2\u033e\u033f\7\u02a1\2\2\u033f\u0344\7\u029e\2\2\u0340\u0341\7\u02a0"+
		"\2\2\u0341\u0342\7\u029e\2\2\u0342\u0344\7\u029f\2\2\u0343\u0335\3\2\2"+
		"\2\u0343\u0336\3\2\2\2\u0343\u0337\3\2\2\2\u0343\u0338\3\2\2\2\u0343\u033a"+
		"\3\2\2\2\u0343\u033c\3\2\2\2\u0343\u033e\3\2\2\2\u0343\u0340\3\2\2\2\u0344"+
		"\u009f\3\2\2\2\u0345\u035d\5\u00a2R\2\u0346\u035d\5&\24\2\u0347\u0348"+
		"\5&\24\2\u0348\u0349\5\u00b0Y\2\u0349\u034a\5&\24\2\u034a\u035d\3\2\2"+
		"\2\u034b\u034c\5&\24\2\u034c\u034d\5\u00b0Y\2\u034d\u034e\5\u00a2R\2\u034e"+
		"\u035d\3\2\2\2\u034f\u0350\5\u00a2R\2\u0350\u0351\5\u00b0Y\2\u0351\u0352"+
		"\5&\24\2\u0352\u035d\3\2\2\2\u0353\u0354\5\u00a2R\2\u0354\u0355\5\u00b0"+
		"Y\2\u0355\u0356\5\u00a2R\2\u0356\u035d\3\2\2\2\u0357\u035a\5\u00aeX\2"+
		"\u0358\u035b\5\u00a2R\2\u0359\u035b\5&\24\2\u035a\u0358\3\2\2\2\u035a"+
		"\u0359\3\2\2\2\u035b\u035d\3\2\2\2\u035c\u0345\3\2\2\2\u035c\u0346\3\2"+
		"\2\2\u035c\u0347\3\2\2\2\u035c\u034b\3\2\2\2\u035c\u034f\3\2\2\2\u035c"+
		"\u0353\3\2\2\2\u035c\u0357\3\2\2\2\u035d\u00a1\3\2\2\2\u035e\u036b\5\u00a4"+
		"S\2\u035f\u036b\5\u00a8U\2\u0360\u0361\7\u029b\2\2\u0361\u036b\5\u00a8"+
		"U\2\u0362\u036b\5\u00aaV\2\u0363\u036b\5\u00acW\2\u0364\u036b\7\u02b8"+
		"\2\2\u0365\u036b\7\u02ba\2\2\u0366\u0368\7\u0089\2\2\u0367\u0366\3\2\2"+
		"\2\u0367\u0368\3\2\2\2\u0368\u0369\3\2\2\2\u0369\u036b\t\24\2\2\u036a"+
		"\u035e\3\2\2\2\u036a\u035f\3\2\2\2\u036a\u0360\3\2\2\2\u036a\u0362\3\2"+
		"\2\2\u036a\u0363\3\2\2\2\u036a\u0364\3\2\2\2\u036a\u0365\3\2\2\2\u036a"+
		"\u0367\3\2\2\2\u036b\u00a3\3\2\2\2\u036c\u036e\t\25\2\2\u036d\u036f\7"+
		"\u02b5\2\2\u036e\u036d\3\2\2\2\u036f\u0370\3\2\2\2\u0370\u036e\3\2\2\2"+
		"\u0370\u0371\3\2\2\2\u0371\u0378\3\2\2\2\u0372\u0375\t\25\2\2\u0373\u0374"+
		"\7A\2\2\u0374\u0376\5\u00a6T\2\u0375\u0373\3\2\2\2\u0375\u0376\3\2\2\2"+
		"\u0376\u0378\3\2\2\2\u0377\u036c\3\2\2\2\u0377\u0372\3\2\2\2\u0378\u00a5"+
		"\3\2\2\2\u0379\u037c\5\36\20\2\u037a\u037c\7\u02b5\2\2\u037b\u0379\3\2"+
		"\2\2\u037b\u037a\3\2\2\2\u037c\u00a7\3\2\2\2\u037d\u037e\t\26\2\2\u037e"+
		"\u00a9\3\2\2\2\u037f\u0380\7\u02b7\2\2\u0380\u00ab\3\2\2\2\u0381\u0382"+
		"\t\27\2\2\u0382\u00ad\3\2\2\2\u0383\u0384\t\30\2\2\u0384\u00af\3\2\2\2"+
		"\u0385\u0386\t\31\2\2\u0386\u00b1\3\2\2\2\u0387\u038a\5\u00a2R\2\u0388"+
		"\u038a\5&\24\2\u0389\u0387\3\2\2\2\u0389\u0388\3\2\2\2\u038a\u0392\3\2"+
		"\2\2\u038b\u038e\7\u02a9\2\2\u038c\u038f\5\u00a2R\2\u038d\u038f\5&\24"+
		"\2\u038e\u038c\3\2\2\2\u038e\u038d\3\2\2\2\u038f\u0391\3\2\2\2\u0390\u038b"+
		"\3\2\2\2\u0391\u0394\3\2\2\2\u0392\u0390\3\2\2\2\u0392\u0393\3\2\2\2\u0393"+
		"\u00b3\3\2\2\2\u0394\u0392\3\2\2\2\u0395\u0397\5\u00b8]\2\u0396\u0395"+
		"\3\2\2\2\u0396\u0397\3\2\2\2\u0397\u0398\3\2\2\2\u0398\u039a\t\32\2\2"+
		"\u0399\u039b\5\u00b6\\\2\u039a\u0399\3\2\2\2\u039a\u039b\3\2\2\2\u039b"+
		"\u039c\3\2\2\2\u039c\u039e\5.\30\2\u039d\u039f\t\33\2\2\u039e\u039d\3"+
		"\2\2\2\u039e\u039f\3\2\2\2\u039f\u03a0\3\2\2\2\u03a0\u03a1\5\u00ba^\2"+
		"\u03a1\u03a2\5\60\31\2\u03a2\u03b8\3\2\2\2\u03a3\u03a5\5\u00b8]\2\u03a4"+
		"\u03a3\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5\u03a6\3\2\2\2\u03a6\u03a8\7\u0105"+
		"\2\2\u03a7\u03a9\5\u00b6\\\2\u03a8\u03a7\3\2\2\2\u03a8\u03a9\3\2\2\2\u03a9"+
		"\u03aa\3\2\2\2\u03aa\u03b3\5.\30\2\u03ab\u03b4\7\u0297\2\2\u03ac\u03ae"+
		"\5\u00bc_\2\u03ad\u03ac\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae\u03af\3\2\2"+
		"\2\u03af\u03b4\5\u00ba^\2\u03b0\u03b1\5\u00be`\2\u03b1\u03b2\5\u00b2Z"+
		"\2\u03b2\u03b4\3\2\2\2\u03b3\u03ab\3\2\2\2\u03b3\u03ad\3\2\2\2\u03b3\u03b0"+
		"\3\2\2\2\u03b4\u03b5\3\2\2\2\u03b5\u03b6\5\60\31\2\u03b6\u03b8\3\2\2\2"+
		"\u03b7\u0396\3\2\2\2\u03b7\u03a4\3\2\2\2\u03b8\u00b5\3\2\2\2\u03b9\u03ba"+
		"\7\u0150\2\2\u03ba\u00b7\3\2\2\2\u03bb\u03bc\7.\2\2\u03bc\u00b9\3\2\2"+
		"\2\u03bd\u03c0\5\u00a2R\2\u03be\u03c0\5&\24\2\u03bf\u03bd\3\2\2\2\u03bf"+
		"\u03be\3\2\2\2\u03c0\u00bb\3\2\2\2\u03c1\u03c2\7\60\2\2\u03c2\u00bd\3"+
		"\2\2\2\u03c3\u03c4\7R\2\2\u03c4\u00bf\3\2\2\2\u03c5\u03c6\t\34\2\2\u03c6"+
		"\u00c1\3\2\2\2\u03c7\u03c8\t\f\2\2\u03c8\u00c3\3\2\2\2\u03c9\u03ca\7\u00c4"+
		"\2\2\u03ca\u00c5\3\2\2\2\u03cb\u03d1\5\62\32\2\u03cc\u03cd\5\64\33\2\u03cd"+
		"\u03ce\5\62\32\2\u03ce\u03d0\3\2\2\2\u03cf\u03cc\3\2\2\2\u03d0\u03d3\3"+
		"\2\2\2\u03d1\u03cf\3\2\2\2\u03d1\u03d2\3\2\2\2\u03d2\u00c7\3\2\2\2\u03d3"+
		"\u03d1\3\2\2\2\u03d4\u03d5\5X-\2\u03d5\u00c9\3\2\2\2\u03d6\u03d7\5Z.\2"+
		"\u03d7\u00cb\3\2\2\2t\u00ce\u00d2\u00da\u00df\u00e5\u00e9\u00ef\u00f1"+
		"\u00f7\u0100\u0107\u010d\u0111\u0117\u0120\u0127\u012d\u0131\u0137\u0140"+
		"\u0148\u0156\u015d\u0168\u016e\u0170\u0175\u017b\u0184\u0186\u018b\u018d"+
		"\u0198\u019c\u01a7\u01ac\u01b5\u01c0\u01c7\u01ca\u01cd\u01d0\u01d9\u01de"+
		"\u01e2\u01ea\u01ed\u01f2\u01f6\u01f9\u0202\u0207\u0217\u021c\u0222\u0229"+
		"\u022d\u0237\u0244\u0248\u024c\u0250\u0254\u025c\u0262\u026a\u026f\u0272"+
		"\u0276\u0279\u0282\u0289\u0296\u029d\u02a8\u02b2\u02b8\u02bb\u02c9\u02cd"+
		"\u02db\u02e0\u02e2\u02ee\u02f1\u02fd\u0305\u0311\u031a\u031c\u032b\u0331"+
		"\u0343\u035a\u035c\u0367\u036a\u0370\u0375\u0377\u037b\u0389\u038e\u0392"+
		"\u0396\u039a\u039e\u03a4\u03a8\u03ad\u03b3\u03b7\u03bf\u03d1";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}