// Generated from SimpleSpeakQlParser.g4 by ANTLR 4.9.3
package antlrgen;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class SimpleSpeakQlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.9.3", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		SPACE=1, SPEC_MYSQL_COMMENT=2, COMMENT_INPUT=3, LINE_COMMENT=4, END_OF_FILE=5, 
		RETRIEVE=6, SHOW_ME=7, DISPLAY=8, PRESENT=9, FIND=10, WHAT_IS=11, WHAT_ARE=12, 
		WHAT_IS_THE=13, WHAT_ARE_THE=14, IN_TABLE=15, IN_TABLES=16, FROM_TABLE=17, 
		FROM_TABLES=18, JOIN_TABLE=19, BY_JOINING=20, BY_JOINING_TABLE=21, JOIN_WITH=22, 
		JOIN_WITH_TABLE=23, JOINED_WITH=24, JOINED_WITH_TABLE=25, BY_JOINING_WITH_TABLE=26, 
		WITH_TABLE=27, SPOKEN_DOT=28, AND_THEN=29, SUBQUERY=30, SCHRODINGER=31, 
		AUTOMATIC=32, AUTOMATICALLY=33, NOTHING=34, NO_COLUMNS=35, OPEN_PARENTHESIS=36, 
		LEFT_PARENTHESIS=37, CLOSE_PARENTHESIS=38, RIGHT_PARENTHESIS=39, OPEN_PAREN=40, 
		LEFT_PAREN=41, CLOSE_PAREN=42, RIGHT_PAREN=43, THE=44, ADD=45, ALL=46, 
		ALTER=47, ALWAYS=48, ANALYZE=49, AND=50, ARRAY=51, AS=52, ASC=53, BEFORE=54, 
		BETWEEN=55, BOTH=56, BUCKETS=57, BY=58, CALL=59, CASCADE=60, CASE=61, 
		CAST=62, CHANGE=63, CHARACTER=64, CHECK=65, COLLATE=66, COLUMN=67, CONDITION=68, 
		CONSTRAINT=69, CONTINUE=70, CONVERT=71, CREATE=72, CROSS=73, CURRENT=74, 
		CURRENT_USER=75, CURSOR=76, DATABASE=77, DATABASES=78, DECLARE=79, DEFAULT=80, 
		DELAYED=81, DELETE=82, DESC=83, DESCRIBE=84, DETERMINISTIC=85, DIAGNOSTICS=86, 
		DISTINCT=87, DISTINCTROW=88, DROP=89, EACH=90, ELSE=91, ELSEIF=92, EMPTY=93, 
		ENCLOSED=94, ESCAPED=95, EXCEPT=96, EXISTS=97, EXIT=98, EXPLAIN=99, FALSE=100, 
		FETCH=101, FOR=102, FORCE=103, FOREIGN=104, FROM=105, FULLTEXT=106, GENERATED=107, 
		GET=108, GRANT=109, GROUP=110, HAVING=111, HIGH_PRIORITY=112, HISTOGRAM=113, 
		IF=114, IGNORE=115, IN=116, INDEX=117, INFILE=118, INNER=119, INOUT=120, 
		INSERT=121, INTERVAL=122, INTO=123, IS=124, ITERATE=125, JOIN=126, KEY=127, 
		KEYS=128, KILL=129, LEADING=130, LEAVE=131, LEFT=132, LIKE=133, LIMIT=134, 
		LINEAR=135, LINES=136, LOAD=137, LOCK=138, LOOP=139, LOW_PRIORITY=140, 
		MASTER_BIND=141, MASTER_SSL_VERIFY_SERVER_CERT=142, MATCH=143, MAXVALUE=144, 
		MODIFIES=145, NATURAL=146, NOT=147, NO_WRITE_TO_BINLOG=148, NULL_LITERAL=149, 
		NUMBER=150, ON=151, OPTIMIZE=152, OPTION=153, OPTIONALLY=154, OR=155, 
		ORDER=156, OUT=157, OVER=158, OUTER=159, OUTFILE=160, PARTITION=161, PRIMARY=162, 
		PROCEDURE=163, PURGE=164, RANGE=165, READ=166, READS=167, REFERENCES=168, 
		REGEXP=169, RELEASE=170, RENAME=171, REPEAT=172, REPLACE=173, REQUIRE=174, 
		RESIGNAL=175, RESTRICT=176, RETAIN=177, RETURN=178, REVOKE=179, RIGHT=180, 
		RLIKE=181, SCHEMA=182, SCHEMAS=183, SELECT=184, SET=185, SEPARATOR=186, 
		SHOW=187, SIGNAL=188, SPATIAL=189, SQL=190, SQLEXCEPTION=191, SQLSTATE=192, 
		SQLWARNING=193, SQL_BIG_RESULT=194, SQL_CALC_FOUND_ROWS=195, SQL_SMALL_RESULT=196, 
		SSL=197, STACKED=198, STARTING=199, STRAIGHT_JOIN=200, TABLE=201, TERMINATED=202, 
		THEN=203, TO=204, TRAILING=205, TRIGGER=206, TRUE=207, UNDO=208, UNION=209, 
		UNIQUE=210, UNLOCK=211, UNSIGNED=212, UPDATE=213, USAGE=214, USE=215, 
		USING=216, VALUES=217, WHEN=218, WHERE=219, WHILE=220, WITH=221, WRITE=222, 
		XOR=223, ZEROFILL=224, TINYINT=225, SMALLINT=226, MEDIUMINT=227, MIDDLEINT=228, 
		INT=229, INT1=230, INT2=231, INT3=232, INT4=233, INT8=234, INTEGER=235, 
		BIGINT=236, REAL=237, DOUBLE=238, PRECISION=239, FLOAT=240, FLOAT4=241, 
		FLOAT8=242, DECIMAL=243, DEC=244, NUMERIC=245, DATE=246, TIME=247, TIMESTAMP=248, 
		DATETIME=249, YEAR=250, CHAR=251, VARCHAR=252, NVARCHAR=253, NATIONAL=254, 
		BINARY=255, VARBINARY=256, TINYBLOB=257, BLOB=258, MEDIUMBLOB=259, LONG=260, 
		LONGBLOB=261, TINYTEXT=262, TEXT=263, MEDIUMTEXT=264, LONGTEXT=265, ENUM=266, 
		VARYING=267, SERIAL=268, YEAR_MONTH=269, DAY_HOUR=270, DAY_MINUTE=271, 
		DAY_SECOND=272, HOUR_MINUTE=273, HOUR_SECOND=274, MINUTE_SECOND=275, SECOND_MICROSECOND=276, 
		MINUTE_MICROSECOND=277, HOUR_MICROSECOND=278, DAY_MICROSECOND=279, JSON_ARRAY=280, 
		JSON_OBJECT=281, JSON_QUOTE=282, JSON_CONTAINS=283, JSON_CONTAINS_PATH=284, 
		JSON_EXTRACT=285, JSON_KEYS=286, JSON_OVERLAPS=287, JSON_SEARCH=288, JSON_VALUE=289, 
		JSON_ARRAY_APPEND=290, JSON_ARRAY_INSERT=291, JSON_INSERT=292, JSON_MERGE=293, 
		JSON_MERGE_PATCH=294, JSON_MERGE_PRESERVE=295, JSON_REMOVE=296, JSON_REPLACE=297, 
		JSON_SET=298, JSON_UNQUOTE=299, JSON_DEPTH=300, JSON_LENGTH=301, JSON_TYPE=302, 
		JSON_VALID=303, JSON_TABLE=304, JSON_SCHEMA_VALID=305, JSON_SCHEMA_VALIDATION_REPORT=306, 
		JSON_PRETTY=307, JSON_STORAGE_FREE=308, JSON_STORAGE_SIZE=309, JSON_ARRAYAGG=310, 
		JSON_OBJECTAGG=311, AVG=312, BIT_AND=313, BIT_OR=314, BIT_XOR=315, COUNT=316, 
		CUME_DIST=317, DENSE_RANK=318, FIRST_VALUE=319, GROUP_CONCAT=320, LAG=321, 
		LAST_VALUE=322, LEAD=323, MAX=324, MIN=325, NTILE=326, NTH_VALUE=327, 
		PERCENT_RANK=328, RANK=329, ROW_NUMBER=330, STD=331, STDDEV=332, STDDEV_POP=333, 
		STDDEV_SAMP=334, SUM=335, VAR_POP=336, VAR_SAMP=337, VARIANCE=338, CURRENT_DATE=339, 
		CURRENT_TIME=340, CURRENT_TIMESTAMP=341, LOCALTIME=342, CURDATE=343, CURTIME=344, 
		DATE_ADD=345, DATE_SUB=346, EXTRACT=347, LOCALTIMESTAMP=348, NOW=349, 
		POSITION=350, SUBSTR=351, SUBSTRING=352, SYSDATE=353, TRIM=354, UTC_DATE=355, 
		UTC_TIME=356, UTC_TIMESTAMP=357, ACCOUNT=358, ACTION=359, AFTER=360, AGGREGATE=361, 
		ALGORITHM=362, ANY=363, AT=364, AUTHORS=365, AUTOCOMMIT=366, AUTOEXTEND_SIZE=367, 
		AUTO_INCREMENT=368, AVG_ROW_LENGTH=369, BEGIN=370, BINLOG=371, BIT=372, 
		BLOCK=373, BOOL=374, BOOLEAN=375, BTREE=376, CACHE=377, CASCADED=378, 
		CHAIN=379, CHANGED=380, CHANNEL=381, CHECKSUM=382, PAGE_CHECKSUM=383, 
		CIPHER=384, CLASS_ORIGIN=385, CLIENT=386, CLOSE=387, COALESCE=388, CODE=389, 
		COLUMNS=390, COLUMN_FORMAT=391, COLUMN_NAME=392, COMMENT=393, COMMIT=394, 
		COMPACT=395, COMPLETION=396, COMPRESSED=397, COMPRESSION=398, CONCURRENT=399, 
		CONNECT=400, CONNECTION=401, CONSISTENT=402, CONSTRAINT_CATALOG=403, CONSTRAINT_SCHEMA=404, 
		CONSTRAINT_NAME=405, CONTAINS=406, CONTEXT=407, CONTRIBUTORS=408, COPY=409, 
		CPU=410, CURSOR_NAME=411, DATA=412, DATAFILE=413, DEALLOCATE=414, DEFAULT_AUTH=415, 
		DEFINER=416, DELAY_KEY_WRITE=417, DES_KEY_FILE=418, DIRECTORY=419, DISABLE=420, 
		DISCARD=421, DISK=422, DO=423, DUMPFILE=424, DUPLICATE=425, DYNAMIC=426, 
		ENABLE=427, ENCRYPTION=428, END=429, ENDS=430, ENGINE=431, ENGINES=432, 
		ERROR=433, ERRORS=434, ESCAPE=435, EVEN=436, EVENT=437, EVENTS=438, EVERY=439, 
		EXCHANGE=440, EXCLUSIVE=441, EXPIRE=442, EXPORT=443, EXTENDED=444, EXTENT_SIZE=445, 
		FAST=446, FAULTS=447, FIELDS=448, FILE_BLOCK_SIZE=449, FILTER=450, FIRST=451, 
		FIXED=452, FLUSH=453, FOLLOWING=454, FOLLOWS=455, FOUND=456, FULL=457, 
		FUNCTION=458, GENERAL=459, GLOBAL=460, GRANTS=461, GROUP_REPLICATION=462, 
		HANDLER=463, HASH=464, HELP=465, HOST=466, HOSTS=467, IDENTIFIED=468, 
		IGNORE_SERVER_IDS=469, IMPORT=470, INDEXES=471, INITIAL_SIZE=472, INPLACE=473, 
		INSERT_METHOD=474, INSTALL=475, INSTANCE=476, INVISIBLE=477, INVOKER=478, 
		IO=479, IO_THREAD=480, IPC=481, ISOLATION=482, ISSUER=483, JSON=484, KEY_BLOCK_SIZE=485, 
		LANGUAGE=486, LAST=487, LEAVES=488, LESS=489, LEVEL=490, LIST=491, LOCAL=492, 
		LOGFILE=493, LOGS=494, MASTER=495, MASTER_AUTO_POSITION=496, MASTER_CONNECT_RETRY=497, 
		MASTER_DELAY=498, MASTER_HEARTBEAT_PERIOD=499, MASTER_HOST=500, MASTER_LOG_FILE=501, 
		MASTER_LOG_POS=502, MASTER_PASSWORD=503, MASTER_PORT=504, MASTER_RETRY_COUNT=505, 
		MASTER_SSL=506, MASTER_SSL_CA=507, MASTER_SSL_CAPATH=508, MASTER_SSL_CERT=509, 
		MASTER_SSL_CIPHER=510, MASTER_SSL_CRL=511, MASTER_SSL_CRLPATH=512, MASTER_SSL_KEY=513, 
		MASTER_TLS_VERSION=514, MASTER_USER=515, MAX_CONNECTIONS_PER_HOUR=516, 
		MAX_QUERIES_PER_HOUR=517, MAX_ROWS=518, MAX_SIZE=519, MAX_UPDATES_PER_HOUR=520, 
		MAX_USER_CONNECTIONS=521, MEDIUM=522, MEMBER=523, MERGE=524, MESSAGE_TEXT=525, 
		MID=526, MIGRATE=527, MIN_ROWS=528, MODE=529, MODIFY=530, MUTEX=531, MYSQL=532, 
		MYSQL_ERRNO=533, NAME=534, NAMES=535, NCHAR=536, NEVER=537, NEXT=538, 
		NO=539, NODEGROUP=540, NONE=541, ODBC=542, OFFLINE=543, OFFSET=544, OF=545, 
		OJ=546, OLD_PASSWORD=547, ONE=548, ONLINE=549, ONLY=550, OPEN=551, OPTIMIZER_COSTS=552, 
		OPTIONS=553, OWNER=554, PACK_KEYS=555, PAGE=556, PARSER=557, PARTIAL=558, 
		PARTITIONING=559, PARTITIONS=560, PASSWORD=561, PHASE=562, PLUGIN=563, 
		PLUGIN_DIR=564, PLUGINS=565, PORT=566, PRECEDES=567, PRECEDING=568, PREPARE=569, 
		PRESERVE=570, PREV=571, PROCESSLIST=572, PROFILE=573, PROFILES=574, PROXY=575, 
		QUERY=576, QUICK=577, REBUILD=578, RECOVER=579, REDO_BUFFER_SIZE=580, 
		REDUNDANT=581, RELAY=582, RELAY_LOG_FILE=583, RELAY_LOG_POS=584, RELAYLOG=585, 
		REMOVE=586, REORGANIZE=587, REPAIR=588, REPLICATE_DO_DB=589, REPLICATE_DO_TABLE=590, 
		REPLICATE_IGNORE_DB=591, REPLICATE_IGNORE_TABLE=592, REPLICATE_REWRITE_DB=593, 
		REPLICATE_WILD_DO_TABLE=594, REPLICATE_WILD_IGNORE_TABLE=595, REPLICATION=596, 
		RESET=597, RESUME=598, RETURNED_SQLSTATE=599, RETURNING=600, RETURNS=601, 
		ROLE=602, ROLLBACK=603, ROLLUP=604, ROTATE=605, ROW=606, ROWS=607, ROW_FORMAT=608, 
		SAVEPOINT=609, SCHEDULE=610, SECURITY=611, SERVER=612, SESSION=613, SHARE=614, 
		SHARED=615, SIGNED=616, SIMPLE=617, SLAVE=618, SLOW=619, SNAPSHOT=620, 
		SOCKET=621, SOME=622, SONAME=623, SOUNDS=624, SOURCE=625, SQL_AFTER_GTIDS=626, 
		SQL_AFTER_MTS_GAPS=627, SQL_BEFORE_GTIDS=628, SQL_BUFFER_RESULT=629, SQL_CACHE=630, 
		SQL_NO_CACHE=631, SQL_THREAD=632, START=633, STARTS=634, STATS_AUTO_RECALC=635, 
		STATS_PERSISTENT=636, STATS_SAMPLE_PAGES=637, STATUS=638, STOP=639, STORAGE=640, 
		STORED=641, STRING=642, SUBCLASS_ORIGIN=643, SUBJECT=644, SUBPARTITION=645, 
		SUBPARTITIONS=646, SUSPEND=647, SWAPS=648, SWITCHES=649, TABLE_NAME=650, 
		TABLESPACE=651, TABLE_TYPE=652, TEMPORARY=653, TEMPTABLE=654, THAN=655, 
		TRADITIONAL=656, TRANSACTION=657, TRANSACTIONAL=658, TRIGGERS=659, TRUNCATE=660, 
		UNBOUNDED=661, UNDEFINED=662, UNDOFILE=663, UNDO_BUFFER_SIZE=664, UNINSTALL=665, 
		UNKNOWN=666, UNTIL=667, UPGRADE=668, USER=669, USE_FRM=670, USER_RESOURCES=671, 
		VALIDATION=672, VALUE=673, VARIABLES=674, VIEW=675, VIRTUAL=676, VISIBLE=677, 
		WAIT=678, WARNINGS=679, WINDOW=680, WITHOUT=681, WORK=682, WRAPPER=683, 
		X509=684, XA=685, XML=686, EUR=687, USA=688, JIS=689, ISO=690, INTERNAL=691, 
		QUARTER=692, MONTH=693, DAY=694, HOUR=695, MINUTE=696, WEEK=697, SECOND=698, 
		MICROSECOND=699, TABLES=700, ROUTINE=701, EXECUTE=702, FILE=703, PROCESS=704, 
		RELOAD=705, SHUTDOWN=706, SUPER=707, PRIVILEGES=708, APPLICATION_PASSWORD_ADMIN=709, 
		AUDIT_ADMIN=710, BACKUP_ADMIN=711, BINLOG_ADMIN=712, BINLOG_ENCRYPTION_ADMIN=713, 
		CLONE_ADMIN=714, CONNECTION_ADMIN=715, ENCRYPTION_KEY_ADMIN=716, FIREWALL_ADMIN=717, 
		FIREWALL_USER=718, FLUSH_OPTIMIZER_COSTS=719, FLUSH_STATUS=720, FLUSH_TABLES=721, 
		FLUSH_USER_RESOURCES=722, GROUP_REPLICATION_ADMIN=723, INNODB_REDO_LOG_ARCHIVE=724, 
		INNODB_REDO_LOG_ENABLE=725, NDB_STORED_USER=726, PERSIST_RO_VARIABLES_ADMIN=727, 
		REPLICATION_APPLIER=728, REPLICATION_SLAVE_ADMIN=729, RESOURCE_GROUP_ADMIN=730, 
		RESOURCE_GROUP_USER=731, ROLE_ADMIN=732, SERVICE_CONNECTION_ADMIN=733, 
		SESSION_VARIABLES_ADMIN=734, SET_USER_ID=735, SHOW_ROUTINE=736, SYSTEM_VARIABLES_ADMIN=737, 
		TABLE_ENCRYPTION_ADMIN=738, VERSION_TOKEN_ADMIN=739, XA_RECOVER_ADMIN=740, 
		ARMSCII8=741, ASCII=742, BIG5=743, CP1250=744, CP1251=745, CP1256=746, 
		CP1257=747, CP850=748, CP852=749, CP866=750, CP932=751, DEC8=752, EUCJPMS=753, 
		EUCKR=754, GB18030=755, GB2312=756, GBK=757, GEOSTD8=758, GREEK=759, HEBREW=760, 
		HP8=761, KEYBCS2=762, KOI8R=763, KOI8U=764, LATIN1=765, LATIN2=766, LATIN5=767, 
		LATIN7=768, MACCE=769, MACROMAN=770, SJIS=771, SWE7=772, TIS620=773, UCS2=774, 
		UJIS=775, UTF16=776, UTF16LE=777, UTF32=778, UTF8=779, UTF8MB3=780, UTF8MB4=781, 
		ARCHIVE=782, BLACKHOLE=783, CSV=784, FEDERATED=785, INNODB=786, MEMORY=787, 
		MRG_MYISAM=788, MYISAM=789, NDB=790, NDBCLUSTER=791, PERFORMANCE_SCHEMA=792, 
		TOKUDB=793, REPEATABLE=794, COMMITTED=795, UNCOMMITTED=796, SERIALIZABLE=797, 
		GEOMETRYCOLLECTION=798, GEOMCOLLECTION=799, GEOMETRY=800, LINESTRING=801, 
		MULTILINESTRING=802, MULTIPOINT=803, MULTIPOLYGON=804, POINT=805, POLYGON=806, 
		ABS=807, ACOS=808, ADDDATE=809, ADDTIME=810, AES_DECRYPT=811, AES_ENCRYPT=812, 
		AREA=813, ASBINARY=814, ASIN=815, ASTEXT=816, ASWKB=817, ASWKT=818, ASYMMETRIC_DECRYPT=819, 
		ASYMMETRIC_DERIVE=820, ASYMMETRIC_ENCRYPT=821, ASYMMETRIC_SIGN=822, ASYMMETRIC_VERIFY=823, 
		ATAN=824, ATAN2=825, BENCHMARK=826, BIN=827, BIT_COUNT=828, BIT_LENGTH=829, 
		BUFFER=830, CATALOG_NAME=831, CEIL=832, CEILING=833, CENTROID=834, CHARACTER_LENGTH=835, 
		CHARSET=836, CHAR_LENGTH=837, COERCIBILITY=838, COLLATION=839, COMPRESS=840, 
		CONCAT=841, CONCAT_WS=842, CONNECTION_ID=843, CONV=844, CONVERT_TZ=845, 
		COS=846, COT=847, CRC32=848, CREATE_ASYMMETRIC_PRIV_KEY=849, CREATE_ASYMMETRIC_PUB_KEY=850, 
		CREATE_DH_PARAMETERS=851, CREATE_DIGEST=852, CROSSES=853, DATEDIFF=854, 
		DATE_FORMAT=855, DAYNAME=856, DAYOFMONTH=857, DAYOFWEEK=858, DAYOFYEAR=859, 
		DECODE=860, DEGREES=861, DES_DECRYPT=862, DES_ENCRYPT=863, DIMENSION=864, 
		DISJOINT=865, ELT=866, ENCODE=867, ENCRYPT=868, ENDPOINT=869, ENVELOPE=870, 
		EQUALS=871, EXP=872, EXPORT_SET=873, EXTERIORRING=874, EXTRACTVALUE=875, 
		FIELD=876, FIND_IN_SET=877, FLOOR=878, FORMAT=879, FOUND_ROWS=880, FROM_BASE64=881, 
		FROM_DAYS=882, FROM_UNIXTIME=883, GEOMCOLLFROMTEXT=884, GEOMCOLLFROMWKB=885, 
		GEOMETRYCOLLECTIONFROMTEXT=886, GEOMETRYCOLLECTIONFROMWKB=887, GEOMETRYFROMTEXT=888, 
		GEOMETRYFROMWKB=889, GEOMETRYN=890, GEOMETRYTYPE=891, GEOMFROMTEXT=892, 
		GEOMFROMWKB=893, GET_FORMAT=894, GET_LOCK=895, GLENGTH=896, GREATEST=897, 
		GTID_SUBSET=898, GTID_SUBTRACT=899, HEX=900, IFNULL=901, INET6_ATON=902, 
		INET6_NTOA=903, INET_ATON=904, INET_NTOA=905, INSTR=906, INTERIORRINGN=907, 
		INTERSECTS=908, ISCLOSED=909, ISEMPTY=910, ISNULL=911, ISSIMPLE=912, IS_FREE_LOCK=913, 
		IS_IPV4=914, IS_IPV4_COMPAT=915, IS_IPV4_MAPPED=916, IS_IPV6=917, IS_USED_LOCK=918, 
		LAST_INSERT_ID=919, LCASE=920, LEAST=921, LENGTH=922, LINEFROMTEXT=923, 
		LINEFROMWKB=924, LINESTRINGFROMTEXT=925, LINESTRINGFROMWKB=926, LN=927, 
		LOAD_FILE=928, LOCATE=929, LOG=930, LOG10=931, LOG2=932, LOWER=933, LPAD=934, 
		LTRIM=935, MAKEDATE=936, MAKETIME=937, MAKE_SET=938, MASTER_POS_WAIT=939, 
		MBRCONTAINS=940, MBRDISJOINT=941, MBREQUAL=942, MBRINTERSECTS=943, MBROVERLAPS=944, 
		MBRTOUCHES=945, MBRWITHIN=946, MD5=947, MLINEFROMTEXT=948, MLINEFROMWKB=949, 
		MONTHNAME=950, MPOINTFROMTEXT=951, MPOINTFROMWKB=952, MPOLYFROMTEXT=953, 
		MPOLYFROMWKB=954, MULTILINESTRINGFROMTEXT=955, MULTILINESTRINGFROMWKB=956, 
		MULTIPOINTFROMTEXT=957, MULTIPOINTFROMWKB=958, MULTIPOLYGONFROMTEXT=959, 
		MULTIPOLYGONFROMWKB=960, NAME_CONST=961, NULLIF=962, NUMGEOMETRIES=963, 
		NUMINTERIORRINGS=964, NUMPOINTS=965, OCT=966, OCTET_LENGTH=967, ORD=968, 
		OVERLAPS=969, PERIOD_ADD=970, PERIOD_DIFF=971, PI=972, POINTFROMTEXT=973, 
		POINTFROMWKB=974, POINTN=975, POLYFROMTEXT=976, POLYFROMWKB=977, POLYGONFROMTEXT=978, 
		POLYGONFROMWKB=979, POW=980, POWER=981, QUOTE=982, RADIANS=983, RAND=984, 
		RANDOM_BYTES=985, RELEASE_LOCK=986, REVERSE=987, ROUND=988, ROW_COUNT=989, 
		RPAD=990, RTRIM=991, SEC_TO_TIME=992, SESSION_USER=993, SHA=994, SHA1=995, 
		SHA2=996, SCHEMA_NAME=997, SIGN=998, SIN=999, SLEEP=1000, SOUNDEX=1001, 
		SQL_THREAD_WAIT_AFTER_GTIDS=1002, SQRT=1003, SRID=1004, STARTPOINT=1005, 
		STRCMP=1006, STR_TO_DATE=1007, ST_AREA=1008, ST_ASBINARY=1009, ST_ASTEXT=1010, 
		ST_ASWKB=1011, ST_ASWKT=1012, ST_BUFFER=1013, ST_CENTROID=1014, ST_CONTAINS=1015, 
		ST_CROSSES=1016, ST_DIFFERENCE=1017, ST_DIMENSION=1018, ST_DISJOINT=1019, 
		ST_DISTANCE=1020, ST_ENDPOINT=1021, ST_ENVELOPE=1022, ST_EQUALS=1023, 
		ST_EXTERIORRING=1024, ST_GEOMCOLLFROMTEXT=1025, ST_GEOMCOLLFROMTXT=1026, 
		ST_GEOMCOLLFROMWKB=1027, ST_GEOMETRYCOLLECTIONFROMTEXT=1028, ST_GEOMETRYCOLLECTIONFROMWKB=1029, 
		ST_GEOMETRYFROMTEXT=1030, ST_GEOMETRYFROMWKB=1031, ST_GEOMETRYN=1032, 
		ST_GEOMETRYTYPE=1033, ST_GEOMFROMTEXT=1034, ST_GEOMFROMWKB=1035, ST_INTERIORRINGN=1036, 
		ST_INTERSECTION=1037, ST_INTERSECTS=1038, ST_ISCLOSED=1039, ST_ISEMPTY=1040, 
		ST_ISSIMPLE=1041, ST_LINEFROMTEXT=1042, ST_LINEFROMWKB=1043, ST_LINESTRINGFROMTEXT=1044, 
		ST_LINESTRINGFROMWKB=1045, ST_NUMGEOMETRIES=1046, ST_NUMINTERIORRING=1047, 
		ST_NUMINTERIORRINGS=1048, ST_NUMPOINTS=1049, ST_OVERLAPS=1050, ST_POINTFROMTEXT=1051, 
		ST_POINTFROMWKB=1052, ST_POINTN=1053, ST_POLYFROMTEXT=1054, ST_POLYFROMWKB=1055, 
		ST_POLYGONFROMTEXT=1056, ST_POLYGONFROMWKB=1057, ST_SRID=1058, ST_STARTPOINT=1059, 
		ST_SYMDIFFERENCE=1060, ST_TOUCHES=1061, ST_UNION=1062, ST_WITHIN=1063, 
		ST_X=1064, ST_Y=1065, SUBDATE=1066, SUBSTRING_INDEX=1067, SUBTIME=1068, 
		SYSTEM_USER=1069, TAN=1070, TIMEDIFF=1071, TIMESTAMPADD=1072, TIMESTAMPDIFF=1073, 
		TIME_FORMAT=1074, TIME_TO_SEC=1075, TOUCHES=1076, TO_BASE64=1077, TO_DAYS=1078, 
		TO_SECONDS=1079, UCASE=1080, UNCOMPRESS=1081, UNCOMPRESSED_LENGTH=1082, 
		UNHEX=1083, UNIX_TIMESTAMP=1084, UPDATEXML=1085, UPPER=1086, UUID=1087, 
		UUID_SHORT=1088, VALIDATE_PASSWORD_STRENGTH=1089, VERSION=1090, WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=1091, 
		WEEKDAY=1092, WEEKOFYEAR=1093, WEIGHT_STRING=1094, WITHIN=1095, YEARWEEK=1096, 
		Y_FUNCTION=1097, X_FUNCTION=1098, VAR_ASSIGN=1099, PLUS_ASSIGN=1100, MINUS_ASSIGN=1101, 
		MULT_ASSIGN=1102, DIV_ASSIGN=1103, MOD_ASSIGN=1104, AND_ASSIGN=1105, XOR_ASSIGN=1106, 
		OR_ASSIGN=1107, STAR=1108, DIVIDE=1109, MODULE=1110, PLUS=1111, MINUS=1112, 
		DIV=1113, MOD=1114, EQUAL_SYMBOL=1115, GREATER_SYMBOL=1116, LESS_SYMBOL=1117, 
		EXCLAMATION_SYMBOL=1118, BIT_NOT_OP=1119, BIT_OR_OP=1120, BIT_AND_OP=1121, 
		BIT_XOR_OP=1122, DOT=1123, LR_BRACKET=1124, RR_BRACKET=1125, COMMA=1126, 
		SEMI=1127, AT_SIGN=1128, ZERO_DECIMAL=1129, ONE_DECIMAL=1130, TWO_DECIMAL=1131, 
		SINGLE_QUOTE_SYMB=1132, DOUBLE_QUOTE_SYMB=1133, REVERSE_QUOTE_SYMB=1134, 
		COLON_SYMB=1135, CHARSET_REVERSE_QOUTE_STRING=1136, FILESIZE_LITERAL=1137, 
		START_NATIONAL_STRING_LITERAL=1138, STRING_LITERAL=1139, DECIMAL_LITERAL=1140, 
		HEXADECIMAL_LITERAL=1141, REAL_LITERAL=1142, NULL_SPEC_LITERAL=1143, BIT_STRING=1144, 
		STRING_CHARSET_NAME=1145, DOT_ID=1146, ID=1147, REVERSE_QUOTE_ID=1148, 
		STRING_USER_NAME=1149, IP_ADDRESS=1150, LOCAL_ID=1151, GLOBAL_ID=1152, 
		ERROR_RECONGNIGION=1153;
	public static final int
		RULE_start = 0, RULE_selectStatement = 1, RULE_querySpecification = 2, 
		RULE_queryOrderSpecification = 3, RULE_multiQueryOrderSpecification = 4, 
		RULE_selectExpression = 5, RULE_selectClause = 6, RULE_selectKeyword = 7, 
		RULE_nothingElement = 8, RULE_nothingKeyword = 9, RULE_selectSpec = 10, 
		RULE_selectElements = 11, RULE_selectElement = 12, RULE_fullId = 13, RULE_uid = 14, 
		RULE_simpleId = 15, RULE_charsetNameBase = 16, RULE_transactionLevelBase = 17, 
		RULE_engineName = 18, RULE_privilegesBase = 19, RULE_intervalTypeBase = 20, 
		RULE_dataTypeBase = 21, RULE_keywordsCanBeId = 22, RULE_functionNameBase = 23, 
		RULE_selectElementDot = 24, RULE_fullColumnName = 25, RULE_dottedId = 26, 
		RULE_selectElementAs = 27, RULE_functionCall = 28, RULE_specificFunction = 29, 
		RULE_leftParen = 30, RULE_rightParen = 31, RULE_expression = 32, RULE_logicalOperator = 33, 
		RULE_predicate = 34, RULE_isKeyword = 35, RULE_expressionDelimiter = 36, 
		RULE_selectModifierExpression = 37, RULE_groupByClause = 38, RULE_groupByKeyword = 39, 
		RULE_groupByItem = 40, RULE_automaticGroupByKeyword = 41, RULE_groupByExpression = 42, 
		RULE_groupByItemDelimiter = 43, RULE_havingClause = 44, RULE_havingKeyword = 45, 
		RULE_windowClause = 46, RULE_windowName = 47, RULE_windowSpec = 48, RULE_partitionClause = 49, 
		RULE_orderByClause = 50, RULE_orderByExpression = 51, RULE_frameClause = 52, 
		RULE_frameUnits = 53, RULE_frameExtent = 54, RULE_frameRange = 55, RULE_frameBetween = 56, 
		RULE_limitClause = 57, RULE_limitClauseAtom = 58, RULE_selectIntoExpression = 59, 
		RULE_assignmentField = 60, RULE_selectFieldsInto = 61, RULE_selectLinesInto = 62, 
		RULE_lockClause = 63, RULE_queryExpression = 64, RULE_querySpecificationNointo = 65, 
		RULE_fromClauseNoJoin = 66, RULE_fromClause = 67, RULE_fromKeyword = 68, 
		RULE_tableKeyword = 69, RULE_tableSources = 70, RULE_tableSourceNoJoin = 71, 
		RULE_tableSource = 72, RULE_tableSourceItem = 73, RULE_subQueryTable = 74, 
		RULE_tableAlias = 75, RULE_tableAliasAs = 76, RULE_tableName = 77, RULE_uidList = 78, 
		RULE_indexHint = 79, RULE_indexHintType = 80, RULE_joinKeyword = 81, RULE_multiJoinExpression = 82, 
		RULE_multiJoinPart = 83, RULE_multiInnerJoin = 84, RULE_multiOuterJoin = 85, 
		RULE_multiNaturalJoin = 86, RULE_withKeyword = 87, RULE_joinPart = 88, 
		RULE_innerJoin = 89, RULE_innerJoinKeyword = 90, RULE_onKeyword = 91, 
		RULE_outerJoin = 92, RULE_joinDirection = 93, RULE_outerJoinKeyword = 94, 
		RULE_naturalJoin = 95, RULE_naturalJoinKeyword = 96, RULE_tableSourceDelimiter = 97, 
		RULE_unionStatement = 98, RULE_queryExpressionNointo = 99, RULE_unionParenthesis = 100, 
		RULE_expressions = 101, RULE_nullNotnull = 102, RULE_comparisonOperator = 103, 
		RULE_expressionAtom = 104, RULE_constant = 105, RULE_stringLiteral = 106, 
		RULE_collationName = 107, RULE_decimalLiteral = 108, RULE_hexadecimalLiteral = 109, 
		RULE_booleanLiteral = 110, RULE_mysqlVariable = 111, RULE_unaryOperator = 112, 
		RULE_intervalType = 113, RULE_bitOperator = 114, RULE_mathOperator = 115, 
		RULE_jsonOperator = 116, RULE_convertedDataType = 117, RULE_lengthOneDimension = 118, 
		RULE_charsetName = 119, RULE_lengthTwoDimension = 120, RULE_caseFuncAlternative = 121, 
		RULE_functionArgs = 122, RULE_levelsInWeightString = 123, RULE_levelInWeightListElement = 124, 
		RULE_defaultValue = 125, RULE_currentTimestamp = 126, RULE_aggregateWindowedFunction = 127, 
		RULE_ofKeyword = 128, RULE_theKeyword = 129, RULE_functionArg = 130, RULE_overClause = 131, 
		RULE_allAggregatorKeyword = 132, RULE_distinctAggregatorKeyword = 133, 
		RULE_nonAggregateWindowedFunction = 134, RULE_scalarFunctionName = 135, 
		RULE_passwordFunctionClause = 136, RULE_selectElementDelimiter = 137, 
		RULE_whereKeyword = 138, RULE_whereExpression = 139, RULE_tableExpressionNoJoin = 140, 
		RULE_tableExpression = 141;
	private static String[] makeRuleNames() {
		return new String[] {
			"start", "selectStatement", "querySpecification", "queryOrderSpecification", 
			"multiQueryOrderSpecification", "selectExpression", "selectClause", "selectKeyword", 
			"nothingElement", "nothingKeyword", "selectSpec", "selectElements", "selectElement", 
			"fullId", "uid", "simpleId", "charsetNameBase", "transactionLevelBase", 
			"engineName", "privilegesBase", "intervalTypeBase", "dataTypeBase", "keywordsCanBeId", 
			"functionNameBase", "selectElementDot", "fullColumnName", "dottedId", 
			"selectElementAs", "functionCall", "specificFunction", "leftParen", "rightParen", 
			"expression", "logicalOperator", "predicate", "isKeyword", "expressionDelimiter", 
			"selectModifierExpression", "groupByClause", "groupByKeyword", "groupByItem", 
			"automaticGroupByKeyword", "groupByExpression", "groupByItemDelimiter", 
			"havingClause", "havingKeyword", "windowClause", "windowName", "windowSpec", 
			"partitionClause", "orderByClause", "orderByExpression", "frameClause", 
			"frameUnits", "frameExtent", "frameRange", "frameBetween", "limitClause", 
			"limitClauseAtom", "selectIntoExpression", "assignmentField", "selectFieldsInto", 
			"selectLinesInto", "lockClause", "queryExpression", "querySpecificationNointo", 
			"fromClauseNoJoin", "fromClause", "fromKeyword", "tableKeyword", "tableSources", 
			"tableSourceNoJoin", "tableSource", "tableSourceItem", "subQueryTable", 
			"tableAlias", "tableAliasAs", "tableName", "uidList", "indexHint", "indexHintType", 
			"joinKeyword", "multiJoinExpression", "multiJoinPart", "multiInnerJoin", 
			"multiOuterJoin", "multiNaturalJoin", "withKeyword", "joinPart", "innerJoin", 
			"innerJoinKeyword", "onKeyword", "outerJoin", "joinDirection", "outerJoinKeyword", 
			"naturalJoin", "naturalJoinKeyword", "tableSourceDelimiter", "unionStatement", 
			"queryExpressionNointo", "unionParenthesis", "expressions", "nullNotnull", 
			"comparisonOperator", "expressionAtom", "constant", "stringLiteral", 
			"collationName", "decimalLiteral", "hexadecimalLiteral", "booleanLiteral", 
			"mysqlVariable", "unaryOperator", "intervalType", "bitOperator", "mathOperator", 
			"jsonOperator", "convertedDataType", "lengthOneDimension", "charsetName", 
			"lengthTwoDimension", "caseFuncAlternative", "functionArgs", "levelsInWeightString", 
			"levelInWeightListElement", "defaultValue", "currentTimestamp", "aggregateWindowedFunction", 
			"ofKeyword", "theKeyword", "functionArg", "overClause", "allAggregatorKeyword", 
			"distinctAggregatorKeyword", "nonAggregateWindowedFunction", "scalarFunctionName", 
			"passwordFunctionClause", "selectElementDelimiter", "whereKeyword", "whereExpression", 
			"tableExpressionNoJoin", "tableExpression"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, "'<EOF>'", "'RETRIEVE'", "'SHOW ME'", "'DISPLAY'", 
			"'PRESENT'", "'FIND'", "'WHAT IS'", "'WHAT ARE'", "'WHAT IS THE'", "'WHAT ARE THE'", 
			"'IN TABLE'", "'IN TABLES'", "'FROM TABLE'", "'FROM TABLES'", "'JOIN TABLE'", 
			"'BY JOINING'", "'BY JOINING TABLE'", "'JOIN WITH'", "'JOIN WITH TABLE'", 
			"'JOINED WITH'", "'JOINED WITH TABLE'", "'BY JOINING WITH TABLE'", "'WITH TABLE'", 
			"'DOT'", "'AND THEN'", "'SUBQUERY'", "'__SCHROD'", "'AUTOMATIC'", "'AUTOMATICALLY'", 
			"'NOTHING'", "'NO COLUMNS'", "'OPEN PARENTHESIS'", "'LEFT PARENTHESIS'", 
			"'CLOSE PARENTHESIS'", "'RIGHT PARENTHESIS'", "'OPEN PAREN'", "'LEFT PAREN'", 
			"'CLOSE PAREN'", "'RIGHT PAREN'", "'THE'", "'ADD'", "'ALL'", "'ALTER'", 
			"'ALWAYS'", "'ANALYZE'", "'AND'", "'ARRAY'", "'AS'", "'ASC'", "'BEFORE'", 
			"'BETWEEN'", "'BOTH'", "'BUCKETS'", "'BY'", "'CALL'", "'CASCADE'", "'CASE'", 
			"'CAST'", "'CHANGE'", "'CHARACTER'", "'CHECK'", "'COLLATE'", "'COLUMN'", 
			"'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", "'CONVERT'", "'CREATE'", 
			"'CROSS'", "'CURRENT'", "'CURRENT_USER'", "'CURSOR'", "'DATABASE'", "'DATABASES'", 
			"'DECLARE'", "'DEFAULT'", "'DELAYED'", "'DELETE'", "'DESC'", "'DESCRIBE'", 
			"'DETERMINISTIC'", "'DIAGNOSTICS'", "'DISTINCT'", "'DISTINCTROW'", "'DROP'", 
			"'EACH'", "'ELSE'", "'ELSEIF'", "'EMPTY'", "'ENCLOSED'", "'ESCAPED'", 
			"'EXCEPT'", "'EXISTS'", "'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'", 
			"'FOR'", "'FORCE'", "'FOREIGN'", "'FROM'", "'FULLTEXT'", "'GENERATED'", 
			"'GET'", "'GRANT'", "'GROUP'", "'HAVING'", "'HIGH_PRIORITY'", "'HISTOGRAM'", 
			"'IF'", "'IGNORE'", "'IN'", "'INDEX'", "'INFILE'", "'INNER'", "'INOUT'", 
			"'INSERT'", "'INTERVAL'", "'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", 
			"'KEYS'", "'KILL'", "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", 
			"'LINEAR'", "'LINES'", "'LOAD'", "'LOCK'", "'LOOP'", "'LOW_PRIORITY'", 
			"'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", "'MATCH'", "'MAXVALUE'", 
			"'MODIFIES'", "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", "'NULL'", 
			"'NUMBER'", "'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONALLY'", "'OR'", 
			"'ORDER'", "'OUT'", "'OVER'", "'OUTER'", "'OUTFILE'", "'PARTITION'", 
			"'PRIMARY'", "'PROCEDURE'", "'PURGE'", "'RANGE'", "'READ'", "'READS'", 
			"'REFERENCES'", "'REGEXP'", "'RELEASE'", "'RENAME'", "'REPEAT'", "'REPLACE'", 
			"'REQUIRE'", "'RESIGNAL'", "'RESTRICT'", "'RETAIN'", "'RETURN'", "'REVOKE'", 
			"'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", "'SELECT'", "'SET'", "'SEPARATOR'", 
			"'SHOW'", "'SIGNAL'", "'SPATIAL'", "'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", 
			"'SQLWARNING'", "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", "'SQL_SMALL_RESULT'", 
			"'SSL'", "'STACKED'", "'STARTING'", "'STRAIGHT_JOIN'", "'TABLE'", "'TERMINATED'", 
			"'THEN'", "'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", "'UNDO'", "'UNION'", 
			"'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", "'USAGE'", "'USE'", 
			"'USING'", "'VALUES'", "'WHEN'", "'WHERE'", "'WHILE'", "'WITH'", "'WRITE'", 
			"'XOR'", "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", "'MEDIUMINT'", "'MIDDLEINT'", 
			"'INT'", "'INT1'", "'INT2'", "'INT3'", "'INT4'", "'INT8'", "'INTEGER'", 
			"'BIGINT'", "'REAL'", "'DOUBLE'", "'PRECISION'", "'FLOAT'", "'FLOAT4'", 
			"'FLOAT8'", "'DECIMAL'", "'DEC'", "'NUMERIC'", "'DATE'", "'TIME'", "'TIMESTAMP'", 
			"'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", "'NVARCHAR'", "'NATIONAL'", 
			"'BINARY'", "'VARBINARY'", "'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONG'", 
			"'LONGBLOB'", "'TINYTEXT'", "'TEXT'", "'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", 
			"'VARYING'", "'SERIAL'", "'YEAR_MONTH'", "'DAY_HOUR'", "'DAY_MINUTE'", 
			"'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", "'MINUTE_SECOND'", 
			"'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", 
			"'DAY_MICROSECOND'", "'JSON_ARRAY'", "'JSON_OBJECT'", "'JSON_QUOTE'", 
			"'JSON_CONTAINS'", "'JSON_CONTAINS_PATH'", "'JSON_EXTRACT'", "'JSON_KEYS'", 
			"'JSON_OVERLAPS'", "'JSON_SEARCH'", "'JSON_VALUE'", "'JSON_ARRAY_APPEND'", 
			"'JSON_ARRAY_INSERT'", "'JSON_INSERT'", "'JSON_MERGE'", "'JSON_MERGE_PATCH'", 
			"'JSON_MERGE_PRESERVE'", "'JSON_REMOVE'", "'JSON_REPLACE'", "'JSON_SET'", 
			"'JSON_UNQUOTE'", "'JSON_DEPTH'", "'JSON_LENGTH'", "'JSON_TYPE'", "'JSON_VALID'", 
			"'JSON_TABLE'", "'JSON_SCHEMA_VALID'", "'JSON_SCHEMA_VALIDATION_REPORT'", 
			"'JSON_PRETTY'", "'JSON_STORAGE_FREE'", "'JSON_STORAGE_SIZE'", "'JSON_ARRAYAGG'", 
			"'JSON_OBJECTAGG'", "'AVG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", 
			"'CUME_DIST'", "'DENSE_RANK'", "'FIRST_VALUE'", "'GROUP_CONCAT'", "'LAG'", 
			"'LAST_VALUE'", "'LEAD'", "'MAX'", "'MIN'", "'NTILE'", "'NTH_VALUE'", 
			"'PERCENT_RANK'", "'RANK'", "'ROW_NUMBER'", "'STD'", "'STDDEV'", "'STDDEV_POP'", 
			"'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", 
			"'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", 
			"'CURTIME'", "'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", 
			"'NOW'", "'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", 
			"'UTC_DATE'", "'UTC_TIME'", "'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", 
			"'AFTER'", "'AGGREGATE'", "'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", 
			"'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", "'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", 
			"'BEGIN'", "'BINLOG'", "'BIT'", "'BLOCK'", "'BOOL'", "'BOOLEAN'", "'BTREE'", 
			"'CACHE'", "'CASCADED'", "'CHAIN'", "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", 
			"'PAGE_CHECKSUM'", "'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", "'CLOSE'", 
			"'COALESCE'", "'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", "'COLUMN_NAME'", 
			"'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPLETION'", "'COMPRESSED'", 
			"'COMPRESSION'", "'CONCURRENT'", "'CONNECT'", "'CONNECTION'", "'CONSISTENT'", 
			"'CONSTRAINT_CATALOG'", "'CONSTRAINT_SCHEMA'", "'CONSTRAINT_NAME'", "'CONTAINS'", 
			"'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", "'CPU'", "'CURSOR_NAME'", "'DATA'", 
			"'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", "'DEFINER'", "'DELAY_KEY_WRITE'", 
			"'DES_KEY_FILE'", "'DIRECTORY'", "'DISABLE'", "'DISCARD'", "'DISK'", 
			"'DO'", "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", "'ENCRYPTION'", 
			"'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", "'ERROR'", "'ERRORS'", "'ESCAPE'", 
			"'EVEN'", "'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", "'EXCLUSIVE'", 
			"'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", "'FAST'", "'FAULTS'", 
			"'FIELDS'", "'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", 
			"'FOLLOWING'", "'FOLLOWS'", "'FOUND'", "'FULL'", "'FUNCTION'", "'GENERAL'", 
			"'GLOBAL'", "'GRANTS'", "'GROUP_REPLICATION'", "'HANDLER'", "'HASH'", 
			"'HELP'", "'HOST'", "'HOSTS'", "'IDENTIFIED'", "'IGNORE_SERVER_IDS'", 
			"'IMPORT'", "'INDEXES'", "'INITIAL_SIZE'", "'INPLACE'", "'INSERT_METHOD'", 
			"'INSTALL'", "'INSTANCE'", "'INVISIBLE'", "'INVOKER'", "'IO'", "'IO_THREAD'", 
			"'IPC'", "'ISOLATION'", "'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", 
			"'LAST'", "'LEAVES'", "'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'", "'LOGFILE'", 
			"'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", 
			"'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", "'MASTER_LOG_FILE'", 
			"'MASTER_LOG_POS'", "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", 
			"'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", 
			"'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", 
			"'MASTER_TLS_VERSION'", "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", 
			"'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", 
			"'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MEMBER'", "'MERGE'", "'MESSAGE_TEXT'", 
			"'MID'", "'MIGRATE'", "'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", 
			"'MYSQL'", "'MYSQL_ERRNO'", "'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", 
			"'NEXT'", "'NO'", "'NODEGROUP'", "'NONE'", "'ODBC'", "'OFFLINE'", "'OFFSET'", 
			"'OF'", "'OJ'", "'OLD_PASSWORD'", "'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", 
			"'OPTIMIZER_COSTS'", "'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'", 
			"'PARSER'", "'PARTIAL'", "'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'", 
			"'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", "'PRECEDES'", 
			"'PRECEDING'", "'PREPARE'", "'PRESERVE'", "'PREV'", "'PROCESSLIST'", 
			"'PROFILE'", "'PROFILES'", "'PROXY'", "'QUERY'", "'QUICK'", "'REBUILD'", 
			"'RECOVER'", "'REDO_BUFFER_SIZE'", "'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", 
			"'RELAY_LOG_POS'", "'RELAYLOG'", "'REMOVE'", "'REORGANIZE'", "'REPAIR'", 
			"'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", "'REPLICATE_IGNORE_DB'", 
			"'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", "'REPLICATE_WILD_DO_TABLE'", 
			"'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", "'RESET'", "'RESUME'", 
			"'RETURNED_SQLSTATE'", "'RETURNING'", "'RETURNS'", "'ROLE'", "'ROLLBACK'", 
			"'ROLLUP'", "'ROTATE'", "'ROW'", "'ROWS'", "'ROW_FORMAT'", "'SAVEPOINT'", 
			"'SCHEDULE'", "'SECURITY'", "'SERVER'", "'SESSION'", "'SHARE'", "'SHARED'", 
			"'SIGNED'", "'SIMPLE'", "'SLAVE'", "'SLOW'", "'SNAPSHOT'", "'SOCKET'", 
			"'SOME'", "'SONAME'", "'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", 
			"'SQL_BEFORE_GTIDS'", "'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", 
			"'SQL_THREAD'", "'START'", "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", 
			"'STATS_SAMPLE_PAGES'", "'STATUS'", "'STOP'", "'STORAGE'", "'STORED'", 
			"'STRING'", "'SUBCLASS_ORIGIN'", "'SUBJECT'", "'SUBPARTITION'", "'SUBPARTITIONS'", 
			"'SUSPEND'", "'SWAPS'", "'SWITCHES'", "'TABLE_NAME'", "'TABLESPACE'", 
			"'TABLE_TYPE'", "'TEMPORARY'", "'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", 
			"'TRANSACTION'", "'TRANSACTIONAL'", "'TRIGGERS'", "'TRUNCATE'", "'UNBOUNDED'", 
			"'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", "'UNINSTALL'", "'UNKNOWN'", 
			"'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'", "'USER_RESOURCES'", "'VALIDATION'", 
			"'VALUE'", "'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'VISIBLE'", "'WAIT'", 
			"'WARNINGS'", "'WINDOW'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", 
			"'XA'", "'XML'", "'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", "'QUARTER'", 
			"'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", "'MICROSECOND'", 
			"'TABLES'", "'ROUTINE'", "'EXECUTE'", "'FILE'", "'PROCESS'", "'RELOAD'", 
			"'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", "'APPLICATION_PASSWORD_ADMIN'", 
			"'AUDIT_ADMIN'", "'BACKUP_ADMIN'", "'BINLOG_ADMIN'", "'BINLOG_ENCRYPTION_ADMIN'", 
			"'CLONE_ADMIN'", "'CONNECTION_ADMIN'", "'ENCRYPTION_KEY_ADMIN'", "'FIREWALL_ADMIN'", 
			"'FIREWALL_USER'", "'FLUSH_OPTIMIZER_COSTS'", "'FLUSH_STATUS'", "'FLUSH_TABLES'", 
			"'FLUSH_USER_RESOURCES'", "'GROUP_REPLICATION_ADMIN'", "'INNODB_REDO_LOG_ARCHIVE'", 
			"'INNODB_REDO_LOG_ENABLE'", "'NDB_STORED_USER'", "'PERSIST_RO_VARIABLES_ADMIN'", 
			"'REPLICATION_APPLIER'", "'REPLICATION_SLAVE_ADMIN'", "'RESOURCE_GROUP_ADMIN'", 
			"'RESOURCE_GROUP_USER'", "'ROLE_ADMIN'", "'SERVICE_CONNECTION_ADMIN'", 
			null, "'SET_USER_ID'", "'SHOW_ROUTINE'", "'SYSTEM_VARIABLES_ADMIN'", 
			"'TABLE_ENCRYPTION_ADMIN'", "'VERSION_TOKEN_ADMIN'", "'XA_RECOVER_ADMIN'", 
			"'ARMSCII8'", "'ASCII'", "'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", 
			"'CP1257'", "'CP850'", "'CP852'", "'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", 
			"'EUCKR'", "'GB18030'", "'GB2312'", "'GBK'", "'GEOSTD8'", "'GREEK'", 
			"'HEBREW'", "'HP8'", "'KEYBCS2'", "'KOI8R'", "'KOI8U'", "'LATIN1'", "'LATIN2'", 
			"'LATIN5'", "'LATIN7'", "'MACCE'", "'MACROMAN'", "'SJIS'", "'SWE7'", 
			"'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", "'UTF16LE'", "'UTF32'", "'UTF8'", 
			"'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", "'BLACKHOLE'", "'CSV'", "'FEDERATED'", 
			"'INNODB'", "'MEMORY'", "'MRG_MYISAM'", "'MYISAM'", "'NDB'", "'NDBCLUSTER'", 
			"'PERFORMANCE_SCHEMA'", "'TOKUDB'", "'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", 
			"'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", "'GEOMCOLLECTION'", "'GEOMETRY'", 
			"'LINESTRING'", "'MULTILINESTRING'", "'MULTIPOINT'", "'MULTIPOLYGON'", 
			"'POINT'", "'POLYGON'", "'ABS'", "'ACOS'", "'ADDDATE'", "'ADDTIME'", 
			"'AES_DECRYPT'", "'AES_ENCRYPT'", "'AREA'", "'ASBINARY'", "'ASIN'", "'ASTEXT'", 
			"'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", "'ASYMMETRIC_DERIVE'", 
			"'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", "'ATAN'", 
			"'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", "'BUFFER'", 
			"'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
			"'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", 
			"'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
			"'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
			"'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
			"'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
			"'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
			"'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENVELOPE'", 
			"'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'", 
			"'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'", 
			"'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'", 
			"'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", 
			"'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", "'GEOMFROMTEXT'", 
			"'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", 
			"'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", 
			"'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", "'INTERIORRINGN'", 
			"'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", 
			"'IS_FREE_LOCK'", "'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", 
			"'IS_IPV6'", "'IS_USED_LOCK'", "'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", 
			"'LENGTH'", "'LINEFROMTEXT'", "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", 
			"'LINESTRINGFROMWKB'", "'LN'", "'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", 
			"'LOG2'", "'LOWER'", "'LPAD'", "'LTRIM'", "'MAKEDATE'", "'MAKETIME'", 
			"'MAKE_SET'", "'MASTER_POS_WAIT'", "'MBRCONTAINS'", "'MBRDISJOINT'", 
			"'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", "'MBRTOUCHES'", "'MBRWITHIN'", 
			"'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", "'MONTHNAME'", "'MPOINTFROMTEXT'", 
			"'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", 
			"'MULTILINESTRINGFROMWKB'", "'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", 
			"'MULTIPOLYGONFROMTEXT'", "'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", 
			"'NUMGEOMETRIES'", "'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", 
			"'ORD'", "'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
			"'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
			"'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
			"'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
			"'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SESSION_USER'", "'SHA'", "'SHA1'", 
			"'SHA2'", "'SCHEMA_NAME'", "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'", 
			"'SQL_THREAD_WAIT_AFTER_GTIDS'", "'SQRT'", "'SRID'", "'STARTPOINT'", 
			"'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", "'ST_ASBINARY'", "'ST_ASTEXT'", 
			"'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", "'ST_CONTAINS'", 
			"'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", "'ST_DISJOINT'", 
			"'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", "'ST_EXTERIORRING'", 
			"'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", "'ST_GEOMCOLLFROMWKB'", 
			"'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
			"'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", 
			"'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", 
			"'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", 
			"'ST_LINEFROMTEXT'", "'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
			"'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
			"'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", 
			"'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
			"'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
			"'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
			"'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", 
			"'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
			"'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", 
			"'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", 
			"'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", 
			"'VERSION'", "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", 
			"'WEIGHT_STRING'", "'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", 
			"'-='", "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", 
			"'%'", "'+'", "'-'", "'DIV'", "'MOD'", "'='", "'>'", "'<'", "'!'", "'~'", 
			"'|'", "'&'", "'^'", "'.'", "'('", "')'", "','", "';'", "'@'", "'0'", 
			"'1'", "'2'", "'''", "'\"'", "'`'", "':'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
			"END_OF_FILE", "RETRIEVE", "SHOW_ME", "DISPLAY", "PRESENT", "FIND", "WHAT_IS", 
			"WHAT_ARE", "WHAT_IS_THE", "WHAT_ARE_THE", "IN_TABLE", "IN_TABLES", "FROM_TABLE", 
			"FROM_TABLES", "JOIN_TABLE", "BY_JOINING", "BY_JOINING_TABLE", "JOIN_WITH", 
			"JOIN_WITH_TABLE", "JOINED_WITH", "JOINED_WITH_TABLE", "BY_JOINING_WITH_TABLE", 
			"WITH_TABLE", "SPOKEN_DOT", "AND_THEN", "SUBQUERY", "SCHRODINGER", "AUTOMATIC", 
			"AUTOMATICALLY", "NOTHING", "NO_COLUMNS", "OPEN_PARENTHESIS", "LEFT_PARENTHESIS", 
			"CLOSE_PARENTHESIS", "RIGHT_PARENTHESIS", "OPEN_PAREN", "LEFT_PAREN", 
			"CLOSE_PAREN", "RIGHT_PAREN", "THE", "ADD", "ALL", "ALTER", "ALWAYS", 
			"ANALYZE", "AND", "ARRAY", "AS", "ASC", "BEFORE", "BETWEEN", "BOTH", 
			"BUCKETS", "BY", "CALL", "CASCADE", "CASE", "CAST", "CHANGE", "CHARACTER", 
			"CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", "CONTINUE", 
			"CONVERT", "CREATE", "CROSS", "CURRENT", "CURRENT_USER", "CURSOR", "DATABASE", 
			"DATABASES", "DECLARE", "DEFAULT", "DELAYED", "DELETE", "DESC", "DESCRIBE", 
			"DETERMINISTIC", "DIAGNOSTICS", "DISTINCT", "DISTINCTROW", "DROP", "EACH", 
			"ELSE", "ELSEIF", "EMPTY", "ENCLOSED", "ESCAPED", "EXCEPT", "EXISTS", 
			"EXIT", "EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN", "FROM", 
			"FULLTEXT", "GENERATED", "GET", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", 
			"HISTOGRAM", "IF", "IGNORE", "IN", "INDEX", "INFILE", "INNER", "INOUT", 
			"INSERT", "INTERVAL", "INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", 
			"KILL", "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", 
			"LOAD", "LOCK", "LOOP", "LOW_PRIORITY", "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", 
			"MATCH", "MAXVALUE", "MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", 
			"NULL_LITERAL", "NUMBER", "ON", "OPTIMIZE", "OPTION", "OPTIONALLY", "OR", 
			"ORDER", "OUT", "OVER", "OUTER", "OUTFILE", "PARTITION", "PRIMARY", "PROCEDURE", 
			"PURGE", "RANGE", "READ", "READS", "REFERENCES", "REGEXP", "RELEASE", 
			"RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", "RESTRICT", "RETAIN", 
			"RETURN", "REVOKE", "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", "SELECT", 
			"SET", "SEPARATOR", "SHOW", "SIGNAL", "SPATIAL", "SQL", "SQLEXCEPTION", 
			"SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", 
			"SSL", "STACKED", "STARTING", "STRAIGHT_JOIN", "TABLE", "TERMINATED", 
			"THEN", "TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", 
			"UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", "USING", "VALUES", "WHEN", 
			"WHERE", "WHILE", "WITH", "WRITE", "XOR", "ZEROFILL", "TINYINT", "SMALLINT", 
			"MEDIUMINT", "MIDDLEINT", "INT", "INT1", "INT2", "INT3", "INT4", "INT8", 
			"INTEGER", "BIGINT", "REAL", "DOUBLE", "PRECISION", "FLOAT", "FLOAT4", 
			"FLOAT8", "DECIMAL", "DEC", "NUMERIC", "DATE", "TIME", "TIMESTAMP", "DATETIME", 
			"YEAR", "CHAR", "VARCHAR", "NVARCHAR", "NATIONAL", "BINARY", "VARBINARY", 
			"TINYBLOB", "BLOB", "MEDIUMBLOB", "LONG", "LONGBLOB", "TINYTEXT", "TEXT", 
			"MEDIUMTEXT", "LONGTEXT", "ENUM", "VARYING", "SERIAL", "YEAR_MONTH", 
			"DAY_HOUR", "DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", 
			"MINUTE_SECOND", "SECOND_MICROSECOND", "MINUTE_MICROSECOND", "HOUR_MICROSECOND", 
			"DAY_MICROSECOND", "JSON_ARRAY", "JSON_OBJECT", "JSON_QUOTE", "JSON_CONTAINS", 
			"JSON_CONTAINS_PATH", "JSON_EXTRACT", "JSON_KEYS", "JSON_OVERLAPS", "JSON_SEARCH", 
			"JSON_VALUE", "JSON_ARRAY_APPEND", "JSON_ARRAY_INSERT", "JSON_INSERT", 
			"JSON_MERGE", "JSON_MERGE_PATCH", "JSON_MERGE_PRESERVE", "JSON_REMOVE", 
			"JSON_REPLACE", "JSON_SET", "JSON_UNQUOTE", "JSON_DEPTH", "JSON_LENGTH", 
			"JSON_TYPE", "JSON_VALID", "JSON_TABLE", "JSON_SCHEMA_VALID", "JSON_SCHEMA_VALIDATION_REPORT", 
			"JSON_PRETTY", "JSON_STORAGE_FREE", "JSON_STORAGE_SIZE", "JSON_ARRAYAGG", 
			"JSON_OBJECTAGG", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "COUNT", "CUME_DIST", 
			"DENSE_RANK", "FIRST_VALUE", "GROUP_CONCAT", "LAG", "LAST_VALUE", "LEAD", 
			"MAX", "MIN", "NTILE", "NTH_VALUE", "PERCENT_RANK", "RANK", "ROW_NUMBER", 
			"STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", 
			"VARIANCE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", 
			"CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", "LOCALTIMESTAMP", 
			"NOW", "POSITION", "SUBSTR", "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", 
			"UTC_TIME", "UTC_TIMESTAMP", "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", 
			"ALGORITHM", "ANY", "AT", "AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", 
			"AUTO_INCREMENT", "AVG_ROW_LENGTH", "BEGIN", "BINLOG", "BIT", "BLOCK", 
			"BOOL", "BOOLEAN", "BTREE", "CACHE", "CASCADED", "CHAIN", "CHANGED", 
			"CHANNEL", "CHECKSUM", "PAGE_CHECKSUM", "CIPHER", "CLASS_ORIGIN", "CLIENT", 
			"CLOSE", "COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", "COLUMN_NAME", 
			"COMMENT", "COMMIT", "COMPACT", "COMPLETION", "COMPRESSED", "COMPRESSION", 
			"CONCURRENT", "CONNECT", "CONNECTION", "CONSISTENT", "CONSTRAINT_CATALOG", 
			"CONSTRAINT_SCHEMA", "CONSTRAINT_NAME", "CONTAINS", "CONTEXT", "CONTRIBUTORS", 
			"COPY", "CPU", "CURSOR_NAME", "DATA", "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", 
			"DEFINER", "DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", "DISABLE", 
			"DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", "DYNAMIC", "ENABLE", 
			"ENCRYPTION", "END", "ENDS", "ENGINE", "ENGINES", "ERROR", "ERRORS", 
			"ESCAPE", "EVEN", "EVENT", "EVENTS", "EVERY", "EXCHANGE", "EXCLUSIVE", 
			"EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", "FAST", "FAULTS", "FIELDS", 
			"FILE_BLOCK_SIZE", "FILTER", "FIRST", "FIXED", "FLUSH", "FOLLOWING", 
			"FOLLOWS", "FOUND", "FULL", "FUNCTION", "GENERAL", "GLOBAL", "GRANTS", 
			"GROUP_REPLICATION", "HANDLER", "HASH", "HELP", "HOST", "HOSTS", "IDENTIFIED", 
			"IGNORE_SERVER_IDS", "IMPORT", "INDEXES", "INITIAL_SIZE", "INPLACE", 
			"INSERT_METHOD", "INSTALL", "INSTANCE", "INVISIBLE", "INVOKER", "IO", 
			"IO_THREAD", "IPC", "ISOLATION", "ISSUER", "JSON", "KEY_BLOCK_SIZE", 
			"LANGUAGE", "LAST", "LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", "LOGFILE", 
			"LOGS", "MASTER", "MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", "MASTER_DELAY", 
			"MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", 
			"MASTER_PASSWORD", "MASTER_PORT", "MASTER_RETRY_COUNT", "MASTER_SSL", 
			"MASTER_SSL_CA", "MASTER_SSL_CAPATH", "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", 
			"MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", "MASTER_SSL_KEY", "MASTER_TLS_VERSION", 
			"MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS", 
			"MAX_SIZE", "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS", "MEDIUM", 
			"MEMBER", "MERGE", "MESSAGE_TEXT", "MID", "MIGRATE", "MIN_ROWS", "MODE", 
			"MODIFY", "MUTEX", "MYSQL", "MYSQL_ERRNO", "NAME", "NAMES", "NCHAR", 
			"NEVER", "NEXT", "NO", "NODEGROUP", "NONE", "ODBC", "OFFLINE", "OFFSET", 
			"OF", "OJ", "OLD_PASSWORD", "ONE", "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", 
			"OPTIONS", "OWNER", "PACK_KEYS", "PAGE", "PARSER", "PARTIAL", "PARTITIONING", 
			"PARTITIONS", "PASSWORD", "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", 
			"PORT", "PRECEDES", "PRECEDING", "PREPARE", "PRESERVE", "PREV", "PROCESSLIST", 
			"PROFILE", "PROFILES", "PROXY", "QUERY", "QUICK", "REBUILD", "RECOVER", 
			"REDO_BUFFER_SIZE", "REDUNDANT", "RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", 
			"RELAYLOG", "REMOVE", "REORGANIZE", "REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", 
			"REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", 
			"REPLICATE_WILD_DO_TABLE", "REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", 
			"RESET", "RESUME", "RETURNED_SQLSTATE", "RETURNING", "RETURNS", "ROLE", 
			"ROLLBACK", "ROLLUP", "ROTATE", "ROW", "ROWS", "ROW_FORMAT", "SAVEPOINT", 
			"SCHEDULE", "SECURITY", "SERVER", "SESSION", "SHARE", "SHARED", "SIGNED", 
			"SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS", 
			"SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", 
			"SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", "SQL_THREAD", "START", 
			"STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", 
			"STATUS", "STOP", "STORAGE", "STORED", "STRING", "SUBCLASS_ORIGIN", "SUBJECT", 
			"SUBPARTITION", "SUBPARTITIONS", "SUSPEND", "SWAPS", "SWITCHES", "TABLE_NAME", 
			"TABLESPACE", "TABLE_TYPE", "TEMPORARY", "TEMPTABLE", "THAN", "TRADITIONAL", 
			"TRANSACTION", "TRANSACTIONAL", "TRIGGERS", "TRUNCATE", "UNBOUNDED", 
			"UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL", "UNKNOWN", 
			"UNTIL", "UPGRADE", "USER", "USE_FRM", "USER_RESOURCES", "VALIDATION", 
			"VALUE", "VARIABLES", "VIEW", "VIRTUAL", "VISIBLE", "WAIT", "WARNINGS", 
			"WINDOW", "WITHOUT", "WORK", "WRAPPER", "X509", "XA", "XML", "EUR", "USA", 
			"JIS", "ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", "HOUR", "MINUTE", 
			"WEEK", "SECOND", "MICROSECOND", "TABLES", "ROUTINE", "EXECUTE", "FILE", 
			"PROCESS", "RELOAD", "SHUTDOWN", "SUPER", "PRIVILEGES", "APPLICATION_PASSWORD_ADMIN", 
			"AUDIT_ADMIN", "BACKUP_ADMIN", "BINLOG_ADMIN", "BINLOG_ENCRYPTION_ADMIN", 
			"CLONE_ADMIN", "CONNECTION_ADMIN", "ENCRYPTION_KEY_ADMIN", "FIREWALL_ADMIN", 
			"FIREWALL_USER", "FLUSH_OPTIMIZER_COSTS", "FLUSH_STATUS", "FLUSH_TABLES", 
			"FLUSH_USER_RESOURCES", "GROUP_REPLICATION_ADMIN", "INNODB_REDO_LOG_ARCHIVE", 
			"INNODB_REDO_LOG_ENABLE", "NDB_STORED_USER", "PERSIST_RO_VARIABLES_ADMIN", 
			"REPLICATION_APPLIER", "REPLICATION_SLAVE_ADMIN", "RESOURCE_GROUP_ADMIN", 
			"RESOURCE_GROUP_USER", "ROLE_ADMIN", "SERVICE_CONNECTION_ADMIN", "SESSION_VARIABLES_ADMIN", 
			"SET_USER_ID", "SHOW_ROUTINE", "SYSTEM_VARIABLES_ADMIN", "TABLE_ENCRYPTION_ADMIN", 
			"VERSION_TOKEN_ADMIN", "XA_RECOVER_ADMIN", "ARMSCII8", "ASCII", "BIG5", 
			"CP1250", "CP1251", "CP1256", "CP1257", "CP850", "CP852", "CP866", "CP932", 
			"DEC8", "EUCJPMS", "EUCKR", "GB18030", "GB2312", "GBK", "GEOSTD8", "GREEK", 
			"HEBREW", "HP8", "KEYBCS2", "KOI8R", "KOI8U", "LATIN1", "LATIN2", "LATIN5", 
			"LATIN7", "MACCE", "MACROMAN", "SJIS", "SWE7", "TIS620", "UCS2", "UJIS", 
			"UTF16", "UTF16LE", "UTF32", "UTF8", "UTF8MB3", "UTF8MB4", "ARCHIVE", 
			"BLACKHOLE", "CSV", "FEDERATED", "INNODB", "MEMORY", "MRG_MYISAM", "MYISAM", 
			"NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA", "TOKUDB", "REPEATABLE", "COMMITTED", 
			"UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", "GEOMCOLLECTION", 
			"GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON", 
			"POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", "AES_DECRYPT", 
			"AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB", "ASWKT", 
			"ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", "ASYMMETRIC_SIGN", 
			"ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", "BIN", "BIT_COUNT", 
			"BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", "CENTROID", 
			"CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", "COLLATION", 
			"COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", "CONVERT_TZ", 
			"COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
			"CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
			"DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
			"DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE", 
			"ENCRYPT", "ENDPOINT", "ENVELOPE", "EQUALS", "EXP", "EXPORT_SET", "EXTERIORRING", 
			"EXTRACTVALUE", "FIELD", "FIND_IN_SET", "FLOOR", "FORMAT", "FOUND_ROWS", 
			"FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", 
			"GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", 
			"GEOMETRYFROMWKB", "GEOMETRYN", "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", 
			"GET_FORMAT", "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT", 
			"HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA", 
			"INSTR", "INTERIORRINGN", "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", 
			"ISSIMPLE", "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
			"IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", 
			"LINEFROMTEXT", "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", 
			"LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
			"LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", 
			"MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", 
			"MBRWITHIN", "MD5", "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", 
			"MPOINTFROMWKB", "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
			"MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", 
			"MULTIPOLYGONFROMTEXT", "MULTIPOLYGONFROMWKB", "NAME_CONST", "NULLIF", 
			"NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", "OCT", "OCTET_LENGTH", 
			"ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", "PI", "POINTFROMTEXT", 
			"POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", "POLYGONFROMTEXT", 
			"POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", "RAND", "RANDOM_BYTES", 
			"RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", "RPAD", "RTRIM", "SEC_TO_TIME", 
			"SESSION_USER", "SHA", "SHA1", "SHA2", "SCHEMA_NAME", "SIGN", "SIN", 
			"SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", "SRID", "STARTPOINT", 
			"STRCMP", "STR_TO_DATE", "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", 
			"ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", "ST_CROSSES", 
			"ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", "ST_ENDPOINT", 
			"ST_ENVELOPE", "ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", 
			"ST_GEOMCOLLFROMTXT", "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", 
			"ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", 
			"ST_GEOMETRYN", "ST_GEOMETRYTYPE", "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", 
			"ST_INTERIORRINGN", "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED", 
			"ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", 
			"ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", 
			"ST_NUMPOINTS", "ST_OVERLAPS", "ST_POINTFROMTEXT", "ST_POINTFROMWKB", 
			"ST_POINTN", "ST_POLYFROMTEXT", "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", 
			"ST_POLYGONFROMWKB", "ST_SRID", "ST_STARTPOINT", "ST_SYMDIFFERENCE", 
			"ST_TOUCHES", "ST_UNION", "ST_WITHIN", "ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", 
			"SUBTIME", "SYSTEM_USER", "TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", 
			"TIME_FORMAT", "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", 
			"UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", 
			"UPDATEXML", "UPPER", "UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", 
			"VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", 
			"WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", "X_FUNCTION", "VAR_ASSIGN", 
			"PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
			"AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", 
			"PLUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL", "LESS_SYMBOL", 
			"EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", 
			"DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", "ZERO_DECIMAL", 
			"ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", 
			"REVERSE_QUOTE_SYMB", "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", 
			"START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", "DECIMAL_LITERAL", 
			"HEXADECIMAL_LITERAL", "REAL_LITERAL", "NULL_SPEC_LITERAL", "BIT_STRING", 
			"STRING_CHARSET_NAME", "DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME", 
			"IP_ADDRESS", "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "SimpleSpeakQlParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public SimpleSpeakQlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class StartContext extends ParserRuleContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode END_OF_FILE() { return getToken(SimpleSpeakQlParser.END_OF_FILE, 0); }
		public StartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterStart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitStart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitStart(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartContext start() throws RecognitionException {
		StartContext _localctx = new StartContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(284);
			selectStatement();
			setState(286);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==END_OF_FILE) {
				{
				setState(285);
				match(END_OF_FILE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStatementContext extends ParserRuleContext {
		public SelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatement; }
	 
		public SelectStatementContext() { }
		public void copyFrom(SelectStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnionSelectContext extends SelectStatementContext {
		public Token unionType;
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public List<UnionStatementContext> unionStatement() {
			return getRuleContexts(UnionStatementContext.class);
		}
		public UnionStatementContext unionStatement(int i) {
			return getRuleContext(UnionStatementContext.class,i);
		}
		public TerminalNode UNION() { return getToken(SimpleSpeakQlParser.UNION, 0); }
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SimpleSpeakQlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(SimpleSpeakQlParser.DISTINCT, 0); }
		public UnionSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterUnionSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitUnionSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitUnionSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnionParenthesisSelectContext extends SelectStatementContext {
		public Token unionType;
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public List<UnionParenthesisContext> unionParenthesis() {
			return getRuleContexts(UnionParenthesisContext.class);
		}
		public UnionParenthesisContext unionParenthesis(int i) {
			return getRuleContext(UnionParenthesisContext.class,i);
		}
		public TerminalNode UNION() { return getToken(SimpleSpeakQlParser.UNION, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SimpleSpeakQlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(SimpleSpeakQlParser.DISTINCT, 0); }
		public UnionParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterUnionParenthesisSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitUnionParenthesisSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitUnionParenthesisSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleSelectContext extends SelectStatementContext {
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public SimpleSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSimpleSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSimpleSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSimpleSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ParenthesisSelectContext extends SelectStatementContext {
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public ParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterParenthesisSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitParenthesisSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitParenthesisSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStatementContext selectStatement() throws RecognitionException {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_selectStatement);
		int _la;
		try {
			int _alt;
			setState(343);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				_localctx = new SimpleSelectContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(288);
				querySpecification();
				setState(290);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR || _la==LOCK) {
					{
					setState(289);
					lockClause();
					}
				}

				}
				break;
			case 2:
				_localctx = new ParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(292);
				queryExpression();
				setState(294);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR || _la==LOCK) {
					{
					setState(293);
					lockClause();
					}
				}

				}
				break;
			case 3:
				_localctx = new UnionSelectContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(296);
				querySpecificationNointo();
				setState(298); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(297);
						unionStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(300); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,3,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(310);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(302);
					match(UNION);
					setState(304);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(303);
						((UnionSelectContext)_localctx).unionType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionSelectContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(308);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case RETRIEVE:
					case SHOW_ME:
					case DISPLAY:
					case PRESENT:
					case FIND:
					case WHAT_IS:
					case WHAT_ARE:
					case WHAT_IS_THE:
					case WHAT_ARE_THE:
					case IN_TABLE:
					case IN_TABLES:
					case FROM_TABLE:
					case FROM_TABLES:
					case JOIN_TABLE:
					case BY_JOINING:
					case BY_JOINING_TABLE:
					case JOIN_WITH:
					case JOIN_WITH_TABLE:
					case JOINED_WITH:
					case JOINED_WITH_TABLE:
					case BY_JOINING_WITH_TABLE:
					case CROSS:
					case FROM:
					case GET:
					case IN:
					case INNER:
					case JOIN:
					case LEFT:
					case NATURAL:
					case RIGHT:
					case SELECT:
						{
						setState(306);
						querySpecification();
						}
						break;
					case OPEN_PARENTHESIS:
					case LEFT_PARENTHESIS:
					case OPEN_PAREN:
					case LEFT_PAREN:
					case LR_BRACKET:
						{
						setState(307);
						queryExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(313);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(312);
					orderByClause();
					}
				}

				setState(316);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(315);
					limitClause();
					}
				}

				setState(319);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR || _la==LOCK) {
					{
					setState(318);
					lockClause();
					}
				}

				}
				break;
			case 4:
				_localctx = new UnionParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(321);
				queryExpressionNointo();
				setState(323); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(322);
						unionParenthesis();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(325); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,10,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(332);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(327);
					match(UNION);
					setState(329);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(328);
						((UnionParenthesisSelectContext)_localctx).unionType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionParenthesisSelectContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(331);
					queryExpression();
					}
				}

				setState(335);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(334);
					orderByClause();
					}
				}

				setState(338);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(337);
					limitClause();
					}
				}

				setState(341);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR || _la==LOCK) {
					{
					setState(340);
					lockClause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationContext extends ParserRuleContext {
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecification; }
	 
		public QuerySpecificationContext() { }
		public void copyFrom(QuerySpecificationContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class MultiQuerySpecificationContext extends QuerySpecificationContext {
		public List<MultiQueryOrderSpecificationContext> multiQueryOrderSpecification() {
			return getRuleContexts(MultiQueryOrderSpecificationContext.class);
		}
		public MultiQueryOrderSpecificationContext multiQueryOrderSpecification(int i) {
			return getRuleContext(MultiQueryOrderSpecificationContext.class,i);
		}
		public List<MultiJoinExpressionContext> multiJoinExpression() {
			return getRuleContexts(MultiJoinExpressionContext.class);
		}
		public MultiJoinExpressionContext multiJoinExpression(int i) {
			return getRuleContext(MultiJoinExpressionContext.class,i);
		}
		public List<ExpressionDelimiterContext> expressionDelimiter() {
			return getRuleContexts(ExpressionDelimiterContext.class);
		}
		public ExpressionDelimiterContext expressionDelimiter(int i) {
			return getRuleContext(ExpressionDelimiterContext.class,i);
		}
		public SelectModifierExpressionContext selectModifierExpression() {
			return getRuleContext(SelectModifierExpressionContext.class,0);
		}
		public MultiQuerySpecificationContext(QuerySpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterMultiQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitMultiQuerySpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitMultiQuerySpecification(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SingleQuerySpecificationContext extends QuerySpecificationContext {
		public QueryOrderSpecificationContext queryOrderSpecification() {
			return getRuleContext(QueryOrderSpecificationContext.class,0);
		}
		public SelectModifierExpressionContext selectModifierExpression() {
			return getRuleContext(SelectModifierExpressionContext.class,0);
		}
		public SingleQuerySpecificationContext(QuerySpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSingleQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSingleQuerySpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSingleQuerySpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationContext querySpecification() throws RecognitionException {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_querySpecification);
		int _la;
		try {
			int _alt;
			setState(369);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
			case 1:
				_localctx = new SingleQuerySpecificationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(345);
				queryOrderSpecification();
				setState(346);
				selectModifierExpression();
				}
				break;
			case 2:
				_localctx = new MultiQuerySpecificationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(351);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 19)) & ~0x3f) == 0 && ((1L << (_la - 19)) & ((1L << (JOIN_TABLE - 19)) | (1L << (BY_JOINING - 19)) | (1L << (BY_JOINING_TABLE - 19)) | (1L << (JOIN_WITH - 19)) | (1L << (JOIN_WITH_TABLE - 19)) | (1L << (JOINED_WITH - 19)) | (1L << (JOINED_WITH_TABLE - 19)) | (1L << (BY_JOINING_WITH_TABLE - 19)) | (1L << (CROSS - 19)))) != 0) || ((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & ((1L << (INNER - 119)) | (1L << (JOIN - 119)) | (1L << (LEFT - 119)) | (1L << (NATURAL - 119)) | (1L << (RIGHT - 119)))) != 0)) {
					{
					setState(348);
					multiJoinExpression();
					setState(349);
					expressionDelimiter();
					}
				}

				setState(353);
				multiQueryOrderSpecification();
				setState(361);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,19,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(354);
						expressionDelimiter();
						setState(357);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case RETRIEVE:
						case SHOW_ME:
						case DISPLAY:
						case PRESENT:
						case FIND:
						case WHAT_IS:
						case WHAT_ARE:
						case WHAT_IS_THE:
						case WHAT_ARE_THE:
						case IN_TABLE:
						case IN_TABLES:
						case FROM_TABLE:
						case FROM_TABLES:
						case FROM:
						case GET:
						case IN:
						case SELECT:
							{
							setState(355);
							multiQueryOrderSpecification();
							}
							break;
						case JOIN_TABLE:
						case BY_JOINING:
						case BY_JOINING_TABLE:
						case JOIN_WITH:
						case JOIN_WITH_TABLE:
						case JOINED_WITH:
						case JOINED_WITH_TABLE:
						case BY_JOINING_WITH_TABLE:
						case CROSS:
						case INNER:
						case JOIN:
						case LEFT:
						case NATURAL:
						case RIGHT:
							{
							setState(356);
							multiJoinExpression();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						} 
					}
					setState(363);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,19,_ctx);
				}
				setState(367);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND_THEN || _la==THEN) {
					{
					setState(364);
					expressionDelimiter();
					setState(365);
					selectModifierExpression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryOrderSpecificationContext extends ParserRuleContext {
		public SelectExpressionContext selectExpression() {
			return getRuleContext(SelectExpressionContext.class,0);
		}
		public TableExpressionContext tableExpression() {
			return getRuleContext(TableExpressionContext.class,0);
		}
		public WhereKeywordContext whereKeyword() {
			return getRuleContext(WhereKeywordContext.class,0);
		}
		public WhereExpressionContext whereExpression() {
			return getRuleContext(WhereExpressionContext.class,0);
		}
		public QueryOrderSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryOrderSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterQueryOrderSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitQueryOrderSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitQueryOrderSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryOrderSpecificationContext queryOrderSpecification() throws RecognitionException {
		QueryOrderSpecificationContext _localctx = new QueryOrderSpecificationContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_queryOrderSpecification);
		int _la;
		try {
			setState(401);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(371);
				selectExpression();
				setState(375);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(372);
					whereKeyword();
					setState(373);
					whereExpression();
					}
				}

				setState(377);
				tableExpression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(379);
				selectExpression();
				setState(380);
				tableExpression();
				setState(384);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(381);
					whereKeyword();
					setState(382);
					whereExpression();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(386);
				tableExpression();
				setState(387);
				selectExpression();
				setState(391);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(388);
					whereKeyword();
					setState(389);
					whereExpression();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(393);
				tableExpression();
				setState(397);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(394);
					whereKeyword();
					setState(395);
					whereExpression();
					}
				}

				setState(399);
				selectExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultiQueryOrderSpecificationContext extends ParserRuleContext {
		public SelectExpressionContext selectExpression() {
			return getRuleContext(SelectExpressionContext.class,0);
		}
		public TableExpressionNoJoinContext tableExpressionNoJoin() {
			return getRuleContext(TableExpressionNoJoinContext.class,0);
		}
		public WhereKeywordContext whereKeyword() {
			return getRuleContext(WhereKeywordContext.class,0);
		}
		public WhereExpressionContext whereExpression() {
			return getRuleContext(WhereExpressionContext.class,0);
		}
		public MultiQueryOrderSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiQueryOrderSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterMultiQueryOrderSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitMultiQueryOrderSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitMultiQueryOrderSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultiQueryOrderSpecificationContext multiQueryOrderSpecification() throws RecognitionException {
		MultiQueryOrderSpecificationContext _localctx = new MultiQueryOrderSpecificationContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_multiQueryOrderSpecification);
		int _la;
		try {
			setState(433);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(403);
				selectExpression();
				setState(407);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(404);
					whereKeyword();
					setState(405);
					whereExpression();
					}
				}

				setState(409);
				tableExpressionNoJoin();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(411);
				selectExpression();
				setState(412);
				tableExpressionNoJoin();
				setState(416);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(413);
					whereKeyword();
					setState(414);
					whereExpression();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(418);
				tableExpressionNoJoin();
				setState(419);
				selectExpression();
				setState(423);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(420);
					whereKeyword();
					setState(421);
					whereExpression();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(425);
				tableExpressionNoJoin();
				setState(429);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(426);
					whereKeyword();
					setState(427);
					whereExpression();
					}
				}

				setState(431);
				selectExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectExpressionContext extends ParserRuleContext {
		public SelectClauseContext selectClause() {
			return getRuleContext(SelectClauseContext.class,0);
		}
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public SelectIntoExpressionContext selectIntoExpression() {
			return getRuleContext(SelectIntoExpressionContext.class,0);
		}
		public NothingElementContext nothingElement() {
			return getRuleContext(NothingElementContext.class,0);
		}
		public SelectExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSelectExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSelectExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSelectExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectExpressionContext selectExpression() throws RecognitionException {
		SelectExpressionContext _localctx = new SelectExpressionContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_selectExpression);
		try {
			int _alt;
			setState(458);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(435);
				selectClause();
				setState(439);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,32,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(436);
						selectSpec();
						}
						} 
					}
					setState(441);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,32,_ctx);
				}
				setState(442);
				selectElements();
				setState(444);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
				case 1:
					{
					setState(443);
					selectIntoExpression();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(446);
				selectClause();
				setState(450);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,34,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(447);
						selectSpec();
						}
						} 
					}
					setState(452);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,34,_ctx);
				}
				setState(453);
				selectElements();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(455);
				selectClause();
				setState(456);
				nothingElement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectClauseContext extends ParserRuleContext {
		public SelectKeywordContext selectKeyword() {
			return getRuleContext(SelectKeywordContext.class,0);
		}
		public SelectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSelectClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSelectClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSelectClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectClauseContext selectClause() throws RecognitionException {
		SelectClauseContext _localctx = new SelectClauseContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_selectClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(460);
			selectKeyword();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectKeywordContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(SimpleSpeakQlParser.SELECT, 0); }
		public TerminalNode RETRIEVE() { return getToken(SimpleSpeakQlParser.RETRIEVE, 0); }
		public TerminalNode SHOW_ME() { return getToken(SimpleSpeakQlParser.SHOW_ME, 0); }
		public TerminalNode DISPLAY() { return getToken(SimpleSpeakQlParser.DISPLAY, 0); }
		public TerminalNode PRESENT() { return getToken(SimpleSpeakQlParser.PRESENT, 0); }
		public TerminalNode FIND() { return getToken(SimpleSpeakQlParser.FIND, 0); }
		public TerminalNode GET() { return getToken(SimpleSpeakQlParser.GET, 0); }
		public TerminalNode WHAT_IS() { return getToken(SimpleSpeakQlParser.WHAT_IS, 0); }
		public TerminalNode WHAT_ARE() { return getToken(SimpleSpeakQlParser.WHAT_ARE, 0); }
		public TerminalNode WHAT_IS_THE() { return getToken(SimpleSpeakQlParser.WHAT_IS_THE, 0); }
		public TerminalNode WHAT_ARE_THE() { return getToken(SimpleSpeakQlParser.WHAT_ARE_THE, 0); }
		public SelectKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSelectKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSelectKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSelectKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectKeywordContext selectKeyword() throws RecognitionException {
		SelectKeywordContext _localctx = new SelectKeywordContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_selectKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(462);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RETRIEVE) | (1L << SHOW_ME) | (1L << DISPLAY) | (1L << PRESENT) | (1L << FIND) | (1L << WHAT_IS) | (1L << WHAT_ARE) | (1L << WHAT_IS_THE) | (1L << WHAT_ARE_THE))) != 0) || _la==GET || _la==SELECT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NothingElementContext extends ParserRuleContext {
		public NothingKeywordContext nothingKeyword() {
			return getRuleContext(NothingKeywordContext.class,0);
		}
		public NothingElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nothingElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterNothingElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitNothingElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitNothingElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NothingElementContext nothingElement() throws RecognitionException {
		NothingElementContext _localctx = new NothingElementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_nothingElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(464);
			nothingKeyword();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NothingKeywordContext extends ParserRuleContext {
		public TerminalNode NOTHING() { return getToken(SimpleSpeakQlParser.NOTHING, 0); }
		public TerminalNode NO_COLUMNS() { return getToken(SimpleSpeakQlParser.NO_COLUMNS, 0); }
		public NothingKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nothingKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterNothingKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitNothingKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitNothingKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NothingKeywordContext nothingKeyword() throws RecognitionException {
		NothingKeywordContext _localctx = new NothingKeywordContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_nothingKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(466);
			_la = _input.LA(1);
			if ( !(_la==NOTHING || _la==NO_COLUMNS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectSpecContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(SimpleSpeakQlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(SimpleSpeakQlParser.DISTINCT, 0); }
		public TerminalNode DISTINCTROW() { return getToken(SimpleSpeakQlParser.DISTINCTROW, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(SimpleSpeakQlParser.HIGH_PRIORITY, 0); }
		public TerminalNode STRAIGHT_JOIN() { return getToken(SimpleSpeakQlParser.STRAIGHT_JOIN, 0); }
		public TerminalNode SQL_SMALL_RESULT() { return getToken(SimpleSpeakQlParser.SQL_SMALL_RESULT, 0); }
		public TerminalNode SQL_BIG_RESULT() { return getToken(SimpleSpeakQlParser.SQL_BIG_RESULT, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(SimpleSpeakQlParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(SimpleSpeakQlParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(SimpleSpeakQlParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_CALC_FOUND_ROWS() { return getToken(SimpleSpeakQlParser.SQL_CALC_FOUND_ROWS, 0); }
		public SelectSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSelectSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSelectSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSelectSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectSpecContext selectSpec() throws RecognitionException {
		SelectSpecContext _localctx = new SelectSpecContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_selectSpec);
		int _la;
		try {
			setState(476);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
			case DISTINCT:
			case DISTINCTROW:
				enterOuterAlt(_localctx, 1);
				{
				setState(468);
				_la = _input.LA(1);
				if ( !(((((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & ((1L << (ALL - 46)) | (1L << (DISTINCT - 46)) | (1L << (DISTINCTROW - 46)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case HIGH_PRIORITY:
				enterOuterAlt(_localctx, 2);
				{
				setState(469);
				match(HIGH_PRIORITY);
				}
				break;
			case STRAIGHT_JOIN:
				enterOuterAlt(_localctx, 3);
				{
				setState(470);
				match(STRAIGHT_JOIN);
				}
				break;
			case SQL_SMALL_RESULT:
				enterOuterAlt(_localctx, 4);
				{
				setState(471);
				match(SQL_SMALL_RESULT);
				}
				break;
			case SQL_BIG_RESULT:
				enterOuterAlt(_localctx, 5);
				{
				setState(472);
				match(SQL_BIG_RESULT);
				}
				break;
			case SQL_BUFFER_RESULT:
				enterOuterAlt(_localctx, 6);
				{
				setState(473);
				match(SQL_BUFFER_RESULT);
				}
				break;
			case SQL_CACHE:
			case SQL_NO_CACHE:
				enterOuterAlt(_localctx, 7);
				{
				setState(474);
				_la = _input.LA(1);
				if ( !(_la==SQL_CACHE || _la==SQL_NO_CACHE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SQL_CALC_FOUND_ROWS:
				enterOuterAlt(_localctx, 8);
				{
				setState(475);
				match(SQL_CALC_FOUND_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementsContext extends ParserRuleContext {
		public Token star;
		public List<SelectElementContext> selectElement() {
			return getRuleContexts(SelectElementContext.class);
		}
		public SelectElementContext selectElement(int i) {
			return getRuleContext(SelectElementContext.class,i);
		}
		public TerminalNode STAR() { return getToken(SimpleSpeakQlParser.STAR, 0); }
		public List<SelectElementDelimiterContext> selectElementDelimiter() {
			return getRuleContexts(SelectElementDelimiterContext.class);
		}
		public SelectElementDelimiterContext selectElementDelimiter(int i) {
			return getRuleContext(SelectElementDelimiterContext.class,i);
		}
		public SelectElementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSelectElements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSelectElements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSelectElements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementsContext selectElements() throws RecognitionException {
		SelectElementsContext _localctx = new SelectElementsContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_selectElements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(480);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STAR:
				{
				setState(478);
				((SelectElementsContext)_localctx).star = match(STAR);
				}
				break;
			case SPOKEN_DOT:
			case OPEN_PARENTHESIS:
			case LEFT_PARENTHESIS:
			case OPEN_PAREN:
			case LEFT_PAREN:
			case THE:
			case CASE:
			case CAST:
			case CONVERT:
			case CURRENT:
			case CURRENT_USER:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case EXISTS:
			case FALSE:
			case GROUP:
			case IF:
			case INSERT:
			case INTERVAL:
			case LEFT:
			case NOT:
			case NULL_LITERAL:
			case NUMBER:
			case ORDER:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case TRUE:
			case VALUES:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case CHAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case EXTRACT:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case PLUS:
			case MINUS:
			case MOD:
			case EXCLAMATION_SYMBOL:
			case BIT_NOT_OP:
			case DOT:
			case LR_BRACKET:
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case START_NATIONAL_STRING_LITERAL:
			case STRING_LITERAL:
			case DECIMAL_LITERAL:
			case HEXADECIMAL_LITERAL:
			case REAL_LITERAL:
			case NULL_SPEC_LITERAL:
			case BIT_STRING:
			case STRING_CHARSET_NAME:
			case ID:
			case REVERSE_QUOTE_ID:
			case LOCAL_ID:
			case GLOBAL_ID:
				{
				setState(479);
				selectElement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(487);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AND || _la==COMMA) {
				{
				{
				setState(482);
				selectElementDelimiter();
				setState(483);
				selectElement();
				}
				}
				setState(489);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementContext extends ParserRuleContext {
		public SelectElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElement; }
	 
		public SelectElementContext() { }
		public void copyFrom(SelectElementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectExpressionElementContext extends SelectElementContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(SimpleSpeakQlParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(SimpleSpeakQlParser.VAR_ASSIGN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public SelectElementAsContext selectElementAs() {
			return getRuleContext(SelectElementAsContext.class,0);
		}
		public SelectExpressionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSelectExpressionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSelectExpressionElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSelectExpressionElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectFunctionElementContext extends SelectElementContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public SelectElementAsContext selectElementAs() {
			return getRuleContext(SelectElementAsContext.class,0);
		}
		public SelectFunctionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSelectFunctionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSelectFunctionElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSelectFunctionElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectStarElementContext extends SelectElementContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public SelectElementDotContext selectElementDot() {
			return getRuleContext(SelectElementDotContext.class,0);
		}
		public TerminalNode STAR() { return getToken(SimpleSpeakQlParser.STAR, 0); }
		public SelectStarElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSelectStarElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSelectStarElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSelectStarElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectColumnElementContext extends SelectElementContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public SelectElementAsContext selectElementAs() {
			return getRuleContext(SelectElementAsContext.class,0);
		}
		public SelectColumnElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSelectColumnElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSelectColumnElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSelectColumnElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementContext selectElement() throws RecognitionException {
		SelectElementContext _localctx = new SelectElementContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_selectElement);
		int _la;
		try {
			setState(519);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
			case 1:
				_localctx = new SelectStarElementContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(490);
				fullId();
				setState(491);
				selectElementDot();
				setState(492);
				match(STAR);
				}
				break;
			case 2:
				_localctx = new SelectColumnElementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(494);
				fullColumnName();
				setState(499);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {
				case 1:
					{
					setState(496);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(495);
						selectElementAs();
						}
					}

					setState(498);
					uid();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new SelectFunctionElementContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(501);
				functionCall();
				setState(506);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
				case 1:
					{
					setState(503);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(502);
						selectElementAs();
						}
					}

					setState(505);
					uid();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SelectExpressionElementContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(510);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
				case 1:
					{
					setState(508);
					match(LOCAL_ID);
					setState(509);
					match(VAR_ASSIGN);
					}
					break;
				}
				setState(512);
				expression(0);
				setState(517);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
				case 1:
					{
					setState(514);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(513);
						selectElementAs();
						}
					}

					setState(516);
					uid();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullIdContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode DOT_ID() { return getToken(SimpleSpeakQlParser.DOT_ID, 0); }
		public TerminalNode DOT() { return getToken(SimpleSpeakQlParser.DOT, 0); }
		public FullIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterFullId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitFullId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitFullId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullIdContext fullId() throws RecognitionException {
		FullIdContext _localctx = new FullIdContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_fullId);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(521);
			uid();
			setState(525);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
			case 1:
				{
				setState(522);
				match(DOT_ID);
				}
				break;
			case 2:
				{
				setState(523);
				match(DOT);
				setState(524);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UidContext extends ParserRuleContext {
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public UidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterUid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitUid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitUid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UidContext uid() throws RecognitionException {
		UidContext _localctx = new UidContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_uid);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(527);
			simpleId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleIdContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(SimpleSpeakQlParser.ID, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TransactionLevelBaseContext transactionLevelBase() {
			return getRuleContext(TransactionLevelBaseContext.class,0);
		}
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public PrivilegesBaseContext privilegesBase() {
			return getRuleContext(PrivilegesBaseContext.class,0);
		}
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public DataTypeBaseContext dataTypeBase() {
			return getRuleContext(DataTypeBaseContext.class,0);
		}
		public KeywordsCanBeIdContext keywordsCanBeId() {
			return getRuleContext(KeywordsCanBeIdContext.class,0);
		}
		public FunctionNameBaseContext functionNameBase() {
			return getRuleContext(FunctionNameBaseContext.class,0);
		}
		public SimpleIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSimpleId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSimpleId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSimpleId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleIdContext simpleId() throws RecognitionException {
		SimpleIdContext _localctx = new SimpleIdContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_simpleId);
		try {
			setState(538);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(529);
				match(ID);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(530);
				charsetNameBase();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(531);
				transactionLevelBase();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(532);
				engineName();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(533);
				privilegesBase();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(534);
				intervalTypeBase();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(535);
				dataTypeBase();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(536);
				keywordsCanBeId();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(537);
				functionNameBase();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameBaseContext extends ParserRuleContext {
		public TerminalNode ARMSCII8() { return getToken(SimpleSpeakQlParser.ARMSCII8, 0); }
		public TerminalNode ASCII() { return getToken(SimpleSpeakQlParser.ASCII, 0); }
		public TerminalNode BIG5() { return getToken(SimpleSpeakQlParser.BIG5, 0); }
		public TerminalNode BINARY() { return getToken(SimpleSpeakQlParser.BINARY, 0); }
		public TerminalNode CP1250() { return getToken(SimpleSpeakQlParser.CP1250, 0); }
		public TerminalNode CP1251() { return getToken(SimpleSpeakQlParser.CP1251, 0); }
		public TerminalNode CP1256() { return getToken(SimpleSpeakQlParser.CP1256, 0); }
		public TerminalNode CP1257() { return getToken(SimpleSpeakQlParser.CP1257, 0); }
		public TerminalNode CP850() { return getToken(SimpleSpeakQlParser.CP850, 0); }
		public TerminalNode CP852() { return getToken(SimpleSpeakQlParser.CP852, 0); }
		public TerminalNode CP866() { return getToken(SimpleSpeakQlParser.CP866, 0); }
		public TerminalNode CP932() { return getToken(SimpleSpeakQlParser.CP932, 0); }
		public TerminalNode DEC8() { return getToken(SimpleSpeakQlParser.DEC8, 0); }
		public TerminalNode EUCJPMS() { return getToken(SimpleSpeakQlParser.EUCJPMS, 0); }
		public TerminalNode EUCKR() { return getToken(SimpleSpeakQlParser.EUCKR, 0); }
		public TerminalNode GB18030() { return getToken(SimpleSpeakQlParser.GB18030, 0); }
		public TerminalNode GB2312() { return getToken(SimpleSpeakQlParser.GB2312, 0); }
		public TerminalNode GBK() { return getToken(SimpleSpeakQlParser.GBK, 0); }
		public TerminalNode GEOSTD8() { return getToken(SimpleSpeakQlParser.GEOSTD8, 0); }
		public TerminalNode GREEK() { return getToken(SimpleSpeakQlParser.GREEK, 0); }
		public TerminalNode HEBREW() { return getToken(SimpleSpeakQlParser.HEBREW, 0); }
		public TerminalNode HP8() { return getToken(SimpleSpeakQlParser.HP8, 0); }
		public TerminalNode KEYBCS2() { return getToken(SimpleSpeakQlParser.KEYBCS2, 0); }
		public TerminalNode KOI8R() { return getToken(SimpleSpeakQlParser.KOI8R, 0); }
		public TerminalNode KOI8U() { return getToken(SimpleSpeakQlParser.KOI8U, 0); }
		public TerminalNode LATIN1() { return getToken(SimpleSpeakQlParser.LATIN1, 0); }
		public TerminalNode LATIN2() { return getToken(SimpleSpeakQlParser.LATIN2, 0); }
		public TerminalNode LATIN5() { return getToken(SimpleSpeakQlParser.LATIN5, 0); }
		public TerminalNode LATIN7() { return getToken(SimpleSpeakQlParser.LATIN7, 0); }
		public TerminalNode MACCE() { return getToken(SimpleSpeakQlParser.MACCE, 0); }
		public TerminalNode MACROMAN() { return getToken(SimpleSpeakQlParser.MACROMAN, 0); }
		public TerminalNode SJIS() { return getToken(SimpleSpeakQlParser.SJIS, 0); }
		public TerminalNode SWE7() { return getToken(SimpleSpeakQlParser.SWE7, 0); }
		public TerminalNode TIS620() { return getToken(SimpleSpeakQlParser.TIS620, 0); }
		public TerminalNode UCS2() { return getToken(SimpleSpeakQlParser.UCS2, 0); }
		public TerminalNode UJIS() { return getToken(SimpleSpeakQlParser.UJIS, 0); }
		public TerminalNode UTF16() { return getToken(SimpleSpeakQlParser.UTF16, 0); }
		public TerminalNode UTF16LE() { return getToken(SimpleSpeakQlParser.UTF16LE, 0); }
		public TerminalNode UTF32() { return getToken(SimpleSpeakQlParser.UTF32, 0); }
		public TerminalNode UTF8() { return getToken(SimpleSpeakQlParser.UTF8, 0); }
		public TerminalNode UTF8MB3() { return getToken(SimpleSpeakQlParser.UTF8MB3, 0); }
		public TerminalNode UTF8MB4() { return getToken(SimpleSpeakQlParser.UTF8MB4, 0); }
		public CharsetNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetNameBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterCharsetNameBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitCharsetNameBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitCharsetNameBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetNameBaseContext charsetNameBase() throws RecognitionException {
		CharsetNameBaseContext _localctx = new CharsetNameBaseContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_charsetNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(540);
			_la = _input.LA(1);
			if ( !(_la==BINARY || ((((_la - 741)) & ~0x3f) == 0 && ((1L << (_la - 741)) & ((1L << (ARMSCII8 - 741)) | (1L << (ASCII - 741)) | (1L << (BIG5 - 741)) | (1L << (CP1250 - 741)) | (1L << (CP1251 - 741)) | (1L << (CP1256 - 741)) | (1L << (CP1257 - 741)) | (1L << (CP850 - 741)) | (1L << (CP852 - 741)) | (1L << (CP866 - 741)) | (1L << (CP932 - 741)) | (1L << (DEC8 - 741)) | (1L << (EUCJPMS - 741)) | (1L << (EUCKR - 741)) | (1L << (GB18030 - 741)) | (1L << (GB2312 - 741)) | (1L << (GBK - 741)) | (1L << (GEOSTD8 - 741)) | (1L << (GREEK - 741)) | (1L << (HEBREW - 741)) | (1L << (HP8 - 741)) | (1L << (KEYBCS2 - 741)) | (1L << (KOI8R - 741)) | (1L << (KOI8U - 741)) | (1L << (LATIN1 - 741)) | (1L << (LATIN2 - 741)) | (1L << (LATIN5 - 741)) | (1L << (LATIN7 - 741)) | (1L << (MACCE - 741)) | (1L << (MACROMAN - 741)) | (1L << (SJIS - 741)) | (1L << (SWE7 - 741)) | (1L << (TIS620 - 741)) | (1L << (UCS2 - 741)) | (1L << (UJIS - 741)) | (1L << (UTF16 - 741)) | (1L << (UTF16LE - 741)) | (1L << (UTF32 - 741)) | (1L << (UTF8 - 741)) | (1L << (UTF8MB3 - 741)) | (1L << (UTF8MB4 - 741)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionLevelBaseContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(SimpleSpeakQlParser.REPEATABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(SimpleSpeakQlParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(SimpleSpeakQlParser.UNCOMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(SimpleSpeakQlParser.SERIALIZABLE, 0); }
		public TransactionLevelBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionLevelBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterTransactionLevelBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitTransactionLevelBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitTransactionLevelBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionLevelBaseContext transactionLevelBase() throws RecognitionException {
		TransactionLevelBaseContext _localctx = new TransactionLevelBaseContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_transactionLevelBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(542);
			_la = _input.LA(1);
			if ( !(((((_la - 794)) & ~0x3f) == 0 && ((1L << (_la - 794)) & ((1L << (REPEATABLE - 794)) | (1L << (COMMITTED - 794)) | (1L << (UNCOMMITTED - 794)) | (1L << (SERIALIZABLE - 794)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EngineNameContext extends ParserRuleContext {
		public TerminalNode ARCHIVE() { return getToken(SimpleSpeakQlParser.ARCHIVE, 0); }
		public TerminalNode BLACKHOLE() { return getToken(SimpleSpeakQlParser.BLACKHOLE, 0); }
		public TerminalNode CSV() { return getToken(SimpleSpeakQlParser.CSV, 0); }
		public TerminalNode FEDERATED() { return getToken(SimpleSpeakQlParser.FEDERATED, 0); }
		public TerminalNode INNODB() { return getToken(SimpleSpeakQlParser.INNODB, 0); }
		public TerminalNode MEMORY() { return getToken(SimpleSpeakQlParser.MEMORY, 0); }
		public TerminalNode MRG_MYISAM() { return getToken(SimpleSpeakQlParser.MRG_MYISAM, 0); }
		public TerminalNode MYISAM() { return getToken(SimpleSpeakQlParser.MYISAM, 0); }
		public TerminalNode NDB() { return getToken(SimpleSpeakQlParser.NDB, 0); }
		public TerminalNode NDBCLUSTER() { return getToken(SimpleSpeakQlParser.NDBCLUSTER, 0); }
		public TerminalNode PERFORMANCE_SCHEMA() { return getToken(SimpleSpeakQlParser.PERFORMANCE_SCHEMA, 0); }
		public TerminalNode TOKUDB() { return getToken(SimpleSpeakQlParser.TOKUDB, 0); }
		public TerminalNode ID() { return getToken(SimpleSpeakQlParser.ID, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SimpleSpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(SimpleSpeakQlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode CONNECT() { return getToken(SimpleSpeakQlParser.CONNECT, 0); }
		public EngineNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_engineName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterEngineName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitEngineName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitEngineName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EngineNameContext engineName() throws RecognitionException {
		EngineNameContext _localctx = new EngineNameContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_engineName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(544);
			_la = _input.LA(1);
			if ( !(_la==CONNECT || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (ARCHIVE - 782)) | (1L << (BLACKHOLE - 782)) | (1L << (CSV - 782)) | (1L << (FEDERATED - 782)) | (1L << (INNODB - 782)) | (1L << (MEMORY - 782)) | (1L << (MRG_MYISAM - 782)) | (1L << (MYISAM - 782)) | (1L << (NDB - 782)) | (1L << (NDBCLUSTER - 782)) | (1L << (PERFORMANCE_SCHEMA - 782)) | (1L << (TOKUDB - 782)))) != 0) || ((((_la - 1139)) & ~0x3f) == 0 && ((1L << (_la - 1139)) & ((1L << (STRING_LITERAL - 1139)) | (1L << (ID - 1139)) | (1L << (REVERSE_QUOTE_ID - 1139)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegesBaseContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(SimpleSpeakQlParser.TABLES, 0); }
		public TerminalNode ROUTINE() { return getToken(SimpleSpeakQlParser.ROUTINE, 0); }
		public TerminalNode EXECUTE() { return getToken(SimpleSpeakQlParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(SimpleSpeakQlParser.FILE, 0); }
		public TerminalNode PROCESS() { return getToken(SimpleSpeakQlParser.PROCESS, 0); }
		public TerminalNode RELOAD() { return getToken(SimpleSpeakQlParser.RELOAD, 0); }
		public TerminalNode SHUTDOWN() { return getToken(SimpleSpeakQlParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(SimpleSpeakQlParser.SUPER, 0); }
		public TerminalNode PRIVILEGES() { return getToken(SimpleSpeakQlParser.PRIVILEGES, 0); }
		public PrivilegesBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegesBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterPrivilegesBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitPrivilegesBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitPrivilegesBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegesBaseContext privilegesBase() throws RecognitionException {
		PrivilegesBaseContext _localctx = new PrivilegesBaseContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_privilegesBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(546);
			_la = _input.LA(1);
			if ( !(((((_la - 700)) & ~0x3f) == 0 && ((1L << (_la - 700)) & ((1L << (TABLES - 700)) | (1L << (ROUTINE - 700)) | (1L << (EXECUTE - 700)) | (1L << (FILE - 700)) | (1L << (PROCESS - 700)) | (1L << (RELOAD - 700)) | (1L << (SHUTDOWN - 700)) | (1L << (SUPER - 700)) | (1L << (PRIVILEGES - 700)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeBaseContext extends ParserRuleContext {
		public TerminalNode QUARTER() { return getToken(SimpleSpeakQlParser.QUARTER, 0); }
		public TerminalNode MONTH() { return getToken(SimpleSpeakQlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(SimpleSpeakQlParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(SimpleSpeakQlParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(SimpleSpeakQlParser.MINUTE, 0); }
		public TerminalNode WEEK() { return getToken(SimpleSpeakQlParser.WEEK, 0); }
		public TerminalNode SECOND() { return getToken(SimpleSpeakQlParser.SECOND, 0); }
		public TerminalNode MICROSECOND() { return getToken(SimpleSpeakQlParser.MICROSECOND, 0); }
		public IntervalTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalTypeBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterIntervalTypeBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitIntervalTypeBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitIntervalTypeBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalTypeBaseContext intervalTypeBase() throws RecognitionException {
		IntervalTypeBaseContext _localctx = new IntervalTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_intervalTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(548);
			_la = _input.LA(1);
			if ( !(((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (QUARTER - 692)) | (1L << (MONTH - 692)) | (1L << (DAY - 692)) | (1L << (HOUR - 692)) | (1L << (MINUTE - 692)) | (1L << (WEEK - 692)) | (1L << (SECOND - 692)) | (1L << (MICROSECOND - 692)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeBaseContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(SimpleSpeakQlParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(SimpleSpeakQlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SimpleSpeakQlParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(SimpleSpeakQlParser.DATETIME, 0); }
		public TerminalNode YEAR() { return getToken(SimpleSpeakQlParser.YEAR, 0); }
		public TerminalNode ENUM() { return getToken(SimpleSpeakQlParser.ENUM, 0); }
		public TerminalNode TEXT() { return getToken(SimpleSpeakQlParser.TEXT, 0); }
		public DataTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterDataTypeBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitDataTypeBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitDataTypeBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeBaseContext dataTypeBase() throws RecognitionException {
		DataTypeBaseContext _localctx = new DataTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_dataTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(550);
			_la = _input.LA(1);
			if ( !(((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (DATE - 246)) | (1L << (TIME - 246)) | (1L << (TIMESTAMP - 246)) | (1L << (DATETIME - 246)) | (1L << (YEAR - 246)) | (1L << (TEXT - 246)) | (1L << (ENUM - 246)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeywordsCanBeIdContext extends ParserRuleContext {
		public TerminalNode ACCOUNT() { return getToken(SimpleSpeakQlParser.ACCOUNT, 0); }
		public TerminalNode ACTION() { return getToken(SimpleSpeakQlParser.ACTION, 0); }
		public TerminalNode AFTER() { return getToken(SimpleSpeakQlParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(SimpleSpeakQlParser.AGGREGATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(SimpleSpeakQlParser.ALGORITHM, 0); }
		public TerminalNode ANY() { return getToken(SimpleSpeakQlParser.ANY, 0); }
		public TerminalNode AT() { return getToken(SimpleSpeakQlParser.AT, 0); }
		public TerminalNode AUDIT_ADMIN() { return getToken(SimpleSpeakQlParser.AUDIT_ADMIN, 0); }
		public TerminalNode AUTHORS() { return getToken(SimpleSpeakQlParser.AUTHORS, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(SimpleSpeakQlParser.AUTOCOMMIT, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(SimpleSpeakQlParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode AUTO_INCREMENT() { return getToken(SimpleSpeakQlParser.AUTO_INCREMENT, 0); }
		public TerminalNode AVG() { return getToken(SimpleSpeakQlParser.AVG, 0); }
		public TerminalNode AVG_ROW_LENGTH() { return getToken(SimpleSpeakQlParser.AVG_ROW_LENGTH, 0); }
		public TerminalNode BACKUP_ADMIN() { return getToken(SimpleSpeakQlParser.BACKUP_ADMIN, 0); }
		public TerminalNode BEGIN() { return getToken(SimpleSpeakQlParser.BEGIN, 0); }
		public TerminalNode BINLOG() { return getToken(SimpleSpeakQlParser.BINLOG, 0); }
		public TerminalNode BINLOG_ADMIN() { return getToken(SimpleSpeakQlParser.BINLOG_ADMIN, 0); }
		public TerminalNode BINLOG_ENCRYPTION_ADMIN() { return getToken(SimpleSpeakQlParser.BINLOG_ENCRYPTION_ADMIN, 0); }
		public TerminalNode BIT() { return getToken(SimpleSpeakQlParser.BIT, 0); }
		public TerminalNode BIT_AND() { return getToken(SimpleSpeakQlParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(SimpleSpeakQlParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(SimpleSpeakQlParser.BIT_XOR, 0); }
		public TerminalNode BLOCK() { return getToken(SimpleSpeakQlParser.BLOCK, 0); }
		public TerminalNode BOOL() { return getToken(SimpleSpeakQlParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(SimpleSpeakQlParser.BOOLEAN, 0); }
		public TerminalNode BTREE() { return getToken(SimpleSpeakQlParser.BTREE, 0); }
		public TerminalNode CACHE() { return getToken(SimpleSpeakQlParser.CACHE, 0); }
		public TerminalNode CASCADED() { return getToken(SimpleSpeakQlParser.CASCADED, 0); }
		public TerminalNode CHAIN() { return getToken(SimpleSpeakQlParser.CHAIN, 0); }
		public TerminalNode CHANGED() { return getToken(SimpleSpeakQlParser.CHANGED, 0); }
		public TerminalNode CHANNEL() { return getToken(SimpleSpeakQlParser.CHANNEL, 0); }
		public TerminalNode CHECKSUM() { return getToken(SimpleSpeakQlParser.CHECKSUM, 0); }
		public TerminalNode PAGE_CHECKSUM() { return getToken(SimpleSpeakQlParser.PAGE_CHECKSUM, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(SimpleSpeakQlParser.CATALOG_NAME, 0); }
		public TerminalNode CIPHER() { return getToken(SimpleSpeakQlParser.CIPHER, 0); }
		public TerminalNode CLASS_ORIGIN() { return getToken(SimpleSpeakQlParser.CLASS_ORIGIN, 0); }
		public TerminalNode CLIENT() { return getToken(SimpleSpeakQlParser.CLIENT, 0); }
		public TerminalNode CLONE_ADMIN() { return getToken(SimpleSpeakQlParser.CLONE_ADMIN, 0); }
		public TerminalNode CLOSE() { return getToken(SimpleSpeakQlParser.CLOSE, 0); }
		public TerminalNode COALESCE() { return getToken(SimpleSpeakQlParser.COALESCE, 0); }
		public TerminalNode CODE() { return getToken(SimpleSpeakQlParser.CODE, 0); }
		public TerminalNode COLUMNS() { return getToken(SimpleSpeakQlParser.COLUMNS, 0); }
		public TerminalNode COLUMN_FORMAT() { return getToken(SimpleSpeakQlParser.COLUMN_FORMAT, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(SimpleSpeakQlParser.COLUMN_NAME, 0); }
		public TerminalNode COMMENT() { return getToken(SimpleSpeakQlParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(SimpleSpeakQlParser.COMMIT, 0); }
		public TerminalNode COMPACT() { return getToken(SimpleSpeakQlParser.COMPACT, 0); }
		public TerminalNode COMPLETION() { return getToken(SimpleSpeakQlParser.COMPLETION, 0); }
		public TerminalNode COMPRESSED() { return getToken(SimpleSpeakQlParser.COMPRESSED, 0); }
		public TerminalNode COMPRESSION() { return getToken(SimpleSpeakQlParser.COMPRESSION, 0); }
		public TerminalNode CONCURRENT() { return getToken(SimpleSpeakQlParser.CONCURRENT, 0); }
		public TerminalNode CONNECT() { return getToken(SimpleSpeakQlParser.CONNECT, 0); }
		public TerminalNode CONNECTION() { return getToken(SimpleSpeakQlParser.CONNECTION, 0); }
		public TerminalNode CONNECTION_ADMIN() { return getToken(SimpleSpeakQlParser.CONNECTION_ADMIN, 0); }
		public TerminalNode CONSISTENT() { return getToken(SimpleSpeakQlParser.CONSISTENT, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(SimpleSpeakQlParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(SimpleSpeakQlParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(SimpleSpeakQlParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONTAINS() { return getToken(SimpleSpeakQlParser.CONTAINS, 0); }
		public TerminalNode CONTEXT() { return getToken(SimpleSpeakQlParser.CONTEXT, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(SimpleSpeakQlParser.CONTRIBUTORS, 0); }
		public TerminalNode COPY() { return getToken(SimpleSpeakQlParser.COPY, 0); }
		public TerminalNode COUNT() { return getToken(SimpleSpeakQlParser.COUNT, 0); }
		public TerminalNode CPU() { return getToken(SimpleSpeakQlParser.CPU, 0); }
		public TerminalNode CURRENT() { return getToken(SimpleSpeakQlParser.CURRENT, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(SimpleSpeakQlParser.CURSOR_NAME, 0); }
		public TerminalNode DATA() { return getToken(SimpleSpeakQlParser.DATA, 0); }
		public TerminalNode DATAFILE() { return getToken(SimpleSpeakQlParser.DATAFILE, 0); }
		public TerminalNode DEALLOCATE() { return getToken(SimpleSpeakQlParser.DEALLOCATE, 0); }
		public TerminalNode DEFAULT_AUTH() { return getToken(SimpleSpeakQlParser.DEFAULT_AUTH, 0); }
		public TerminalNode DEFINER() { return getToken(SimpleSpeakQlParser.DEFINER, 0); }
		public TerminalNode DELAY_KEY_WRITE() { return getToken(SimpleSpeakQlParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode DES_KEY_FILE() { return getToken(SimpleSpeakQlParser.DES_KEY_FILE, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(SimpleSpeakQlParser.DIAGNOSTICS, 0); }
		public TerminalNode DIRECTORY() { return getToken(SimpleSpeakQlParser.DIRECTORY, 0); }
		public TerminalNode DISABLE() { return getToken(SimpleSpeakQlParser.DISABLE, 0); }
		public TerminalNode DISCARD() { return getToken(SimpleSpeakQlParser.DISCARD, 0); }
		public TerminalNode DISK() { return getToken(SimpleSpeakQlParser.DISK, 0); }
		public TerminalNode DO() { return getToken(SimpleSpeakQlParser.DO, 0); }
		public TerminalNode DUMPFILE() { return getToken(SimpleSpeakQlParser.DUMPFILE, 0); }
		public TerminalNode DUPLICATE() { return getToken(SimpleSpeakQlParser.DUPLICATE, 0); }
		public TerminalNode DYNAMIC() { return getToken(SimpleSpeakQlParser.DYNAMIC, 0); }
		public TerminalNode ENABLE() { return getToken(SimpleSpeakQlParser.ENABLE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(SimpleSpeakQlParser.ENCRYPTION, 0); }
		public TerminalNode ENCRYPTION_KEY_ADMIN() { return getToken(SimpleSpeakQlParser.ENCRYPTION_KEY_ADMIN, 0); }
		public TerminalNode END() { return getToken(SimpleSpeakQlParser.END, 0); }
		public TerminalNode ENDS() { return getToken(SimpleSpeakQlParser.ENDS, 0); }
		public TerminalNode ENGINE() { return getToken(SimpleSpeakQlParser.ENGINE, 0); }
		public TerminalNode ENGINES() { return getToken(SimpleSpeakQlParser.ENGINES, 0); }
		public TerminalNode ERROR() { return getToken(SimpleSpeakQlParser.ERROR, 0); }
		public TerminalNode ERRORS() { return getToken(SimpleSpeakQlParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(SimpleSpeakQlParser.ESCAPE, 0); }
		public TerminalNode EUR() { return getToken(SimpleSpeakQlParser.EUR, 0); }
		public TerminalNode EVEN() { return getToken(SimpleSpeakQlParser.EVEN, 0); }
		public TerminalNode EVENT() { return getToken(SimpleSpeakQlParser.EVENT, 0); }
		public TerminalNode EVENTS() { return getToken(SimpleSpeakQlParser.EVENTS, 0); }
		public TerminalNode EVERY() { return getToken(SimpleSpeakQlParser.EVERY, 0); }
		public TerminalNode EXCEPT() { return getToken(SimpleSpeakQlParser.EXCEPT, 0); }
		public TerminalNode EXCHANGE() { return getToken(SimpleSpeakQlParser.EXCHANGE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(SimpleSpeakQlParser.EXCLUSIVE, 0); }
		public TerminalNode EXPIRE() { return getToken(SimpleSpeakQlParser.EXPIRE, 0); }
		public TerminalNode EXPORT() { return getToken(SimpleSpeakQlParser.EXPORT, 0); }
		public TerminalNode EXTENDED() { return getToken(SimpleSpeakQlParser.EXTENDED, 0); }
		public TerminalNode EXTENT_SIZE() { return getToken(SimpleSpeakQlParser.EXTENT_SIZE, 0); }
		public TerminalNode FAST() { return getToken(SimpleSpeakQlParser.FAST, 0); }
		public TerminalNode FAULTS() { return getToken(SimpleSpeakQlParser.FAULTS, 0); }
		public TerminalNode FIELDS() { return getToken(SimpleSpeakQlParser.FIELDS, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(SimpleSpeakQlParser.FILE_BLOCK_SIZE, 0); }
		public TerminalNode FILTER() { return getToken(SimpleSpeakQlParser.FILTER, 0); }
		public TerminalNode FIREWALL_ADMIN() { return getToken(SimpleSpeakQlParser.FIREWALL_ADMIN, 0); }
		public TerminalNode FIREWALL_USER() { return getToken(SimpleSpeakQlParser.FIREWALL_USER, 0); }
		public TerminalNode FIRST() { return getToken(SimpleSpeakQlParser.FIRST, 0); }
		public TerminalNode FIXED() { return getToken(SimpleSpeakQlParser.FIXED, 0); }
		public TerminalNode FLUSH() { return getToken(SimpleSpeakQlParser.FLUSH, 0); }
		public TerminalNode FOLLOWS() { return getToken(SimpleSpeakQlParser.FOLLOWS, 0); }
		public TerminalNode FOUND() { return getToken(SimpleSpeakQlParser.FOUND, 0); }
		public TerminalNode FULL() { return getToken(SimpleSpeakQlParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(SimpleSpeakQlParser.FUNCTION, 0); }
		public TerminalNode GENERAL() { return getToken(SimpleSpeakQlParser.GENERAL, 0); }
		public TerminalNode GLOBAL() { return getToken(SimpleSpeakQlParser.GLOBAL, 0); }
		public TerminalNode GRANTS() { return getToken(SimpleSpeakQlParser.GRANTS, 0); }
		public TerminalNode GROUP() { return getToken(SimpleSpeakQlParser.GROUP, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(SimpleSpeakQlParser.GROUP_CONCAT, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(SimpleSpeakQlParser.GROUP_REPLICATION, 0); }
		public TerminalNode GROUP_REPLICATION_ADMIN() { return getToken(SimpleSpeakQlParser.GROUP_REPLICATION_ADMIN, 0); }
		public TerminalNode HANDLER() { return getToken(SimpleSpeakQlParser.HANDLER, 0); }
		public TerminalNode HASH() { return getToken(SimpleSpeakQlParser.HASH, 0); }
		public TerminalNode HELP() { return getToken(SimpleSpeakQlParser.HELP, 0); }
		public TerminalNode HOST() { return getToken(SimpleSpeakQlParser.HOST, 0); }
		public TerminalNode HOSTS() { return getToken(SimpleSpeakQlParser.HOSTS, 0); }
		public TerminalNode IDENTIFIED() { return getToken(SimpleSpeakQlParser.IDENTIFIED, 0); }
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(SimpleSpeakQlParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode IMPORT() { return getToken(SimpleSpeakQlParser.IMPORT, 0); }
		public TerminalNode INDEXES() { return getToken(SimpleSpeakQlParser.INDEXES, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(SimpleSpeakQlParser.INITIAL_SIZE, 0); }
		public TerminalNode INNODB_REDO_LOG_ARCHIVE() { return getToken(SimpleSpeakQlParser.INNODB_REDO_LOG_ARCHIVE, 0); }
		public TerminalNode INPLACE() { return getToken(SimpleSpeakQlParser.INPLACE, 0); }
		public TerminalNode INSERT_METHOD() { return getToken(SimpleSpeakQlParser.INSERT_METHOD, 0); }
		public TerminalNode INSTALL() { return getToken(SimpleSpeakQlParser.INSTALL, 0); }
		public TerminalNode INSTANCE() { return getToken(SimpleSpeakQlParser.INSTANCE, 0); }
		public TerminalNode INTERNAL() { return getToken(SimpleSpeakQlParser.INTERNAL, 0); }
		public TerminalNode INVOKER() { return getToken(SimpleSpeakQlParser.INVOKER, 0); }
		public TerminalNode IO() { return getToken(SimpleSpeakQlParser.IO, 0); }
		public TerminalNode IO_THREAD() { return getToken(SimpleSpeakQlParser.IO_THREAD, 0); }
		public TerminalNode IPC() { return getToken(SimpleSpeakQlParser.IPC, 0); }
		public TerminalNode ISO() { return getToken(SimpleSpeakQlParser.ISO, 0); }
		public TerminalNode ISOLATION() { return getToken(SimpleSpeakQlParser.ISOLATION, 0); }
		public TerminalNode ISSUER() { return getToken(SimpleSpeakQlParser.ISSUER, 0); }
		public TerminalNode JIS() { return getToken(SimpleSpeakQlParser.JIS, 0); }
		public TerminalNode JSON() { return getToken(SimpleSpeakQlParser.JSON, 0); }
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(SimpleSpeakQlParser.KEY_BLOCK_SIZE, 0); }
		public TerminalNode LANGUAGE() { return getToken(SimpleSpeakQlParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(SimpleSpeakQlParser.LAST, 0); }
		public TerminalNode LEAVES() { return getToken(SimpleSpeakQlParser.LEAVES, 0); }
		public TerminalNode LESS() { return getToken(SimpleSpeakQlParser.LESS, 0); }
		public TerminalNode LEVEL() { return getToken(SimpleSpeakQlParser.LEVEL, 0); }
		public TerminalNode LIST() { return getToken(SimpleSpeakQlParser.LIST, 0); }
		public TerminalNode LOCAL() { return getToken(SimpleSpeakQlParser.LOCAL, 0); }
		public TerminalNode LOGFILE() { return getToken(SimpleSpeakQlParser.LOGFILE, 0); }
		public TerminalNode LOGS() { return getToken(SimpleSpeakQlParser.LOGS, 0); }
		public TerminalNode MASTER() { return getToken(SimpleSpeakQlParser.MASTER, 0); }
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(SimpleSpeakQlParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(SimpleSpeakQlParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(SimpleSpeakQlParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(SimpleSpeakQlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode MASTER_HOST() { return getToken(SimpleSpeakQlParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(SimpleSpeakQlParser.MASTER_LOG_FILE, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(SimpleSpeakQlParser.MASTER_LOG_POS, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(SimpleSpeakQlParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_PORT() { return getToken(SimpleSpeakQlParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(SimpleSpeakQlParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_SSL() { return getToken(SimpleSpeakQlParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(SimpleSpeakQlParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(SimpleSpeakQlParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(SimpleSpeakQlParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(SimpleSpeakQlParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(SimpleSpeakQlParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(SimpleSpeakQlParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(SimpleSpeakQlParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(SimpleSpeakQlParser.MASTER_TLS_VERSION, 0); }
		public TerminalNode MASTER_USER() { return getToken(SimpleSpeakQlParser.MASTER_USER, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(SimpleSpeakQlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(SimpleSpeakQlParser.MAX_QUERIES_PER_HOUR, 0); }
		public TerminalNode MAX() { return getToken(SimpleSpeakQlParser.MAX, 0); }
		public TerminalNode MAX_ROWS() { return getToken(SimpleSpeakQlParser.MAX_ROWS, 0); }
		public TerminalNode MAX_SIZE() { return getToken(SimpleSpeakQlParser.MAX_SIZE, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(SimpleSpeakQlParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(SimpleSpeakQlParser.MAX_USER_CONNECTIONS, 0); }
		public TerminalNode MEDIUM() { return getToken(SimpleSpeakQlParser.MEDIUM, 0); }
		public TerminalNode MEMBER() { return getToken(SimpleSpeakQlParser.MEMBER, 0); }
		public TerminalNode MEMORY() { return getToken(SimpleSpeakQlParser.MEMORY, 0); }
		public TerminalNode MERGE() { return getToken(SimpleSpeakQlParser.MERGE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(SimpleSpeakQlParser.MESSAGE_TEXT, 0); }
		public TerminalNode MID() { return getToken(SimpleSpeakQlParser.MID, 0); }
		public TerminalNode MIGRATE() { return getToken(SimpleSpeakQlParser.MIGRATE, 0); }
		public TerminalNode MIN() { return getToken(SimpleSpeakQlParser.MIN, 0); }
		public TerminalNode MIN_ROWS() { return getToken(SimpleSpeakQlParser.MIN_ROWS, 0); }
		public TerminalNode MODE() { return getToken(SimpleSpeakQlParser.MODE, 0); }
		public TerminalNode MODIFY() { return getToken(SimpleSpeakQlParser.MODIFY, 0); }
		public TerminalNode MUTEX() { return getToken(SimpleSpeakQlParser.MUTEX, 0); }
		public TerminalNode MYSQL() { return getToken(SimpleSpeakQlParser.MYSQL, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(SimpleSpeakQlParser.MYSQL_ERRNO, 0); }
		public TerminalNode NAME() { return getToken(SimpleSpeakQlParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(SimpleSpeakQlParser.NAMES, 0); }
		public TerminalNode NCHAR() { return getToken(SimpleSpeakQlParser.NCHAR, 0); }
		public TerminalNode NDB_STORED_USER() { return getToken(SimpleSpeakQlParser.NDB_STORED_USER, 0); }
		public TerminalNode NEVER() { return getToken(SimpleSpeakQlParser.NEVER, 0); }
		public TerminalNode NEXT() { return getToken(SimpleSpeakQlParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(SimpleSpeakQlParser.NO, 0); }
		public TerminalNode NODEGROUP() { return getToken(SimpleSpeakQlParser.NODEGROUP, 0); }
		public TerminalNode NONE() { return getToken(SimpleSpeakQlParser.NONE, 0); }
		public TerminalNode NUMBER() { return getToken(SimpleSpeakQlParser.NUMBER, 0); }
		public TerminalNode OFFLINE() { return getToken(SimpleSpeakQlParser.OFFLINE, 0); }
		public TerminalNode ODBC() { return getToken(SimpleSpeakQlParser.ODBC, 0); }
		public TerminalNode OFFSET() { return getToken(SimpleSpeakQlParser.OFFSET, 0); }
		public TerminalNode OF() { return getToken(SimpleSpeakQlParser.OF, 0); }
		public TerminalNode OJ() { return getToken(SimpleSpeakQlParser.OJ, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(SimpleSpeakQlParser.OLD_PASSWORD, 0); }
		public TerminalNode ONE() { return getToken(SimpleSpeakQlParser.ONE, 0); }
		public TerminalNode ONLINE() { return getToken(SimpleSpeakQlParser.ONLINE, 0); }
		public TerminalNode ONLY() { return getToken(SimpleSpeakQlParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(SimpleSpeakQlParser.OPEN, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(SimpleSpeakQlParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode OPTIONS() { return getToken(SimpleSpeakQlParser.OPTIONS, 0); }
		public TerminalNode ORDER() { return getToken(SimpleSpeakQlParser.ORDER, 0); }
		public TerminalNode OWNER() { return getToken(SimpleSpeakQlParser.OWNER, 0); }
		public TerminalNode PACK_KEYS() { return getToken(SimpleSpeakQlParser.PACK_KEYS, 0); }
		public TerminalNode PAGE() { return getToken(SimpleSpeakQlParser.PAGE, 0); }
		public TerminalNode PARSER() { return getToken(SimpleSpeakQlParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(SimpleSpeakQlParser.PARTIAL, 0); }
		public TerminalNode PARTITIONING() { return getToken(SimpleSpeakQlParser.PARTITIONING, 0); }
		public TerminalNode PARTITIONS() { return getToken(SimpleSpeakQlParser.PARTITIONS, 0); }
		public TerminalNode PASSWORD() { return getToken(SimpleSpeakQlParser.PASSWORD, 0); }
		public TerminalNode PERSIST_RO_VARIABLES_ADMIN() { return getToken(SimpleSpeakQlParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
		public TerminalNode PHASE() { return getToken(SimpleSpeakQlParser.PHASE, 0); }
		public TerminalNode PLUGINS() { return getToken(SimpleSpeakQlParser.PLUGINS, 0); }
		public TerminalNode PLUGIN_DIR() { return getToken(SimpleSpeakQlParser.PLUGIN_DIR, 0); }
		public TerminalNode PLUGIN() { return getToken(SimpleSpeakQlParser.PLUGIN, 0); }
		public TerminalNode PORT() { return getToken(SimpleSpeakQlParser.PORT, 0); }
		public TerminalNode PRECEDES() { return getToken(SimpleSpeakQlParser.PRECEDES, 0); }
		public TerminalNode PREPARE() { return getToken(SimpleSpeakQlParser.PREPARE, 0); }
		public TerminalNode PRESERVE() { return getToken(SimpleSpeakQlParser.PRESERVE, 0); }
		public TerminalNode PREV() { return getToken(SimpleSpeakQlParser.PREV, 0); }
		public TerminalNode PROCESSLIST() { return getToken(SimpleSpeakQlParser.PROCESSLIST, 0); }
		public TerminalNode PROFILE() { return getToken(SimpleSpeakQlParser.PROFILE, 0); }
		public TerminalNode PROFILES() { return getToken(SimpleSpeakQlParser.PROFILES, 0); }
		public TerminalNode PROXY() { return getToken(SimpleSpeakQlParser.PROXY, 0); }
		public TerminalNode QUERY() { return getToken(SimpleSpeakQlParser.QUERY, 0); }
		public TerminalNode QUICK() { return getToken(SimpleSpeakQlParser.QUICK, 0); }
		public TerminalNode REBUILD() { return getToken(SimpleSpeakQlParser.REBUILD, 0); }
		public TerminalNode RECOVER() { return getToken(SimpleSpeakQlParser.RECOVER, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(SimpleSpeakQlParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode REDUNDANT() { return getToken(SimpleSpeakQlParser.REDUNDANT, 0); }
		public TerminalNode RELAY() { return getToken(SimpleSpeakQlParser.RELAY, 0); }
		public TerminalNode RELAYLOG() { return getToken(SimpleSpeakQlParser.RELAYLOG, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(SimpleSpeakQlParser.RELAY_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(SimpleSpeakQlParser.RELAY_LOG_POS, 0); }
		public TerminalNode REMOVE() { return getToken(SimpleSpeakQlParser.REMOVE, 0); }
		public TerminalNode REORGANIZE() { return getToken(SimpleSpeakQlParser.REORGANIZE, 0); }
		public TerminalNode REPAIR() { return getToken(SimpleSpeakQlParser.REPAIR, 0); }
		public TerminalNode REPLICATE_DO_DB() { return getToken(SimpleSpeakQlParser.REPLICATE_DO_DB, 0); }
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(SimpleSpeakQlParser.REPLICATE_DO_TABLE, 0); }
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(SimpleSpeakQlParser.REPLICATE_IGNORE_DB, 0); }
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(SimpleSpeakQlParser.REPLICATE_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(SimpleSpeakQlParser.REPLICATE_REWRITE_DB, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(SimpleSpeakQlParser.REPLICATE_WILD_DO_TABLE, 0); }
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(SimpleSpeakQlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATION() { return getToken(SimpleSpeakQlParser.REPLICATION, 0); }
		public TerminalNode REPLICATION_APPLIER() { return getToken(SimpleSpeakQlParser.REPLICATION_APPLIER, 0); }
		public TerminalNode REPLICATION_SLAVE_ADMIN() { return getToken(SimpleSpeakQlParser.REPLICATION_SLAVE_ADMIN, 0); }
		public TerminalNode RESET() { return getToken(SimpleSpeakQlParser.RESET, 0); }
		public TerminalNode RESOURCE_GROUP_ADMIN() { return getToken(SimpleSpeakQlParser.RESOURCE_GROUP_ADMIN, 0); }
		public TerminalNode RESOURCE_GROUP_USER() { return getToken(SimpleSpeakQlParser.RESOURCE_GROUP_USER, 0); }
		public TerminalNode RESUME() { return getToken(SimpleSpeakQlParser.RESUME, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(SimpleSpeakQlParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode RETURNS() { return getToken(SimpleSpeakQlParser.RETURNS, 0); }
		public TerminalNode ROLE() { return getToken(SimpleSpeakQlParser.ROLE, 0); }
		public TerminalNode ROLE_ADMIN() { return getToken(SimpleSpeakQlParser.ROLE_ADMIN, 0); }
		public TerminalNode ROLLBACK() { return getToken(SimpleSpeakQlParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(SimpleSpeakQlParser.ROLLUP, 0); }
		public TerminalNode ROTATE() { return getToken(SimpleSpeakQlParser.ROTATE, 0); }
		public TerminalNode ROW() { return getToken(SimpleSpeakQlParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(SimpleSpeakQlParser.ROWS, 0); }
		public TerminalNode ROW_FORMAT() { return getToken(SimpleSpeakQlParser.ROW_FORMAT, 0); }
		public TerminalNode SAVEPOINT() { return getToken(SimpleSpeakQlParser.SAVEPOINT, 0); }
		public TerminalNode SCHEDULE() { return getToken(SimpleSpeakQlParser.SCHEDULE, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(SimpleSpeakQlParser.SCHEMA_NAME, 0); }
		public TerminalNode SECURITY() { return getToken(SimpleSpeakQlParser.SECURITY, 0); }
		public TerminalNode SERIAL() { return getToken(SimpleSpeakQlParser.SERIAL, 0); }
		public TerminalNode SERVER() { return getToken(SimpleSpeakQlParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(SimpleSpeakQlParser.SESSION, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(SimpleSpeakQlParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SET_USER_ID() { return getToken(SimpleSpeakQlParser.SET_USER_ID, 0); }
		public TerminalNode SHARE() { return getToken(SimpleSpeakQlParser.SHARE, 0); }
		public TerminalNode SHARED() { return getToken(SimpleSpeakQlParser.SHARED, 0); }
		public TerminalNode SHOW_ROUTINE() { return getToken(SimpleSpeakQlParser.SHOW_ROUTINE, 0); }
		public TerminalNode SIGNED() { return getToken(SimpleSpeakQlParser.SIGNED, 0); }
		public TerminalNode SIMPLE() { return getToken(SimpleSpeakQlParser.SIMPLE, 0); }
		public TerminalNode SLAVE() { return getToken(SimpleSpeakQlParser.SLAVE, 0); }
		public TerminalNode SLOW() { return getToken(SimpleSpeakQlParser.SLOW, 0); }
		public TerminalNode SNAPSHOT() { return getToken(SimpleSpeakQlParser.SNAPSHOT, 0); }
		public TerminalNode SOCKET() { return getToken(SimpleSpeakQlParser.SOCKET, 0); }
		public TerminalNode SOME() { return getToken(SimpleSpeakQlParser.SOME, 0); }
		public TerminalNode SONAME() { return getToken(SimpleSpeakQlParser.SONAME, 0); }
		public TerminalNode SOUNDS() { return getToken(SimpleSpeakQlParser.SOUNDS, 0); }
		public TerminalNode SOURCE() { return getToken(SimpleSpeakQlParser.SOURCE, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(SimpleSpeakQlParser.SQL_AFTER_GTIDS, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(SimpleSpeakQlParser.SQL_AFTER_MTS_GAPS, 0); }
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(SimpleSpeakQlParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(SimpleSpeakQlParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(SimpleSpeakQlParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(SimpleSpeakQlParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_THREAD() { return getToken(SimpleSpeakQlParser.SQL_THREAD, 0); }
		public TerminalNode STACKED() { return getToken(SimpleSpeakQlParser.STACKED, 0); }
		public TerminalNode START() { return getToken(SimpleSpeakQlParser.START, 0); }
		public TerminalNode STARTS() { return getToken(SimpleSpeakQlParser.STARTS, 0); }
		public TerminalNode STATS_AUTO_RECALC() { return getToken(SimpleSpeakQlParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode STATS_PERSISTENT() { return getToken(SimpleSpeakQlParser.STATS_PERSISTENT, 0); }
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(SimpleSpeakQlParser.STATS_SAMPLE_PAGES, 0); }
		public TerminalNode STATUS() { return getToken(SimpleSpeakQlParser.STATUS, 0); }
		public TerminalNode STD() { return getToken(SimpleSpeakQlParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(SimpleSpeakQlParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(SimpleSpeakQlParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(SimpleSpeakQlParser.STDDEV_SAMP, 0); }
		public TerminalNode STOP() { return getToken(SimpleSpeakQlParser.STOP, 0); }
		public TerminalNode STORAGE() { return getToken(SimpleSpeakQlParser.STORAGE, 0); }
		public TerminalNode STRING() { return getToken(SimpleSpeakQlParser.STRING, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(SimpleSpeakQlParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode SUBJECT() { return getToken(SimpleSpeakQlParser.SUBJECT, 0); }
		public TerminalNode SUBPARTITION() { return getToken(SimpleSpeakQlParser.SUBPARTITION, 0); }
		public TerminalNode SUBPARTITIONS() { return getToken(SimpleSpeakQlParser.SUBPARTITIONS, 0); }
		public TerminalNode SUM() { return getToken(SimpleSpeakQlParser.SUM, 0); }
		public TerminalNode SUSPEND() { return getToken(SimpleSpeakQlParser.SUSPEND, 0); }
		public TerminalNode SWAPS() { return getToken(SimpleSpeakQlParser.SWAPS, 0); }
		public TerminalNode SWITCHES() { return getToken(SimpleSpeakQlParser.SWITCHES, 0); }
		public TerminalNode SYSTEM_VARIABLES_ADMIN() { return getToken(SimpleSpeakQlParser.SYSTEM_VARIABLES_ADMIN, 0); }
		public TerminalNode TABLE_NAME() { return getToken(SimpleSpeakQlParser.TABLE_NAME, 0); }
		public TerminalNode TABLESPACE() { return getToken(SimpleSpeakQlParser.TABLESPACE, 0); }
		public TerminalNode TABLE_ENCRYPTION_ADMIN() { return getToken(SimpleSpeakQlParser.TABLE_ENCRYPTION_ADMIN, 0); }
		public TerminalNode TEMPORARY() { return getToken(SimpleSpeakQlParser.TEMPORARY, 0); }
		public TerminalNode TEMPTABLE() { return getToken(SimpleSpeakQlParser.TEMPTABLE, 0); }
		public TerminalNode THAN() { return getToken(SimpleSpeakQlParser.THAN, 0); }
		public TerminalNode TRADITIONAL() { return getToken(SimpleSpeakQlParser.TRADITIONAL, 0); }
		public TerminalNode TRANSACTION() { return getToken(SimpleSpeakQlParser.TRANSACTION, 0); }
		public TerminalNode TRANSACTIONAL() { return getToken(SimpleSpeakQlParser.TRANSACTIONAL, 0); }
		public TerminalNode TRIGGERS() { return getToken(SimpleSpeakQlParser.TRIGGERS, 0); }
		public TerminalNode TRUNCATE() { return getToken(SimpleSpeakQlParser.TRUNCATE, 0); }
		public TerminalNode UNDEFINED() { return getToken(SimpleSpeakQlParser.UNDEFINED, 0); }
		public TerminalNode UNDOFILE() { return getToken(SimpleSpeakQlParser.UNDOFILE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(SimpleSpeakQlParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode UNINSTALL() { return getToken(SimpleSpeakQlParser.UNINSTALL, 0); }
		public TerminalNode UNKNOWN() { return getToken(SimpleSpeakQlParser.UNKNOWN, 0); }
		public TerminalNode UNTIL() { return getToken(SimpleSpeakQlParser.UNTIL, 0); }
		public TerminalNode UPGRADE() { return getToken(SimpleSpeakQlParser.UPGRADE, 0); }
		public TerminalNode USA() { return getToken(SimpleSpeakQlParser.USA, 0); }
		public TerminalNode USER() { return getToken(SimpleSpeakQlParser.USER, 0); }
		public TerminalNode USE_FRM() { return getToken(SimpleSpeakQlParser.USE_FRM, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(SimpleSpeakQlParser.USER_RESOURCES, 0); }
		public TerminalNode VALIDATION() { return getToken(SimpleSpeakQlParser.VALIDATION, 0); }
		public TerminalNode VALUE() { return getToken(SimpleSpeakQlParser.VALUE, 0); }
		public TerminalNode VAR_POP() { return getToken(SimpleSpeakQlParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(SimpleSpeakQlParser.VAR_SAMP, 0); }
		public TerminalNode VARIABLES() { return getToken(SimpleSpeakQlParser.VARIABLES, 0); }
		public TerminalNode VARIANCE() { return getToken(SimpleSpeakQlParser.VARIANCE, 0); }
		public TerminalNode VERSION_TOKEN_ADMIN() { return getToken(SimpleSpeakQlParser.VERSION_TOKEN_ADMIN, 0); }
		public TerminalNode VIEW() { return getToken(SimpleSpeakQlParser.VIEW, 0); }
		public TerminalNode WAIT() { return getToken(SimpleSpeakQlParser.WAIT, 0); }
		public TerminalNode WARNINGS() { return getToken(SimpleSpeakQlParser.WARNINGS, 0); }
		public TerminalNode WITHOUT() { return getToken(SimpleSpeakQlParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(SimpleSpeakQlParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(SimpleSpeakQlParser.WRAPPER, 0); }
		public TerminalNode X509() { return getToken(SimpleSpeakQlParser.X509, 0); }
		public TerminalNode XA() { return getToken(SimpleSpeakQlParser.XA, 0); }
		public TerminalNode XA_RECOVER_ADMIN() { return getToken(SimpleSpeakQlParser.XA_RECOVER_ADMIN, 0); }
		public TerminalNode XML() { return getToken(SimpleSpeakQlParser.XML, 0); }
		public TerminalNode SPOKEN_DOT() { return getToken(SimpleSpeakQlParser.SPOKEN_DOT, 0); }
		public KeywordsCanBeIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keywordsCanBeId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterKeywordsCanBeId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitKeywordsCanBeId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitKeywordsCanBeId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeywordsCanBeIdContext keywordsCanBeId() throws RecognitionException {
		KeywordsCanBeIdContext _localctx = new KeywordsCanBeIdContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_keywordsCanBeId);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(552);
			_la = _input.LA(1);
			if ( !(_la==SPOKEN_DOT || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (CURRENT - 74)) | (1L << (DIAGNOSTICS - 74)) | (1L << (EXCEPT - 74)) | (1L << (GROUP - 74)))) != 0) || ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (NUMBER - 150)) | (1L << (ORDER - 150)) | (1L << (STACKED - 150)))) != 0) || ((((_la - 268)) & ~0x3f) == 0 && ((1L << (_la - 268)) & ((1L << (SERIAL - 268)) | (1L << (AVG - 268)) | (1L << (BIT_AND - 268)) | (1L << (BIT_OR - 268)) | (1L << (BIT_XOR - 268)) | (1L << (COUNT - 268)) | (1L << (GROUP_CONCAT - 268)) | (1L << (MAX - 268)) | (1L << (MIN - 268)) | (1L << (STD - 268)))) != 0) || ((((_la - 332)) & ~0x3f) == 0 && ((1L << (_la - 332)) & ((1L << (STDDEV - 332)) | (1L << (STDDEV_POP - 332)) | (1L << (STDDEV_SAMP - 332)) | (1L << (SUM - 332)) | (1L << (VAR_POP - 332)) | (1L << (VAR_SAMP - 332)) | (1L << (VARIANCE - 332)) | (1L << (ACCOUNT - 332)) | (1L << (ACTION - 332)) | (1L << (AFTER - 332)) | (1L << (AGGREGATE - 332)) | (1L << (ALGORITHM - 332)) | (1L << (ANY - 332)) | (1L << (AT - 332)) | (1L << (AUTHORS - 332)) | (1L << (AUTOCOMMIT - 332)) | (1L << (AUTOEXTEND_SIZE - 332)) | (1L << (AUTO_INCREMENT - 332)) | (1L << (AVG_ROW_LENGTH - 332)) | (1L << (BEGIN - 332)) | (1L << (BINLOG - 332)) | (1L << (BIT - 332)) | (1L << (BLOCK - 332)) | (1L << (BOOL - 332)) | (1L << (BOOLEAN - 332)) | (1L << (BTREE - 332)) | (1L << (CACHE - 332)) | (1L << (CASCADED - 332)) | (1L << (CHAIN - 332)) | (1L << (CHANGED - 332)) | (1L << (CHANNEL - 332)) | (1L << (CHECKSUM - 332)) | (1L << (PAGE_CHECKSUM - 332)) | (1L << (CIPHER - 332)) | (1L << (CLASS_ORIGIN - 332)) | (1L << (CLIENT - 332)) | (1L << (CLOSE - 332)) | (1L << (COALESCE - 332)) | (1L << (CODE - 332)) | (1L << (COLUMNS - 332)) | (1L << (COLUMN_FORMAT - 332)) | (1L << (COLUMN_NAME - 332)) | (1L << (COMMENT - 332)) | (1L << (COMMIT - 332)) | (1L << (COMPACT - 332)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (COMPLETION - 396)) | (1L << (COMPRESSED - 396)) | (1L << (COMPRESSION - 396)) | (1L << (CONCURRENT - 396)) | (1L << (CONNECT - 396)) | (1L << (CONNECTION - 396)) | (1L << (CONSISTENT - 396)) | (1L << (CONSTRAINT_CATALOG - 396)) | (1L << (CONSTRAINT_SCHEMA - 396)) | (1L << (CONSTRAINT_NAME - 396)) | (1L << (CONTAINS - 396)) | (1L << (CONTEXT - 396)) | (1L << (CONTRIBUTORS - 396)) | (1L << (COPY - 396)) | (1L << (CPU - 396)) | (1L << (CURSOR_NAME - 396)) | (1L << (DATA - 396)) | (1L << (DATAFILE - 396)) | (1L << (DEALLOCATE - 396)) | (1L << (DEFAULT_AUTH - 396)) | (1L << (DEFINER - 396)) | (1L << (DELAY_KEY_WRITE - 396)) | (1L << (DES_KEY_FILE - 396)) | (1L << (DIRECTORY - 396)) | (1L << (DISABLE - 396)) | (1L << (DISCARD - 396)) | (1L << (DISK - 396)) | (1L << (DO - 396)) | (1L << (DUMPFILE - 396)) | (1L << (DUPLICATE - 396)) | (1L << (DYNAMIC - 396)) | (1L << (ENABLE - 396)) | (1L << (ENCRYPTION - 396)) | (1L << (END - 396)) | (1L << (ENDS - 396)) | (1L << (ENGINE - 396)) | (1L << (ENGINES - 396)) | (1L << (ERROR - 396)) | (1L << (ERRORS - 396)) | (1L << (ESCAPE - 396)) | (1L << (EVEN - 396)) | (1L << (EVENT - 396)) | (1L << (EVENTS - 396)) | (1L << (EVERY - 396)) | (1L << (EXCHANGE - 396)) | (1L << (EXCLUSIVE - 396)) | (1L << (EXPIRE - 396)) | (1L << (EXPORT - 396)) | (1L << (EXTENDED - 396)) | (1L << (EXTENT_SIZE - 396)) | (1L << (FAST - 396)) | (1L << (FAULTS - 396)) | (1L << (FIELDS - 396)) | (1L << (FILE_BLOCK_SIZE - 396)) | (1L << (FILTER - 396)) | (1L << (FIRST - 396)) | (1L << (FIXED - 396)) | (1L << (FLUSH - 396)) | (1L << (FOLLOWS - 396)) | (1L << (FOUND - 396)) | (1L << (FULL - 396)) | (1L << (FUNCTION - 396)) | (1L << (GENERAL - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (GLOBAL - 460)) | (1L << (GRANTS - 460)) | (1L << (GROUP_REPLICATION - 460)) | (1L << (HANDLER - 460)) | (1L << (HASH - 460)) | (1L << (HELP - 460)) | (1L << (HOST - 460)) | (1L << (HOSTS - 460)) | (1L << (IDENTIFIED - 460)) | (1L << (IGNORE_SERVER_IDS - 460)) | (1L << (IMPORT - 460)) | (1L << (INDEXES - 460)) | (1L << (INITIAL_SIZE - 460)) | (1L << (INPLACE - 460)) | (1L << (INSERT_METHOD - 460)) | (1L << (INSTALL - 460)) | (1L << (INSTANCE - 460)) | (1L << (INVOKER - 460)) | (1L << (IO - 460)) | (1L << (IO_THREAD - 460)) | (1L << (IPC - 460)) | (1L << (ISOLATION - 460)) | (1L << (ISSUER - 460)) | (1L << (JSON - 460)) | (1L << (KEY_BLOCK_SIZE - 460)) | (1L << (LANGUAGE - 460)) | (1L << (LAST - 460)) | (1L << (LEAVES - 460)) | (1L << (LESS - 460)) | (1L << (LEVEL - 460)) | (1L << (LIST - 460)) | (1L << (LOCAL - 460)) | (1L << (LOGFILE - 460)) | (1L << (LOGS - 460)) | (1L << (MASTER - 460)) | (1L << (MASTER_AUTO_POSITION - 460)) | (1L << (MASTER_CONNECT_RETRY - 460)) | (1L << (MASTER_DELAY - 460)) | (1L << (MASTER_HEARTBEAT_PERIOD - 460)) | (1L << (MASTER_HOST - 460)) | (1L << (MASTER_LOG_FILE - 460)) | (1L << (MASTER_LOG_POS - 460)) | (1L << (MASTER_PASSWORD - 460)) | (1L << (MASTER_PORT - 460)) | (1L << (MASTER_RETRY_COUNT - 460)) | (1L << (MASTER_SSL - 460)) | (1L << (MASTER_SSL_CA - 460)) | (1L << (MASTER_SSL_CAPATH - 460)) | (1L << (MASTER_SSL_CERT - 460)) | (1L << (MASTER_SSL_CIPHER - 460)) | (1L << (MASTER_SSL_CRL - 460)) | (1L << (MASTER_SSL_CRLPATH - 460)) | (1L << (MASTER_SSL_KEY - 460)) | (1L << (MASTER_TLS_VERSION - 460)) | (1L << (MASTER_USER - 460)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 460)) | (1L << (MAX_QUERIES_PER_HOUR - 460)) | (1L << (MAX_ROWS - 460)) | (1L << (MAX_SIZE - 460)) | (1L << (MAX_UPDATES_PER_HOUR - 460)) | (1L << (MAX_USER_CONNECTIONS - 460)) | (1L << (MEDIUM - 460)) | (1L << (MEMBER - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (MERGE - 524)) | (1L << (MESSAGE_TEXT - 524)) | (1L << (MID - 524)) | (1L << (MIGRATE - 524)) | (1L << (MIN_ROWS - 524)) | (1L << (MODE - 524)) | (1L << (MODIFY - 524)) | (1L << (MUTEX - 524)) | (1L << (MYSQL - 524)) | (1L << (MYSQL_ERRNO - 524)) | (1L << (NAME - 524)) | (1L << (NAMES - 524)) | (1L << (NCHAR - 524)) | (1L << (NEVER - 524)) | (1L << (NEXT - 524)) | (1L << (NO - 524)) | (1L << (NODEGROUP - 524)) | (1L << (NONE - 524)) | (1L << (ODBC - 524)) | (1L << (OFFLINE - 524)) | (1L << (OFFSET - 524)) | (1L << (OF - 524)) | (1L << (OJ - 524)) | (1L << (OLD_PASSWORD - 524)) | (1L << (ONE - 524)) | (1L << (ONLINE - 524)) | (1L << (ONLY - 524)) | (1L << (OPEN - 524)) | (1L << (OPTIMIZER_COSTS - 524)) | (1L << (OPTIONS - 524)) | (1L << (OWNER - 524)) | (1L << (PACK_KEYS - 524)) | (1L << (PAGE - 524)) | (1L << (PARSER - 524)) | (1L << (PARTIAL - 524)) | (1L << (PARTITIONING - 524)) | (1L << (PARTITIONS - 524)) | (1L << (PASSWORD - 524)) | (1L << (PHASE - 524)) | (1L << (PLUGIN - 524)) | (1L << (PLUGIN_DIR - 524)) | (1L << (PLUGINS - 524)) | (1L << (PORT - 524)) | (1L << (PRECEDES - 524)) | (1L << (PREPARE - 524)) | (1L << (PRESERVE - 524)) | (1L << (PREV - 524)) | (1L << (PROCESSLIST - 524)) | (1L << (PROFILE - 524)) | (1L << (PROFILES - 524)) | (1L << (PROXY - 524)) | (1L << (QUERY - 524)) | (1L << (QUICK - 524)) | (1L << (REBUILD - 524)) | (1L << (RECOVER - 524)) | (1L << (REDO_BUFFER_SIZE - 524)) | (1L << (REDUNDANT - 524)) | (1L << (RELAY - 524)) | (1L << (RELAY_LOG_FILE - 524)) | (1L << (RELAY_LOG_POS - 524)) | (1L << (RELAYLOG - 524)) | (1L << (REMOVE - 524)) | (1L << (REORGANIZE - 524)))) != 0) || ((((_la - 588)) & ~0x3f) == 0 && ((1L << (_la - 588)) & ((1L << (REPAIR - 588)) | (1L << (REPLICATE_DO_DB - 588)) | (1L << (REPLICATE_DO_TABLE - 588)) | (1L << (REPLICATE_IGNORE_DB - 588)) | (1L << (REPLICATE_IGNORE_TABLE - 588)) | (1L << (REPLICATE_REWRITE_DB - 588)) | (1L << (REPLICATE_WILD_DO_TABLE - 588)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 588)) | (1L << (REPLICATION - 588)) | (1L << (RESET - 588)) | (1L << (RESUME - 588)) | (1L << (RETURNED_SQLSTATE - 588)) | (1L << (RETURNS - 588)) | (1L << (ROLE - 588)) | (1L << (ROLLBACK - 588)) | (1L << (ROLLUP - 588)) | (1L << (ROTATE - 588)) | (1L << (ROW - 588)) | (1L << (ROWS - 588)) | (1L << (ROW_FORMAT - 588)) | (1L << (SAVEPOINT - 588)) | (1L << (SCHEDULE - 588)) | (1L << (SECURITY - 588)) | (1L << (SERVER - 588)) | (1L << (SESSION - 588)) | (1L << (SHARE - 588)) | (1L << (SHARED - 588)) | (1L << (SIGNED - 588)) | (1L << (SIMPLE - 588)) | (1L << (SLAVE - 588)) | (1L << (SLOW - 588)) | (1L << (SNAPSHOT - 588)) | (1L << (SOCKET - 588)) | (1L << (SOME - 588)) | (1L << (SONAME - 588)) | (1L << (SOUNDS - 588)) | (1L << (SOURCE - 588)) | (1L << (SQL_AFTER_GTIDS - 588)) | (1L << (SQL_AFTER_MTS_GAPS - 588)) | (1L << (SQL_BEFORE_GTIDS - 588)) | (1L << (SQL_BUFFER_RESULT - 588)) | (1L << (SQL_CACHE - 588)) | (1L << (SQL_NO_CACHE - 588)) | (1L << (SQL_THREAD - 588)) | (1L << (START - 588)) | (1L << (STARTS - 588)) | (1L << (STATS_AUTO_RECALC - 588)) | (1L << (STATS_PERSISTENT - 588)) | (1L << (STATS_SAMPLE_PAGES - 588)) | (1L << (STATUS - 588)) | (1L << (STOP - 588)) | (1L << (STORAGE - 588)) | (1L << (STRING - 588)) | (1L << (SUBCLASS_ORIGIN - 588)) | (1L << (SUBJECT - 588)) | (1L << (SUBPARTITION - 588)) | (1L << (SUBPARTITIONS - 588)) | (1L << (SUSPEND - 588)) | (1L << (SWAPS - 588)) | (1L << (SWITCHES - 588)) | (1L << (TABLE_NAME - 588)) | (1L << (TABLESPACE - 588)))) != 0) || ((((_la - 653)) & ~0x3f) == 0 && ((1L << (_la - 653)) & ((1L << (TEMPORARY - 653)) | (1L << (TEMPTABLE - 653)) | (1L << (THAN - 653)) | (1L << (TRADITIONAL - 653)) | (1L << (TRANSACTION - 653)) | (1L << (TRANSACTIONAL - 653)) | (1L << (TRIGGERS - 653)) | (1L << (TRUNCATE - 653)) | (1L << (UNDEFINED - 653)) | (1L << (UNDOFILE - 653)) | (1L << (UNDO_BUFFER_SIZE - 653)) | (1L << (UNINSTALL - 653)) | (1L << (UNKNOWN - 653)) | (1L << (UNTIL - 653)) | (1L << (UPGRADE - 653)) | (1L << (USER - 653)) | (1L << (USE_FRM - 653)) | (1L << (USER_RESOURCES - 653)) | (1L << (VALIDATION - 653)) | (1L << (VALUE - 653)) | (1L << (VARIABLES - 653)) | (1L << (VIEW - 653)) | (1L << (WAIT - 653)) | (1L << (WARNINGS - 653)) | (1L << (WITHOUT - 653)) | (1L << (WORK - 653)) | (1L << (WRAPPER - 653)) | (1L << (X509 - 653)) | (1L << (XA - 653)) | (1L << (XML - 653)) | (1L << (EUR - 653)) | (1L << (USA - 653)) | (1L << (JIS - 653)) | (1L << (ISO - 653)) | (1L << (INTERNAL - 653)) | (1L << (AUDIT_ADMIN - 653)) | (1L << (BACKUP_ADMIN - 653)) | (1L << (BINLOG_ADMIN - 653)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 653)) | (1L << (CLONE_ADMIN - 653)) | (1L << (CONNECTION_ADMIN - 653)) | (1L << (ENCRYPTION_KEY_ADMIN - 653)))) != 0) || ((((_la - 717)) & ~0x3f) == 0 && ((1L << (_la - 717)) & ((1L << (FIREWALL_ADMIN - 717)) | (1L << (FIREWALL_USER - 717)) | (1L << (GROUP_REPLICATION_ADMIN - 717)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 717)) | (1L << (NDB_STORED_USER - 717)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 717)) | (1L << (REPLICATION_APPLIER - 717)) | (1L << (REPLICATION_SLAVE_ADMIN - 717)) | (1L << (RESOURCE_GROUP_ADMIN - 717)) | (1L << (RESOURCE_GROUP_USER - 717)) | (1L << (ROLE_ADMIN - 717)) | (1L << (SESSION_VARIABLES_ADMIN - 717)) | (1L << (SET_USER_ID - 717)) | (1L << (SHOW_ROUTINE - 717)) | (1L << (SYSTEM_VARIABLES_ADMIN - 717)) | (1L << (TABLE_ENCRYPTION_ADMIN - 717)) | (1L << (VERSION_TOKEN_ADMIN - 717)) | (1L << (XA_RECOVER_ADMIN - 717)))) != 0) || _la==MEMORY || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionNameBaseContext extends ParserRuleContext {
		public TerminalNode ABS() { return getToken(SimpleSpeakQlParser.ABS, 0); }
		public TerminalNode ACOS() { return getToken(SimpleSpeakQlParser.ACOS, 0); }
		public TerminalNode ADDDATE() { return getToken(SimpleSpeakQlParser.ADDDATE, 0); }
		public TerminalNode ADDTIME() { return getToken(SimpleSpeakQlParser.ADDTIME, 0); }
		public TerminalNode AES_DECRYPT() { return getToken(SimpleSpeakQlParser.AES_DECRYPT, 0); }
		public TerminalNode AES_ENCRYPT() { return getToken(SimpleSpeakQlParser.AES_ENCRYPT, 0); }
		public TerminalNode AREA() { return getToken(SimpleSpeakQlParser.AREA, 0); }
		public TerminalNode ASBINARY() { return getToken(SimpleSpeakQlParser.ASBINARY, 0); }
		public TerminalNode ASIN() { return getToken(SimpleSpeakQlParser.ASIN, 0); }
		public TerminalNode ASTEXT() { return getToken(SimpleSpeakQlParser.ASTEXT, 0); }
		public TerminalNode ASWKB() { return getToken(SimpleSpeakQlParser.ASWKB, 0); }
		public TerminalNode ASWKT() { return getToken(SimpleSpeakQlParser.ASWKT, 0); }
		public TerminalNode ASYMMETRIC_DECRYPT() { return getToken(SimpleSpeakQlParser.ASYMMETRIC_DECRYPT, 0); }
		public TerminalNode ASYMMETRIC_DERIVE() { return getToken(SimpleSpeakQlParser.ASYMMETRIC_DERIVE, 0); }
		public TerminalNode ASYMMETRIC_ENCRYPT() { return getToken(SimpleSpeakQlParser.ASYMMETRIC_ENCRYPT, 0); }
		public TerminalNode ASYMMETRIC_SIGN() { return getToken(SimpleSpeakQlParser.ASYMMETRIC_SIGN, 0); }
		public TerminalNode ASYMMETRIC_VERIFY() { return getToken(SimpleSpeakQlParser.ASYMMETRIC_VERIFY, 0); }
		public TerminalNode ATAN() { return getToken(SimpleSpeakQlParser.ATAN, 0); }
		public TerminalNode ATAN2() { return getToken(SimpleSpeakQlParser.ATAN2, 0); }
		public TerminalNode BENCHMARK() { return getToken(SimpleSpeakQlParser.BENCHMARK, 0); }
		public TerminalNode BIN() { return getToken(SimpleSpeakQlParser.BIN, 0); }
		public TerminalNode BIT_COUNT() { return getToken(SimpleSpeakQlParser.BIT_COUNT, 0); }
		public TerminalNode BIT_LENGTH() { return getToken(SimpleSpeakQlParser.BIT_LENGTH, 0); }
		public TerminalNode BUFFER() { return getToken(SimpleSpeakQlParser.BUFFER, 0); }
		public TerminalNode CEIL() { return getToken(SimpleSpeakQlParser.CEIL, 0); }
		public TerminalNode CEILING() { return getToken(SimpleSpeakQlParser.CEILING, 0); }
		public TerminalNode CENTROID() { return getToken(SimpleSpeakQlParser.CENTROID, 0); }
		public TerminalNode CHARACTER_LENGTH() { return getToken(SimpleSpeakQlParser.CHARACTER_LENGTH, 0); }
		public TerminalNode CHARSET() { return getToken(SimpleSpeakQlParser.CHARSET, 0); }
		public TerminalNode CHAR_LENGTH() { return getToken(SimpleSpeakQlParser.CHAR_LENGTH, 0); }
		public TerminalNode COERCIBILITY() { return getToken(SimpleSpeakQlParser.COERCIBILITY, 0); }
		public TerminalNode COLLATION() { return getToken(SimpleSpeakQlParser.COLLATION, 0); }
		public TerminalNode COMPRESS() { return getToken(SimpleSpeakQlParser.COMPRESS, 0); }
		public TerminalNode CONCAT() { return getToken(SimpleSpeakQlParser.CONCAT, 0); }
		public TerminalNode CONCAT_WS() { return getToken(SimpleSpeakQlParser.CONCAT_WS, 0); }
		public TerminalNode CONNECTION_ID() { return getToken(SimpleSpeakQlParser.CONNECTION_ID, 0); }
		public TerminalNode CONV() { return getToken(SimpleSpeakQlParser.CONV, 0); }
		public TerminalNode CONVERT_TZ() { return getToken(SimpleSpeakQlParser.CONVERT_TZ, 0); }
		public TerminalNode COS() { return getToken(SimpleSpeakQlParser.COS, 0); }
		public TerminalNode COT() { return getToken(SimpleSpeakQlParser.COT, 0); }
		public TerminalNode COUNT() { return getToken(SimpleSpeakQlParser.COUNT, 0); }
		public TerminalNode CRC32() { return getToken(SimpleSpeakQlParser.CRC32, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PRIV_KEY() { return getToken(SimpleSpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PUB_KEY() { return getToken(SimpleSpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY, 0); }
		public TerminalNode CREATE_DH_PARAMETERS() { return getToken(SimpleSpeakQlParser.CREATE_DH_PARAMETERS, 0); }
		public TerminalNode CREATE_DIGEST() { return getToken(SimpleSpeakQlParser.CREATE_DIGEST, 0); }
		public TerminalNode CROSSES() { return getToken(SimpleSpeakQlParser.CROSSES, 0); }
		public TerminalNode DATABASE() { return getToken(SimpleSpeakQlParser.DATABASE, 0); }
		public TerminalNode DATE() { return getToken(SimpleSpeakQlParser.DATE, 0); }
		public TerminalNode DATEDIFF() { return getToken(SimpleSpeakQlParser.DATEDIFF, 0); }
		public TerminalNode DATE_FORMAT() { return getToken(SimpleSpeakQlParser.DATE_FORMAT, 0); }
		public TerminalNode DAY() { return getToken(SimpleSpeakQlParser.DAY, 0); }
		public TerminalNode DAYNAME() { return getToken(SimpleSpeakQlParser.DAYNAME, 0); }
		public TerminalNode DAYOFMONTH() { return getToken(SimpleSpeakQlParser.DAYOFMONTH, 0); }
		public TerminalNode DAYOFWEEK() { return getToken(SimpleSpeakQlParser.DAYOFWEEK, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(SimpleSpeakQlParser.DAYOFYEAR, 0); }
		public TerminalNode DECODE() { return getToken(SimpleSpeakQlParser.DECODE, 0); }
		public TerminalNode DEGREES() { return getToken(SimpleSpeakQlParser.DEGREES, 0); }
		public TerminalNode DES_DECRYPT() { return getToken(SimpleSpeakQlParser.DES_DECRYPT, 0); }
		public TerminalNode DES_ENCRYPT() { return getToken(SimpleSpeakQlParser.DES_ENCRYPT, 0); }
		public TerminalNode DIMENSION() { return getToken(SimpleSpeakQlParser.DIMENSION, 0); }
		public TerminalNode DISJOINT() { return getToken(SimpleSpeakQlParser.DISJOINT, 0); }
		public TerminalNode ELT() { return getToken(SimpleSpeakQlParser.ELT, 0); }
		public TerminalNode ENCODE() { return getToken(SimpleSpeakQlParser.ENCODE, 0); }
		public TerminalNode ENCRYPT() { return getToken(SimpleSpeakQlParser.ENCRYPT, 0); }
		public TerminalNode ENDPOINT() { return getToken(SimpleSpeakQlParser.ENDPOINT, 0); }
		public TerminalNode ENVELOPE() { return getToken(SimpleSpeakQlParser.ENVELOPE, 0); }
		public TerminalNode EQUALS() { return getToken(SimpleSpeakQlParser.EQUALS, 0); }
		public TerminalNode EXP() { return getToken(SimpleSpeakQlParser.EXP, 0); }
		public TerminalNode EXPORT_SET() { return getToken(SimpleSpeakQlParser.EXPORT_SET, 0); }
		public TerminalNode EXTERIORRING() { return getToken(SimpleSpeakQlParser.EXTERIORRING, 0); }
		public TerminalNode EXTRACTVALUE() { return getToken(SimpleSpeakQlParser.EXTRACTVALUE, 0); }
		public TerminalNode FIELD() { return getToken(SimpleSpeakQlParser.FIELD, 0); }
		public TerminalNode FIND_IN_SET() { return getToken(SimpleSpeakQlParser.FIND_IN_SET, 0); }
		public TerminalNode FLOOR() { return getToken(SimpleSpeakQlParser.FLOOR, 0); }
		public TerminalNode FORMAT() { return getToken(SimpleSpeakQlParser.FORMAT, 0); }
		public TerminalNode FOUND_ROWS() { return getToken(SimpleSpeakQlParser.FOUND_ROWS, 0); }
		public TerminalNode FROM_BASE64() { return getToken(SimpleSpeakQlParser.FROM_BASE64, 0); }
		public TerminalNode FROM_DAYS() { return getToken(SimpleSpeakQlParser.FROM_DAYS, 0); }
		public TerminalNode FROM_UNIXTIME() { return getToken(SimpleSpeakQlParser.FROM_UNIXTIME, 0); }
		public TerminalNode GEOMCOLLFROMTEXT() { return getToken(SimpleSpeakQlParser.GEOMCOLLFROMTEXT, 0); }
		public TerminalNode GEOMCOLLFROMWKB() { return getToken(SimpleSpeakQlParser.GEOMCOLLFROMWKB, 0); }
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(SimpleSpeakQlParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMTEXT() { return getToken(SimpleSpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMWKB() { return getToken(SimpleSpeakQlParser.GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode GEOMETRYFROMTEXT() { return getToken(SimpleSpeakQlParser.GEOMETRYFROMTEXT, 0); }
		public TerminalNode GEOMETRYFROMWKB() { return getToken(SimpleSpeakQlParser.GEOMETRYFROMWKB, 0); }
		public TerminalNode GEOMETRYN() { return getToken(SimpleSpeakQlParser.GEOMETRYN, 0); }
		public TerminalNode GEOMETRYTYPE() { return getToken(SimpleSpeakQlParser.GEOMETRYTYPE, 0); }
		public TerminalNode GEOMFROMTEXT() { return getToken(SimpleSpeakQlParser.GEOMFROMTEXT, 0); }
		public TerminalNode GEOMFROMWKB() { return getToken(SimpleSpeakQlParser.GEOMFROMWKB, 0); }
		public TerminalNode GET_FORMAT() { return getToken(SimpleSpeakQlParser.GET_FORMAT, 0); }
		public TerminalNode GET_LOCK() { return getToken(SimpleSpeakQlParser.GET_LOCK, 0); }
		public TerminalNode GLENGTH() { return getToken(SimpleSpeakQlParser.GLENGTH, 0); }
		public TerminalNode GREATEST() { return getToken(SimpleSpeakQlParser.GREATEST, 0); }
		public TerminalNode GTID_SUBSET() { return getToken(SimpleSpeakQlParser.GTID_SUBSET, 0); }
		public TerminalNode GTID_SUBTRACT() { return getToken(SimpleSpeakQlParser.GTID_SUBTRACT, 0); }
		public TerminalNode HEX() { return getToken(SimpleSpeakQlParser.HEX, 0); }
		public TerminalNode HOUR() { return getToken(SimpleSpeakQlParser.HOUR, 0); }
		public TerminalNode IFNULL() { return getToken(SimpleSpeakQlParser.IFNULL, 0); }
		public TerminalNode INET6_ATON() { return getToken(SimpleSpeakQlParser.INET6_ATON, 0); }
		public TerminalNode INET6_NTOA() { return getToken(SimpleSpeakQlParser.INET6_NTOA, 0); }
		public TerminalNode INET_ATON() { return getToken(SimpleSpeakQlParser.INET_ATON, 0); }
		public TerminalNode INET_NTOA() { return getToken(SimpleSpeakQlParser.INET_NTOA, 0); }
		public TerminalNode INSTR() { return getToken(SimpleSpeakQlParser.INSTR, 0); }
		public TerminalNode INTERIORRINGN() { return getToken(SimpleSpeakQlParser.INTERIORRINGN, 0); }
		public TerminalNode INTERSECTS() { return getToken(SimpleSpeakQlParser.INTERSECTS, 0); }
		public TerminalNode INVISIBLE() { return getToken(SimpleSpeakQlParser.INVISIBLE, 0); }
		public TerminalNode ISCLOSED() { return getToken(SimpleSpeakQlParser.ISCLOSED, 0); }
		public TerminalNode ISEMPTY() { return getToken(SimpleSpeakQlParser.ISEMPTY, 0); }
		public TerminalNode ISNULL() { return getToken(SimpleSpeakQlParser.ISNULL, 0); }
		public TerminalNode ISSIMPLE() { return getToken(SimpleSpeakQlParser.ISSIMPLE, 0); }
		public TerminalNode IS_FREE_LOCK() { return getToken(SimpleSpeakQlParser.IS_FREE_LOCK, 0); }
		public TerminalNode IS_IPV4() { return getToken(SimpleSpeakQlParser.IS_IPV4, 0); }
		public TerminalNode IS_IPV4_COMPAT() { return getToken(SimpleSpeakQlParser.IS_IPV4_COMPAT, 0); }
		public TerminalNode IS_IPV4_MAPPED() { return getToken(SimpleSpeakQlParser.IS_IPV4_MAPPED, 0); }
		public TerminalNode IS_IPV6() { return getToken(SimpleSpeakQlParser.IS_IPV6, 0); }
		public TerminalNode IS_USED_LOCK() { return getToken(SimpleSpeakQlParser.IS_USED_LOCK, 0); }
		public TerminalNode LAST_INSERT_ID() { return getToken(SimpleSpeakQlParser.LAST_INSERT_ID, 0); }
		public TerminalNode LCASE() { return getToken(SimpleSpeakQlParser.LCASE, 0); }
		public TerminalNode LEAST() { return getToken(SimpleSpeakQlParser.LEAST, 0); }
		public TerminalNode LEFT() { return getToken(SimpleSpeakQlParser.LEFT, 0); }
		public TerminalNode LENGTH() { return getToken(SimpleSpeakQlParser.LENGTH, 0); }
		public TerminalNode LINEFROMTEXT() { return getToken(SimpleSpeakQlParser.LINEFROMTEXT, 0); }
		public TerminalNode LINEFROMWKB() { return getToken(SimpleSpeakQlParser.LINEFROMWKB, 0); }
		public TerminalNode LINESTRING() { return getToken(SimpleSpeakQlParser.LINESTRING, 0); }
		public TerminalNode LINESTRINGFROMTEXT() { return getToken(SimpleSpeakQlParser.LINESTRINGFROMTEXT, 0); }
		public TerminalNode LINESTRINGFROMWKB() { return getToken(SimpleSpeakQlParser.LINESTRINGFROMWKB, 0); }
		public TerminalNode LN() { return getToken(SimpleSpeakQlParser.LN, 0); }
		public TerminalNode LOAD_FILE() { return getToken(SimpleSpeakQlParser.LOAD_FILE, 0); }
		public TerminalNode LOCATE() { return getToken(SimpleSpeakQlParser.LOCATE, 0); }
		public TerminalNode LOG() { return getToken(SimpleSpeakQlParser.LOG, 0); }
		public TerminalNode LOG10() { return getToken(SimpleSpeakQlParser.LOG10, 0); }
		public TerminalNode LOG2() { return getToken(SimpleSpeakQlParser.LOG2, 0); }
		public TerminalNode LOWER() { return getToken(SimpleSpeakQlParser.LOWER, 0); }
		public TerminalNode LPAD() { return getToken(SimpleSpeakQlParser.LPAD, 0); }
		public TerminalNode LTRIM() { return getToken(SimpleSpeakQlParser.LTRIM, 0); }
		public TerminalNode MAKEDATE() { return getToken(SimpleSpeakQlParser.MAKEDATE, 0); }
		public TerminalNode MAKETIME() { return getToken(SimpleSpeakQlParser.MAKETIME, 0); }
		public TerminalNode MAKE_SET() { return getToken(SimpleSpeakQlParser.MAKE_SET, 0); }
		public TerminalNode MASTER_POS_WAIT() { return getToken(SimpleSpeakQlParser.MASTER_POS_WAIT, 0); }
		public TerminalNode MBRCONTAINS() { return getToken(SimpleSpeakQlParser.MBRCONTAINS, 0); }
		public TerminalNode MBRDISJOINT() { return getToken(SimpleSpeakQlParser.MBRDISJOINT, 0); }
		public TerminalNode MBREQUAL() { return getToken(SimpleSpeakQlParser.MBREQUAL, 0); }
		public TerminalNode MBRINTERSECTS() { return getToken(SimpleSpeakQlParser.MBRINTERSECTS, 0); }
		public TerminalNode MBROVERLAPS() { return getToken(SimpleSpeakQlParser.MBROVERLAPS, 0); }
		public TerminalNode MBRTOUCHES() { return getToken(SimpleSpeakQlParser.MBRTOUCHES, 0); }
		public TerminalNode MBRWITHIN() { return getToken(SimpleSpeakQlParser.MBRWITHIN, 0); }
		public TerminalNode MD5() { return getToken(SimpleSpeakQlParser.MD5, 0); }
		public TerminalNode MICROSECOND() { return getToken(SimpleSpeakQlParser.MICROSECOND, 0); }
		public TerminalNode MINUTE() { return getToken(SimpleSpeakQlParser.MINUTE, 0); }
		public TerminalNode MLINEFROMTEXT() { return getToken(SimpleSpeakQlParser.MLINEFROMTEXT, 0); }
		public TerminalNode MLINEFROMWKB() { return getToken(SimpleSpeakQlParser.MLINEFROMWKB, 0); }
		public TerminalNode MOD() { return getToken(SimpleSpeakQlParser.MOD, 0); }
		public TerminalNode MONTH() { return getToken(SimpleSpeakQlParser.MONTH, 0); }
		public TerminalNode MONTHNAME() { return getToken(SimpleSpeakQlParser.MONTHNAME, 0); }
		public TerminalNode MPOINTFROMTEXT() { return getToken(SimpleSpeakQlParser.MPOINTFROMTEXT, 0); }
		public TerminalNode MPOINTFROMWKB() { return getToken(SimpleSpeakQlParser.MPOINTFROMWKB, 0); }
		public TerminalNode MPOLYFROMTEXT() { return getToken(SimpleSpeakQlParser.MPOLYFROMTEXT, 0); }
		public TerminalNode MPOLYFROMWKB() { return getToken(SimpleSpeakQlParser.MPOLYFROMWKB, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(SimpleSpeakQlParser.MULTILINESTRING, 0); }
		public TerminalNode MULTILINESTRINGFROMTEXT() { return getToken(SimpleSpeakQlParser.MULTILINESTRINGFROMTEXT, 0); }
		public TerminalNode MULTILINESTRINGFROMWKB() { return getToken(SimpleSpeakQlParser.MULTILINESTRINGFROMWKB, 0); }
		public TerminalNode MULTIPOINT() { return getToken(SimpleSpeakQlParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOINTFROMTEXT() { return getToken(SimpleSpeakQlParser.MULTIPOINTFROMTEXT, 0); }
		public TerminalNode MULTIPOINTFROMWKB() { return getToken(SimpleSpeakQlParser.MULTIPOINTFROMWKB, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(SimpleSpeakQlParser.MULTIPOLYGON, 0); }
		public TerminalNode MULTIPOLYGONFROMTEXT() { return getToken(SimpleSpeakQlParser.MULTIPOLYGONFROMTEXT, 0); }
		public TerminalNode MULTIPOLYGONFROMWKB() { return getToken(SimpleSpeakQlParser.MULTIPOLYGONFROMWKB, 0); }
		public TerminalNode NAME_CONST() { return getToken(SimpleSpeakQlParser.NAME_CONST, 0); }
		public TerminalNode NULLIF() { return getToken(SimpleSpeakQlParser.NULLIF, 0); }
		public TerminalNode NUMGEOMETRIES() { return getToken(SimpleSpeakQlParser.NUMGEOMETRIES, 0); }
		public TerminalNode NUMINTERIORRINGS() { return getToken(SimpleSpeakQlParser.NUMINTERIORRINGS, 0); }
		public TerminalNode NUMPOINTS() { return getToken(SimpleSpeakQlParser.NUMPOINTS, 0); }
		public TerminalNode OCT() { return getToken(SimpleSpeakQlParser.OCT, 0); }
		public TerminalNode OCTET_LENGTH() { return getToken(SimpleSpeakQlParser.OCTET_LENGTH, 0); }
		public TerminalNode ORD() { return getToken(SimpleSpeakQlParser.ORD, 0); }
		public TerminalNode OVERLAPS() { return getToken(SimpleSpeakQlParser.OVERLAPS, 0); }
		public TerminalNode PERIOD_ADD() { return getToken(SimpleSpeakQlParser.PERIOD_ADD, 0); }
		public TerminalNode PERIOD_DIFF() { return getToken(SimpleSpeakQlParser.PERIOD_DIFF, 0); }
		public TerminalNode PI() { return getToken(SimpleSpeakQlParser.PI, 0); }
		public TerminalNode POINT() { return getToken(SimpleSpeakQlParser.POINT, 0); }
		public TerminalNode POINTFROMTEXT() { return getToken(SimpleSpeakQlParser.POINTFROMTEXT, 0); }
		public TerminalNode POINTFROMWKB() { return getToken(SimpleSpeakQlParser.POINTFROMWKB, 0); }
		public TerminalNode POINTN() { return getToken(SimpleSpeakQlParser.POINTN, 0); }
		public TerminalNode POLYFROMTEXT() { return getToken(SimpleSpeakQlParser.POLYFROMTEXT, 0); }
		public TerminalNode POLYFROMWKB() { return getToken(SimpleSpeakQlParser.POLYFROMWKB, 0); }
		public TerminalNode POLYGON() { return getToken(SimpleSpeakQlParser.POLYGON, 0); }
		public TerminalNode POLYGONFROMTEXT() { return getToken(SimpleSpeakQlParser.POLYGONFROMTEXT, 0); }
		public TerminalNode POLYGONFROMWKB() { return getToken(SimpleSpeakQlParser.POLYGONFROMWKB, 0); }
		public TerminalNode POSITION() { return getToken(SimpleSpeakQlParser.POSITION, 0); }
		public TerminalNode POW() { return getToken(SimpleSpeakQlParser.POW, 0); }
		public TerminalNode POWER() { return getToken(SimpleSpeakQlParser.POWER, 0); }
		public TerminalNode QUARTER() { return getToken(SimpleSpeakQlParser.QUARTER, 0); }
		public TerminalNode QUOTE() { return getToken(SimpleSpeakQlParser.QUOTE, 0); }
		public TerminalNode RADIANS() { return getToken(SimpleSpeakQlParser.RADIANS, 0); }
		public TerminalNode RAND() { return getToken(SimpleSpeakQlParser.RAND, 0); }
		public TerminalNode RANDOM_BYTES() { return getToken(SimpleSpeakQlParser.RANDOM_BYTES, 0); }
		public TerminalNode RELEASE_LOCK() { return getToken(SimpleSpeakQlParser.RELEASE_LOCK, 0); }
		public TerminalNode REVERSE() { return getToken(SimpleSpeakQlParser.REVERSE, 0); }
		public TerminalNode RIGHT() { return getToken(SimpleSpeakQlParser.RIGHT, 0); }
		public TerminalNode ROUND() { return getToken(SimpleSpeakQlParser.ROUND, 0); }
		public TerminalNode ROW_COUNT() { return getToken(SimpleSpeakQlParser.ROW_COUNT, 0); }
		public TerminalNode RPAD() { return getToken(SimpleSpeakQlParser.RPAD, 0); }
		public TerminalNode RTRIM() { return getToken(SimpleSpeakQlParser.RTRIM, 0); }
		public TerminalNode SECOND() { return getToken(SimpleSpeakQlParser.SECOND, 0); }
		public TerminalNode SEC_TO_TIME() { return getToken(SimpleSpeakQlParser.SEC_TO_TIME, 0); }
		public TerminalNode SCHEMA() { return getToken(SimpleSpeakQlParser.SCHEMA, 0); }
		public TerminalNode SESSION_USER() { return getToken(SimpleSpeakQlParser.SESSION_USER, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(SimpleSpeakQlParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SHA() { return getToken(SimpleSpeakQlParser.SHA, 0); }
		public TerminalNode SHA1() { return getToken(SimpleSpeakQlParser.SHA1, 0); }
		public TerminalNode SHA2() { return getToken(SimpleSpeakQlParser.SHA2, 0); }
		public TerminalNode SIGN() { return getToken(SimpleSpeakQlParser.SIGN, 0); }
		public TerminalNode SIN() { return getToken(SimpleSpeakQlParser.SIN, 0); }
		public TerminalNode SLEEP() { return getToken(SimpleSpeakQlParser.SLEEP, 0); }
		public TerminalNode SOUNDEX() { return getToken(SimpleSpeakQlParser.SOUNDEX, 0); }
		public TerminalNode SQL_THREAD_WAIT_AFTER_GTIDS() { return getToken(SimpleSpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0); }
		public TerminalNode SQRT() { return getToken(SimpleSpeakQlParser.SQRT, 0); }
		public TerminalNode SRID() { return getToken(SimpleSpeakQlParser.SRID, 0); }
		public TerminalNode STARTPOINT() { return getToken(SimpleSpeakQlParser.STARTPOINT, 0); }
		public TerminalNode STRCMP() { return getToken(SimpleSpeakQlParser.STRCMP, 0); }
		public TerminalNode STR_TO_DATE() { return getToken(SimpleSpeakQlParser.STR_TO_DATE, 0); }
		public TerminalNode ST_AREA() { return getToken(SimpleSpeakQlParser.ST_AREA, 0); }
		public TerminalNode ST_ASBINARY() { return getToken(SimpleSpeakQlParser.ST_ASBINARY, 0); }
		public TerminalNode ST_ASTEXT() { return getToken(SimpleSpeakQlParser.ST_ASTEXT, 0); }
		public TerminalNode ST_ASWKB() { return getToken(SimpleSpeakQlParser.ST_ASWKB, 0); }
		public TerminalNode ST_ASWKT() { return getToken(SimpleSpeakQlParser.ST_ASWKT, 0); }
		public TerminalNode ST_BUFFER() { return getToken(SimpleSpeakQlParser.ST_BUFFER, 0); }
		public TerminalNode ST_CENTROID() { return getToken(SimpleSpeakQlParser.ST_CENTROID, 0); }
		public TerminalNode ST_CONTAINS() { return getToken(SimpleSpeakQlParser.ST_CONTAINS, 0); }
		public TerminalNode ST_CROSSES() { return getToken(SimpleSpeakQlParser.ST_CROSSES, 0); }
		public TerminalNode ST_DIFFERENCE() { return getToken(SimpleSpeakQlParser.ST_DIFFERENCE, 0); }
		public TerminalNode ST_DIMENSION() { return getToken(SimpleSpeakQlParser.ST_DIMENSION, 0); }
		public TerminalNode ST_DISJOINT() { return getToken(SimpleSpeakQlParser.ST_DISJOINT, 0); }
		public TerminalNode ST_DISTANCE() { return getToken(SimpleSpeakQlParser.ST_DISTANCE, 0); }
		public TerminalNode ST_ENDPOINT() { return getToken(SimpleSpeakQlParser.ST_ENDPOINT, 0); }
		public TerminalNode ST_ENVELOPE() { return getToken(SimpleSpeakQlParser.ST_ENVELOPE, 0); }
		public TerminalNode ST_EQUALS() { return getToken(SimpleSpeakQlParser.ST_EQUALS, 0); }
		public TerminalNode ST_EXTERIORRING() { return getToken(SimpleSpeakQlParser.ST_EXTERIORRING, 0); }
		public TerminalNode ST_GEOMCOLLFROMTEXT() { return getToken(SimpleSpeakQlParser.ST_GEOMCOLLFROMTEXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMTXT() { return getToken(SimpleSpeakQlParser.ST_GEOMCOLLFROMTXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMWKB() { return getToken(SimpleSpeakQlParser.ST_GEOMCOLLFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMTEXT() { return getToken(SimpleSpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMWKB() { return getToken(SimpleSpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYFROMTEXT() { return getToken(SimpleSpeakQlParser.ST_GEOMETRYFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYFROMWKB() { return getToken(SimpleSpeakQlParser.ST_GEOMETRYFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYN() { return getToken(SimpleSpeakQlParser.ST_GEOMETRYN, 0); }
		public TerminalNode ST_GEOMETRYTYPE() { return getToken(SimpleSpeakQlParser.ST_GEOMETRYTYPE, 0); }
		public TerminalNode ST_GEOMFROMTEXT() { return getToken(SimpleSpeakQlParser.ST_GEOMFROMTEXT, 0); }
		public TerminalNode ST_GEOMFROMWKB() { return getToken(SimpleSpeakQlParser.ST_GEOMFROMWKB, 0); }
		public TerminalNode ST_INTERIORRINGN() { return getToken(SimpleSpeakQlParser.ST_INTERIORRINGN, 0); }
		public TerminalNode ST_INTERSECTION() { return getToken(SimpleSpeakQlParser.ST_INTERSECTION, 0); }
		public TerminalNode ST_INTERSECTS() { return getToken(SimpleSpeakQlParser.ST_INTERSECTS, 0); }
		public TerminalNode ST_ISCLOSED() { return getToken(SimpleSpeakQlParser.ST_ISCLOSED, 0); }
		public TerminalNode ST_ISEMPTY() { return getToken(SimpleSpeakQlParser.ST_ISEMPTY, 0); }
		public TerminalNode ST_ISSIMPLE() { return getToken(SimpleSpeakQlParser.ST_ISSIMPLE, 0); }
		public TerminalNode ST_LINEFROMTEXT() { return getToken(SimpleSpeakQlParser.ST_LINEFROMTEXT, 0); }
		public TerminalNode ST_LINEFROMWKB() { return getToken(SimpleSpeakQlParser.ST_LINEFROMWKB, 0); }
		public TerminalNode ST_LINESTRINGFROMTEXT() { return getToken(SimpleSpeakQlParser.ST_LINESTRINGFROMTEXT, 0); }
		public TerminalNode ST_LINESTRINGFROMWKB() { return getToken(SimpleSpeakQlParser.ST_LINESTRINGFROMWKB, 0); }
		public TerminalNode ST_NUMGEOMETRIES() { return getToken(SimpleSpeakQlParser.ST_NUMGEOMETRIES, 0); }
		public TerminalNode ST_NUMINTERIORRING() { return getToken(SimpleSpeakQlParser.ST_NUMINTERIORRING, 0); }
		public TerminalNode ST_NUMINTERIORRINGS() { return getToken(SimpleSpeakQlParser.ST_NUMINTERIORRINGS, 0); }
		public TerminalNode ST_NUMPOINTS() { return getToken(SimpleSpeakQlParser.ST_NUMPOINTS, 0); }
		public TerminalNode ST_OVERLAPS() { return getToken(SimpleSpeakQlParser.ST_OVERLAPS, 0); }
		public TerminalNode ST_POINTFROMTEXT() { return getToken(SimpleSpeakQlParser.ST_POINTFROMTEXT, 0); }
		public TerminalNode ST_POINTFROMWKB() { return getToken(SimpleSpeakQlParser.ST_POINTFROMWKB, 0); }
		public TerminalNode ST_POINTN() { return getToken(SimpleSpeakQlParser.ST_POINTN, 0); }
		public TerminalNode ST_POLYFROMTEXT() { return getToken(SimpleSpeakQlParser.ST_POLYFROMTEXT, 0); }
		public TerminalNode ST_POLYFROMWKB() { return getToken(SimpleSpeakQlParser.ST_POLYFROMWKB, 0); }
		public TerminalNode ST_POLYGONFROMTEXT() { return getToken(SimpleSpeakQlParser.ST_POLYGONFROMTEXT, 0); }
		public TerminalNode ST_POLYGONFROMWKB() { return getToken(SimpleSpeakQlParser.ST_POLYGONFROMWKB, 0); }
		public TerminalNode ST_SRID() { return getToken(SimpleSpeakQlParser.ST_SRID, 0); }
		public TerminalNode ST_STARTPOINT() { return getToken(SimpleSpeakQlParser.ST_STARTPOINT, 0); }
		public TerminalNode ST_SYMDIFFERENCE() { return getToken(SimpleSpeakQlParser.ST_SYMDIFFERENCE, 0); }
		public TerminalNode ST_TOUCHES() { return getToken(SimpleSpeakQlParser.ST_TOUCHES, 0); }
		public TerminalNode ST_UNION() { return getToken(SimpleSpeakQlParser.ST_UNION, 0); }
		public TerminalNode ST_WITHIN() { return getToken(SimpleSpeakQlParser.ST_WITHIN, 0); }
		public TerminalNode ST_X() { return getToken(SimpleSpeakQlParser.ST_X, 0); }
		public TerminalNode ST_Y() { return getToken(SimpleSpeakQlParser.ST_Y, 0); }
		public TerminalNode SUBDATE() { return getToken(SimpleSpeakQlParser.SUBDATE, 0); }
		public TerminalNode SUBSTRING_INDEX() { return getToken(SimpleSpeakQlParser.SUBSTRING_INDEX, 0); }
		public TerminalNode SUBTIME() { return getToken(SimpleSpeakQlParser.SUBTIME, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(SimpleSpeakQlParser.SYSTEM_USER, 0); }
		public TerminalNode TAN() { return getToken(SimpleSpeakQlParser.TAN, 0); }
		public TerminalNode TIME() { return getToken(SimpleSpeakQlParser.TIME, 0); }
		public TerminalNode TIMEDIFF() { return getToken(SimpleSpeakQlParser.TIMEDIFF, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SimpleSpeakQlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(SimpleSpeakQlParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(SimpleSpeakQlParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TIME_FORMAT() { return getToken(SimpleSpeakQlParser.TIME_FORMAT, 0); }
		public TerminalNode TIME_TO_SEC() { return getToken(SimpleSpeakQlParser.TIME_TO_SEC, 0); }
		public TerminalNode TOUCHES() { return getToken(SimpleSpeakQlParser.TOUCHES, 0); }
		public TerminalNode TO_BASE64() { return getToken(SimpleSpeakQlParser.TO_BASE64, 0); }
		public TerminalNode TO_DAYS() { return getToken(SimpleSpeakQlParser.TO_DAYS, 0); }
		public TerminalNode TO_SECONDS() { return getToken(SimpleSpeakQlParser.TO_SECONDS, 0); }
		public TerminalNode UCASE() { return getToken(SimpleSpeakQlParser.UCASE, 0); }
		public TerminalNode UNCOMPRESS() { return getToken(SimpleSpeakQlParser.UNCOMPRESS, 0); }
		public TerminalNode UNCOMPRESSED_LENGTH() { return getToken(SimpleSpeakQlParser.UNCOMPRESSED_LENGTH, 0); }
		public TerminalNode UNHEX() { return getToken(SimpleSpeakQlParser.UNHEX, 0); }
		public TerminalNode UNIX_TIMESTAMP() { return getToken(SimpleSpeakQlParser.UNIX_TIMESTAMP, 0); }
		public TerminalNode UPDATEXML() { return getToken(SimpleSpeakQlParser.UPDATEXML, 0); }
		public TerminalNode UPPER() { return getToken(SimpleSpeakQlParser.UPPER, 0); }
		public TerminalNode UUID() { return getToken(SimpleSpeakQlParser.UUID, 0); }
		public TerminalNode UUID_SHORT() { return getToken(SimpleSpeakQlParser.UUID_SHORT, 0); }
		public TerminalNode VALIDATE_PASSWORD_STRENGTH() { return getToken(SimpleSpeakQlParser.VALIDATE_PASSWORD_STRENGTH, 0); }
		public TerminalNode VERSION() { return getToken(SimpleSpeakQlParser.VERSION, 0); }
		public TerminalNode VISIBLE() { return getToken(SimpleSpeakQlParser.VISIBLE, 0); }
		public TerminalNode WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() { return getToken(SimpleSpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0); }
		public TerminalNode WEEK() { return getToken(SimpleSpeakQlParser.WEEK, 0); }
		public TerminalNode WEEKDAY() { return getToken(SimpleSpeakQlParser.WEEKDAY, 0); }
		public TerminalNode WEEKOFYEAR() { return getToken(SimpleSpeakQlParser.WEEKOFYEAR, 0); }
		public TerminalNode WEIGHT_STRING() { return getToken(SimpleSpeakQlParser.WEIGHT_STRING, 0); }
		public TerminalNode WITHIN() { return getToken(SimpleSpeakQlParser.WITHIN, 0); }
		public TerminalNode YEAR() { return getToken(SimpleSpeakQlParser.YEAR, 0); }
		public TerminalNode YEARWEEK() { return getToken(SimpleSpeakQlParser.YEARWEEK, 0); }
		public TerminalNode Y_FUNCTION() { return getToken(SimpleSpeakQlParser.Y_FUNCTION, 0); }
		public TerminalNode X_FUNCTION() { return getToken(SimpleSpeakQlParser.X_FUNCTION, 0); }
		public TerminalNode JSON_ARRAY() { return getToken(SimpleSpeakQlParser.JSON_ARRAY, 0); }
		public TerminalNode JSON_OBJECT() { return getToken(SimpleSpeakQlParser.JSON_OBJECT, 0); }
		public TerminalNode JSON_QUOTE() { return getToken(SimpleSpeakQlParser.JSON_QUOTE, 0); }
		public TerminalNode JSON_CONTAINS() { return getToken(SimpleSpeakQlParser.JSON_CONTAINS, 0); }
		public TerminalNode JSON_CONTAINS_PATH() { return getToken(SimpleSpeakQlParser.JSON_CONTAINS_PATH, 0); }
		public TerminalNode JSON_EXTRACT() { return getToken(SimpleSpeakQlParser.JSON_EXTRACT, 0); }
		public TerminalNode JSON_KEYS() { return getToken(SimpleSpeakQlParser.JSON_KEYS, 0); }
		public TerminalNode JSON_OVERLAPS() { return getToken(SimpleSpeakQlParser.JSON_OVERLAPS, 0); }
		public TerminalNode JSON_SEARCH() { return getToken(SimpleSpeakQlParser.JSON_SEARCH, 0); }
		public TerminalNode JSON_VALUE() { return getToken(SimpleSpeakQlParser.JSON_VALUE, 0); }
		public TerminalNode JSON_ARRAY_APPEND() { return getToken(SimpleSpeakQlParser.JSON_ARRAY_APPEND, 0); }
		public TerminalNode JSON_ARRAY_INSERT() { return getToken(SimpleSpeakQlParser.JSON_ARRAY_INSERT, 0); }
		public TerminalNode JSON_INSERT() { return getToken(SimpleSpeakQlParser.JSON_INSERT, 0); }
		public TerminalNode JSON_MERGE() { return getToken(SimpleSpeakQlParser.JSON_MERGE, 0); }
		public TerminalNode JSON_MERGE_PATCH() { return getToken(SimpleSpeakQlParser.JSON_MERGE_PATCH, 0); }
		public TerminalNode JSON_MERGE_PRESERVE() { return getToken(SimpleSpeakQlParser.JSON_MERGE_PRESERVE, 0); }
		public TerminalNode JSON_REMOVE() { return getToken(SimpleSpeakQlParser.JSON_REMOVE, 0); }
		public TerminalNode JSON_REPLACE() { return getToken(SimpleSpeakQlParser.JSON_REPLACE, 0); }
		public TerminalNode JSON_SET() { return getToken(SimpleSpeakQlParser.JSON_SET, 0); }
		public TerminalNode JSON_UNQUOTE() { return getToken(SimpleSpeakQlParser.JSON_UNQUOTE, 0); }
		public TerminalNode JSON_DEPTH() { return getToken(SimpleSpeakQlParser.JSON_DEPTH, 0); }
		public TerminalNode JSON_LENGTH() { return getToken(SimpleSpeakQlParser.JSON_LENGTH, 0); }
		public TerminalNode JSON_TYPE() { return getToken(SimpleSpeakQlParser.JSON_TYPE, 0); }
		public TerminalNode JSON_VALID() { return getToken(SimpleSpeakQlParser.JSON_VALID, 0); }
		public TerminalNode JSON_TABLE() { return getToken(SimpleSpeakQlParser.JSON_TABLE, 0); }
		public TerminalNode JSON_SCHEMA_VALID() { return getToken(SimpleSpeakQlParser.JSON_SCHEMA_VALID, 0); }
		public TerminalNode JSON_SCHEMA_VALIDATION_REPORT() { return getToken(SimpleSpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT, 0); }
		public TerminalNode JSON_PRETTY() { return getToken(SimpleSpeakQlParser.JSON_PRETTY, 0); }
		public TerminalNode JSON_STORAGE_FREE() { return getToken(SimpleSpeakQlParser.JSON_STORAGE_FREE, 0); }
		public TerminalNode JSON_STORAGE_SIZE() { return getToken(SimpleSpeakQlParser.JSON_STORAGE_SIZE, 0); }
		public TerminalNode JSON_ARRAYAGG() { return getToken(SimpleSpeakQlParser.JSON_ARRAYAGG, 0); }
		public TerminalNode JSON_OBJECTAGG() { return getToken(SimpleSpeakQlParser.JSON_OBJECTAGG, 0); }
		public FunctionNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionNameBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterFunctionNameBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitFunctionNameBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitFunctionNameBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionNameBaseContext functionNameBase() throws RecognitionException {
		FunctionNameBaseContext _localctx = new FunctionNameBaseContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_functionNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(554);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==LEFT || _la==RIGHT || _la==SCHEMA || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (DATE - 246)) | (1L << (TIME - 246)) | (1L << (TIMESTAMP - 246)) | (1L << (YEAR - 246)) | (1L << (JSON_ARRAY - 246)) | (1L << (JSON_OBJECT - 246)) | (1L << (JSON_QUOTE - 246)) | (1L << (JSON_CONTAINS - 246)) | (1L << (JSON_CONTAINS_PATH - 246)) | (1L << (JSON_EXTRACT - 246)) | (1L << (JSON_KEYS - 246)) | (1L << (JSON_OVERLAPS - 246)) | (1L << (JSON_SEARCH - 246)) | (1L << (JSON_VALUE - 246)) | (1L << (JSON_ARRAY_APPEND - 246)) | (1L << (JSON_ARRAY_INSERT - 246)) | (1L << (JSON_INSERT - 246)) | (1L << (JSON_MERGE - 246)) | (1L << (JSON_MERGE_PATCH - 246)) | (1L << (JSON_MERGE_PRESERVE - 246)) | (1L << (JSON_REMOVE - 246)) | (1L << (JSON_REPLACE - 246)) | (1L << (JSON_SET - 246)) | (1L << (JSON_UNQUOTE - 246)) | (1L << (JSON_DEPTH - 246)) | (1L << (JSON_LENGTH - 246)) | (1L << (JSON_TYPE - 246)) | (1L << (JSON_VALID - 246)) | (1L << (JSON_TABLE - 246)) | (1L << (JSON_SCHEMA_VALID - 246)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 246)) | (1L << (JSON_PRETTY - 246)) | (1L << (JSON_STORAGE_FREE - 246)) | (1L << (JSON_STORAGE_SIZE - 246)))) != 0) || ((((_la - 310)) & ~0x3f) == 0 && ((1L << (_la - 310)) & ((1L << (JSON_ARRAYAGG - 310)) | (1L << (JSON_OBJECTAGG - 310)) | (1L << (COUNT - 310)) | (1L << (POSITION - 310)))) != 0) || _la==INVISIBLE || ((((_la - 677)) & ~0x3f) == 0 && ((1L << (_la - 677)) & ((1L << (VISIBLE - 677)) | (1L << (QUARTER - 677)) | (1L << (MONTH - 677)) | (1L << (DAY - 677)) | (1L << (HOUR - 677)) | (1L << (MINUTE - 677)) | (1L << (WEEK - 677)) | (1L << (SECOND - 677)) | (1L << (MICROSECOND - 677)) | (1L << (SESSION_VARIABLES_ADMIN - 677)))) != 0) || ((((_la - 798)) & ~0x3f) == 0 && ((1L << (_la - 798)) & ((1L << (GEOMETRYCOLLECTION - 798)) | (1L << (LINESTRING - 798)) | (1L << (MULTILINESTRING - 798)) | (1L << (MULTIPOINT - 798)) | (1L << (MULTIPOLYGON - 798)) | (1L << (POINT - 798)) | (1L << (POLYGON - 798)) | (1L << (ABS - 798)) | (1L << (ACOS - 798)) | (1L << (ADDDATE - 798)) | (1L << (ADDTIME - 798)) | (1L << (AES_DECRYPT - 798)) | (1L << (AES_ENCRYPT - 798)) | (1L << (AREA - 798)) | (1L << (ASBINARY - 798)) | (1L << (ASIN - 798)) | (1L << (ASTEXT - 798)) | (1L << (ASWKB - 798)) | (1L << (ASWKT - 798)) | (1L << (ASYMMETRIC_DECRYPT - 798)) | (1L << (ASYMMETRIC_DERIVE - 798)) | (1L << (ASYMMETRIC_ENCRYPT - 798)) | (1L << (ASYMMETRIC_SIGN - 798)) | (1L << (ASYMMETRIC_VERIFY - 798)) | (1L << (ATAN - 798)) | (1L << (ATAN2 - 798)) | (1L << (BENCHMARK - 798)) | (1L << (BIN - 798)) | (1L << (BIT_COUNT - 798)) | (1L << (BIT_LENGTH - 798)) | (1L << (BUFFER - 798)) | (1L << (CEIL - 798)) | (1L << (CEILING - 798)) | (1L << (CENTROID - 798)) | (1L << (CHARACTER_LENGTH - 798)) | (1L << (CHARSET - 798)) | (1L << (CHAR_LENGTH - 798)) | (1L << (COERCIBILITY - 798)) | (1L << (COLLATION - 798)) | (1L << (COMPRESS - 798)) | (1L << (CONCAT - 798)) | (1L << (CONCAT_WS - 798)) | (1L << (CONNECTION_ID - 798)) | (1L << (CONV - 798)) | (1L << (CONVERT_TZ - 798)) | (1L << (COS - 798)) | (1L << (COT - 798)) | (1L << (CRC32 - 798)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 798)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 798)) | (1L << (CREATE_DH_PARAMETERS - 798)) | (1L << (CREATE_DIGEST - 798)) | (1L << (CROSSES - 798)) | (1L << (DATEDIFF - 798)) | (1L << (DATE_FORMAT - 798)) | (1L << (DAYNAME - 798)) | (1L << (DAYOFMONTH - 798)) | (1L << (DAYOFWEEK - 798)) | (1L << (DAYOFYEAR - 798)) | (1L << (DECODE - 798)) | (1L << (DEGREES - 798)))) != 0) || ((((_la - 862)) & ~0x3f) == 0 && ((1L << (_la - 862)) & ((1L << (DES_DECRYPT - 862)) | (1L << (DES_ENCRYPT - 862)) | (1L << (DIMENSION - 862)) | (1L << (DISJOINT - 862)) | (1L << (ELT - 862)) | (1L << (ENCODE - 862)) | (1L << (ENCRYPT - 862)) | (1L << (ENDPOINT - 862)) | (1L << (ENVELOPE - 862)) | (1L << (EQUALS - 862)) | (1L << (EXP - 862)) | (1L << (EXPORT_SET - 862)) | (1L << (EXTERIORRING - 862)) | (1L << (EXTRACTVALUE - 862)) | (1L << (FIELD - 862)) | (1L << (FIND_IN_SET - 862)) | (1L << (FLOOR - 862)) | (1L << (FORMAT - 862)) | (1L << (FOUND_ROWS - 862)) | (1L << (FROM_BASE64 - 862)) | (1L << (FROM_DAYS - 862)) | (1L << (FROM_UNIXTIME - 862)) | (1L << (GEOMCOLLFROMTEXT - 862)) | (1L << (GEOMCOLLFROMWKB - 862)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 862)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 862)) | (1L << (GEOMETRYFROMTEXT - 862)) | (1L << (GEOMETRYFROMWKB - 862)) | (1L << (GEOMETRYN - 862)) | (1L << (GEOMETRYTYPE - 862)) | (1L << (GEOMFROMTEXT - 862)) | (1L << (GEOMFROMWKB - 862)) | (1L << (GET_FORMAT - 862)) | (1L << (GET_LOCK - 862)) | (1L << (GLENGTH - 862)) | (1L << (GREATEST - 862)) | (1L << (GTID_SUBSET - 862)) | (1L << (GTID_SUBTRACT - 862)) | (1L << (HEX - 862)) | (1L << (IFNULL - 862)) | (1L << (INET6_ATON - 862)) | (1L << (INET6_NTOA - 862)) | (1L << (INET_ATON - 862)) | (1L << (INET_NTOA - 862)) | (1L << (INSTR - 862)) | (1L << (INTERIORRINGN - 862)) | (1L << (INTERSECTS - 862)) | (1L << (ISCLOSED - 862)) | (1L << (ISEMPTY - 862)) | (1L << (ISNULL - 862)) | (1L << (ISSIMPLE - 862)) | (1L << (IS_FREE_LOCK - 862)) | (1L << (IS_IPV4 - 862)) | (1L << (IS_IPV4_COMPAT - 862)) | (1L << (IS_IPV4_MAPPED - 862)) | (1L << (IS_IPV6 - 862)) | (1L << (IS_USED_LOCK - 862)) | (1L << (LAST_INSERT_ID - 862)) | (1L << (LCASE - 862)) | (1L << (LEAST - 862)) | (1L << (LENGTH - 862)) | (1L << (LINEFROMTEXT - 862)) | (1L << (LINEFROMWKB - 862)) | (1L << (LINESTRINGFROMTEXT - 862)))) != 0) || ((((_la - 926)) & ~0x3f) == 0 && ((1L << (_la - 926)) & ((1L << (LINESTRINGFROMWKB - 926)) | (1L << (LN - 926)) | (1L << (LOAD_FILE - 926)) | (1L << (LOCATE - 926)) | (1L << (LOG - 926)) | (1L << (LOG10 - 926)) | (1L << (LOG2 - 926)) | (1L << (LOWER - 926)) | (1L << (LPAD - 926)) | (1L << (LTRIM - 926)) | (1L << (MAKEDATE - 926)) | (1L << (MAKETIME - 926)) | (1L << (MAKE_SET - 926)) | (1L << (MASTER_POS_WAIT - 926)) | (1L << (MBRCONTAINS - 926)) | (1L << (MBRDISJOINT - 926)) | (1L << (MBREQUAL - 926)) | (1L << (MBRINTERSECTS - 926)) | (1L << (MBROVERLAPS - 926)) | (1L << (MBRTOUCHES - 926)) | (1L << (MBRWITHIN - 926)) | (1L << (MD5 - 926)) | (1L << (MLINEFROMTEXT - 926)) | (1L << (MLINEFROMWKB - 926)) | (1L << (MONTHNAME - 926)) | (1L << (MPOINTFROMTEXT - 926)) | (1L << (MPOINTFROMWKB - 926)) | (1L << (MPOLYFROMTEXT - 926)) | (1L << (MPOLYFROMWKB - 926)) | (1L << (MULTILINESTRINGFROMTEXT - 926)) | (1L << (MULTILINESTRINGFROMWKB - 926)) | (1L << (MULTIPOINTFROMTEXT - 926)) | (1L << (MULTIPOINTFROMWKB - 926)) | (1L << (MULTIPOLYGONFROMTEXT - 926)) | (1L << (MULTIPOLYGONFROMWKB - 926)) | (1L << (NAME_CONST - 926)) | (1L << (NULLIF - 926)) | (1L << (NUMGEOMETRIES - 926)) | (1L << (NUMINTERIORRINGS - 926)) | (1L << (NUMPOINTS - 926)) | (1L << (OCT - 926)) | (1L << (OCTET_LENGTH - 926)) | (1L << (ORD - 926)) | (1L << (OVERLAPS - 926)) | (1L << (PERIOD_ADD - 926)) | (1L << (PERIOD_DIFF - 926)) | (1L << (PI - 926)) | (1L << (POINTFROMTEXT - 926)) | (1L << (POINTFROMWKB - 926)) | (1L << (POINTN - 926)) | (1L << (POLYFROMTEXT - 926)) | (1L << (POLYFROMWKB - 926)) | (1L << (POLYGONFROMTEXT - 926)) | (1L << (POLYGONFROMWKB - 926)) | (1L << (POW - 926)) | (1L << (POWER - 926)) | (1L << (QUOTE - 926)) | (1L << (RADIANS - 926)) | (1L << (RAND - 926)) | (1L << (RANDOM_BYTES - 926)) | (1L << (RELEASE_LOCK - 926)) | (1L << (REVERSE - 926)) | (1L << (ROUND - 926)) | (1L << (ROW_COUNT - 926)))) != 0) || ((((_la - 990)) & ~0x3f) == 0 && ((1L << (_la - 990)) & ((1L << (RPAD - 990)) | (1L << (RTRIM - 990)) | (1L << (SEC_TO_TIME - 990)) | (1L << (SESSION_USER - 990)) | (1L << (SHA - 990)) | (1L << (SHA1 - 990)) | (1L << (SHA2 - 990)) | (1L << (SIGN - 990)) | (1L << (SIN - 990)) | (1L << (SLEEP - 990)) | (1L << (SOUNDEX - 990)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 990)) | (1L << (SQRT - 990)) | (1L << (SRID - 990)) | (1L << (STARTPOINT - 990)) | (1L << (STRCMP - 990)) | (1L << (STR_TO_DATE - 990)) | (1L << (ST_AREA - 990)) | (1L << (ST_ASBINARY - 990)) | (1L << (ST_ASTEXT - 990)) | (1L << (ST_ASWKB - 990)) | (1L << (ST_ASWKT - 990)) | (1L << (ST_BUFFER - 990)) | (1L << (ST_CENTROID - 990)) | (1L << (ST_CONTAINS - 990)) | (1L << (ST_CROSSES - 990)) | (1L << (ST_DIFFERENCE - 990)) | (1L << (ST_DIMENSION - 990)) | (1L << (ST_DISJOINT - 990)) | (1L << (ST_DISTANCE - 990)) | (1L << (ST_ENDPOINT - 990)) | (1L << (ST_ENVELOPE - 990)) | (1L << (ST_EQUALS - 990)) | (1L << (ST_EXTERIORRING - 990)) | (1L << (ST_GEOMCOLLFROMTEXT - 990)) | (1L << (ST_GEOMCOLLFROMTXT - 990)) | (1L << (ST_GEOMCOLLFROMWKB - 990)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 990)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 990)) | (1L << (ST_GEOMETRYFROMTEXT - 990)) | (1L << (ST_GEOMETRYFROMWKB - 990)) | (1L << (ST_GEOMETRYN - 990)) | (1L << (ST_GEOMETRYTYPE - 990)) | (1L << (ST_GEOMFROMTEXT - 990)) | (1L << (ST_GEOMFROMWKB - 990)) | (1L << (ST_INTERIORRINGN - 990)) | (1L << (ST_INTERSECTION - 990)) | (1L << (ST_INTERSECTS - 990)) | (1L << (ST_ISCLOSED - 990)) | (1L << (ST_ISEMPTY - 990)) | (1L << (ST_ISSIMPLE - 990)) | (1L << (ST_LINEFROMTEXT - 990)) | (1L << (ST_LINEFROMWKB - 990)) | (1L << (ST_LINESTRINGFROMTEXT - 990)) | (1L << (ST_LINESTRINGFROMWKB - 990)) | (1L << (ST_NUMGEOMETRIES - 990)) | (1L << (ST_NUMINTERIORRING - 990)) | (1L << (ST_NUMINTERIORRINGS - 990)) | (1L << (ST_NUMPOINTS - 990)) | (1L << (ST_OVERLAPS - 990)) | (1L << (ST_POINTFROMTEXT - 990)) | (1L << (ST_POINTFROMWKB - 990)) | (1L << (ST_POINTN - 990)))) != 0) || ((((_la - 1054)) & ~0x3f) == 0 && ((1L << (_la - 1054)) & ((1L << (ST_POLYFROMTEXT - 1054)) | (1L << (ST_POLYFROMWKB - 1054)) | (1L << (ST_POLYGONFROMTEXT - 1054)) | (1L << (ST_POLYGONFROMWKB - 1054)) | (1L << (ST_SRID - 1054)) | (1L << (ST_STARTPOINT - 1054)) | (1L << (ST_SYMDIFFERENCE - 1054)) | (1L << (ST_TOUCHES - 1054)) | (1L << (ST_UNION - 1054)) | (1L << (ST_WITHIN - 1054)) | (1L << (ST_X - 1054)) | (1L << (ST_Y - 1054)) | (1L << (SUBDATE - 1054)) | (1L << (SUBSTRING_INDEX - 1054)) | (1L << (SUBTIME - 1054)) | (1L << (SYSTEM_USER - 1054)) | (1L << (TAN - 1054)) | (1L << (TIMEDIFF - 1054)) | (1L << (TIMESTAMPADD - 1054)) | (1L << (TIMESTAMPDIFF - 1054)) | (1L << (TIME_FORMAT - 1054)) | (1L << (TIME_TO_SEC - 1054)) | (1L << (TOUCHES - 1054)) | (1L << (TO_BASE64 - 1054)) | (1L << (TO_DAYS - 1054)) | (1L << (TO_SECONDS - 1054)) | (1L << (UCASE - 1054)) | (1L << (UNCOMPRESS - 1054)) | (1L << (UNCOMPRESSED_LENGTH - 1054)) | (1L << (UNHEX - 1054)) | (1L << (UNIX_TIMESTAMP - 1054)) | (1L << (UPDATEXML - 1054)) | (1L << (UPPER - 1054)) | (1L << (UUID - 1054)) | (1L << (UUID_SHORT - 1054)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1054)) | (1L << (VERSION - 1054)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1054)) | (1L << (WEEKDAY - 1054)) | (1L << (WEEKOFYEAR - 1054)) | (1L << (WEIGHT_STRING - 1054)) | (1L << (WITHIN - 1054)) | (1L << (YEARWEEK - 1054)) | (1L << (Y_FUNCTION - 1054)) | (1L << (X_FUNCTION - 1054)) | (1L << (MOD - 1054)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementDotContext extends ParserRuleContext {
		public TerminalNode DOT() { return getToken(SimpleSpeakQlParser.DOT, 0); }
		public TerminalNode SPOKEN_DOT() { return getToken(SimpleSpeakQlParser.SPOKEN_DOT, 0); }
		public SelectElementDotContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElementDot; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSelectElementDot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSelectElementDot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSelectElementDot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementDotContext selectElementDot() throws RecognitionException {
		SelectElementDotContext _localctx = new SelectElementDotContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_selectElementDot);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(556);
			_la = _input.LA(1);
			if ( !(_la==SPOKEN_DOT || _la==DOT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullColumnNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<DottedIdContext> dottedId() {
			return getRuleContexts(DottedIdContext.class);
		}
		public DottedIdContext dottedId(int i) {
			return getRuleContext(DottedIdContext.class,i);
		}
		public SelectElementDotContext selectElementDot() {
			return getRuleContext(SelectElementDotContext.class,0);
		}
		public FullColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterFullColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitFullColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitFullColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullColumnNameContext fullColumnName() throws RecognitionException {
		FullColumnNameContext _localctx = new FullColumnNameContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_fullColumnName);
		try {
			setState(570);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(558);
				uid();
				setState(563);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
				case 1:
					{
					setState(559);
					dottedId();
					setState(561);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
					case 1:
						{
						setState(560);
						dottedId();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(565);
				selectElementDot();
				setState(566);
				dottedId();
				setState(568);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,51,_ctx) ) {
				case 1:
					{
					setState(567);
					dottedId();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DottedIdContext extends ParserRuleContext {
		public TerminalNode DOT_ID() { return getToken(SimpleSpeakQlParser.DOT_ID, 0); }
		public SelectElementDotContext selectElementDot() {
			return getRuleContext(SelectElementDotContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DottedIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dottedId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterDottedId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitDottedId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitDottedId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DottedIdContext dottedId() throws RecognitionException {
		DottedIdContext _localctx = new DottedIdContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_dottedId);
		try {
			setState(576);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOT_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(572);
				match(DOT_ID);
				}
				break;
			case SPOKEN_DOT:
			case DOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(573);
				selectElementDot();
				setState(574);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementAsContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SimpleSpeakQlParser.AS, 0); }
		public SelectElementAsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElementAs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSelectElementAs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSelectElementAs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSelectElementAs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementAsContext selectElementAs() throws RecognitionException {
		SelectElementAsContext _localctx = new SelectElementAsContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_selectElementAs);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(578);
			match(AS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionCallContext extends ParserRuleContext {
		public FunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionCall; }
	 
		public FunctionCallContext() { }
		public void copyFrom(FunctionCallContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpecificFunctionCallContext extends FunctionCallContext {
		public SpecificFunctionContext specificFunction() {
			return getRuleContext(SpecificFunctionContext.class,0);
		}
		public SpecificFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSpecificFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSpecificFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSpecificFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PasswordFunctionCallContext extends FunctionCallContext {
		public PasswordFunctionClauseContext passwordFunctionClause() {
			return getRuleContext(PasswordFunctionClauseContext.class,0);
		}
		public PasswordFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterPasswordFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitPasswordFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitPasswordFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UdfFunctionCallContext extends FunctionCallContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public UdfFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterUdfFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitUdfFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitUdfFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NonAggregateFunctionCallContext extends FunctionCallContext {
		public NonAggregateWindowedFunctionContext nonAggregateWindowedFunction() {
			return getRuleContext(NonAggregateWindowedFunctionContext.class,0);
		}
		public NonAggregateFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterNonAggregateFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitNonAggregateFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitNonAggregateFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AggregateFunctionCallContext extends FunctionCallContext {
		public AggregateWindowedFunctionContext aggregateWindowedFunction() {
			return getRuleContext(AggregateWindowedFunctionContext.class,0);
		}
		public AggregateFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterAggregateFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitAggregateFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitAggregateFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ScalarFunctionCallContext extends FunctionCallContext {
		public ScalarFunctionNameContext scalarFunctionName() {
			return getRuleContext(ScalarFunctionNameContext.class,0);
		}
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public ScalarFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterScalarFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitScalarFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitScalarFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionCallContext functionCall() throws RecognitionException {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_functionCall);
		int _la;
		try {
			setState(598);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,56,_ctx) ) {
			case 1:
				_localctx = new SpecificFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(580);
				specificFunction();
				}
				break;
			case 2:
				_localctx = new AggregateFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(581);
				aggregateWindowedFunction();
				}
				break;
			case 3:
				_localctx = new NonAggregateFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(582);
				nonAggregateWindowedFunction();
				}
				break;
			case 4:
				_localctx = new ScalarFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(583);
				scalarFunctionName();
				setState(584);
				leftParen();
				setState(586);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SPOKEN_DOT) | (1L << OPEN_PARENTHESIS) | (1L << LEFT_PARENTHESIS) | (1L << OPEN_PAREN) | (1L << LEFT_PAREN) | (1L << THE) | (1L << CASE) | (1L << CAST))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (CONVERT - 71)) | (1L << (CURRENT - 71)) | (1L << (CURRENT_USER - 71)) | (1L << (DATABASE - 71)) | (1L << (DIAGNOSTICS - 71)) | (1L << (EXCEPT - 71)) | (1L << (EXISTS - 71)) | (1L << (FALSE - 71)) | (1L << (GROUP - 71)) | (1L << (IF - 71)) | (1L << (INSERT - 71)) | (1L << (INTERVAL - 71)) | (1L << (LEFT - 71)))) != 0) || ((((_la - 147)) & ~0x3f) == 0 && ((1L << (_la - 147)) & ((1L << (NOT - 147)) | (1L << (NULL_LITERAL - 147)) | (1L << (NUMBER - 147)) | (1L << (ORDER - 147)) | (1L << (REPLACE - 147)) | (1L << (RIGHT - 147)) | (1L << (SCHEMA - 147)) | (1L << (STACKED - 147)) | (1L << (TRUE - 147)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (VALUES - 217)) | (1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (CHAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_OBJECT - 281)) | (1L << (JSON_QUOTE - 281)) | (1L << (JSON_CONTAINS - 281)) | (1L << (JSON_CONTAINS_PATH - 281)) | (1L << (JSON_EXTRACT - 281)) | (1L << (JSON_KEYS - 281)) | (1L << (JSON_OVERLAPS - 281)) | (1L << (JSON_SEARCH - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (JSON_ARRAY_APPEND - 281)) | (1L << (JSON_ARRAY_INSERT - 281)) | (1L << (JSON_INSERT - 281)) | (1L << (JSON_MERGE - 281)) | (1L << (JSON_MERGE_PATCH - 281)) | (1L << (JSON_MERGE_PRESERVE - 281)) | (1L << (JSON_REMOVE - 281)) | (1L << (JSON_REPLACE - 281)) | (1L << (JSON_SET - 281)) | (1L << (JSON_UNQUOTE - 281)) | (1L << (JSON_DEPTH - 281)) | (1L << (JSON_LENGTH - 281)) | (1L << (JSON_TYPE - 281)) | (1L << (JSON_VALID - 281)) | (1L << (JSON_TABLE - 281)) | (1L << (JSON_SCHEMA_VALID - 281)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 281)) | (1L << (JSON_PRETTY - 281)) | (1L << (JSON_STORAGE_FREE - 281)) | (1L << (JSON_STORAGE_SIZE - 281)) | (1L << (JSON_ARRAYAGG - 281)) | (1L << (JSON_OBJECTAGG - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (DATE_ADD - 345)) | (1L << (DATE_SUB - 345)) | (1L << (EXTRACT - 345)) | (1L << (LOCALTIMESTAMP - 345)) | (1L << (NOW - 345)) | (1L << (POSITION - 345)) | (1L << (SUBSTR - 345)) | (1L << (SUBSTRING - 345)) | (1L << (SYSDATE - 345)) | (1L << (TRIM - 345)) | (1L << (UTC_DATE - 345)) | (1L << (UTC_TIME - 345)) | (1L << (UTC_TIMESTAMP - 345)) | (1L << (ACCOUNT - 345)) | (1L << (ACTION - 345)) | (1L << (AFTER - 345)) | (1L << (AGGREGATE - 345)) | (1L << (ALGORITHM - 345)) | (1L << (ANY - 345)) | (1L << (AT - 345)) | (1L << (AUTHORS - 345)) | (1L << (AUTOCOMMIT - 345)) | (1L << (AUTOEXTEND_SIZE - 345)) | (1L << (AUTO_INCREMENT - 345)) | (1L << (AVG_ROW_LENGTH - 345)) | (1L << (BEGIN - 345)) | (1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (COPY - 409)) | (1L << (CPU - 409)) | (1L << (CURSOR_NAME - 409)) | (1L << (DATA - 409)) | (1L << (DATAFILE - 409)) | (1L << (DEALLOCATE - 409)) | (1L << (DEFAULT_AUTH - 409)) | (1L << (DEFINER - 409)) | (1L << (DELAY_KEY_WRITE - 409)) | (1L << (DES_KEY_FILE - 409)) | (1L << (DIRECTORY - 409)) | (1L << (DISABLE - 409)) | (1L << (DISCARD - 409)) | (1L << (DISK - 409)) | (1L << (DO - 409)) | (1L << (DUMPFILE - 409)) | (1L << (DUPLICATE - 409)) | (1L << (DYNAMIC - 409)) | (1L << (ENABLE - 409)) | (1L << (ENCRYPTION - 409)) | (1L << (END - 409)) | (1L << (ENDS - 409)) | (1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (INPLACE - 473)) | (1L << (INSERT_METHOD - 473)) | (1L << (INSTALL - 473)) | (1L << (INSTANCE - 473)) | (1L << (INVISIBLE - 473)) | (1L << (INVOKER - 473)) | (1L << (IO - 473)) | (1L << (IO_THREAD - 473)) | (1L << (IPC - 473)) | (1L << (ISOLATION - 473)) | (1L << (ISSUER - 473)) | (1L << (JSON - 473)) | (1L << (KEY_BLOCK_SIZE - 473)) | (1L << (LANGUAGE - 473)) | (1L << (LAST - 473)) | (1L << (LEAVES - 473)) | (1L << (LESS - 473)) | (1L << (LEVEL - 473)) | (1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (NEVER - 537)) | (1L << (NEXT - 537)) | (1L << (NO - 537)) | (1L << (NODEGROUP - 537)) | (1L << (NONE - 537)) | (1L << (ODBC - 537)) | (1L << (OFFLINE - 537)) | (1L << (OFFSET - 537)) | (1L << (OF - 537)) | (1L << (OJ - 537)) | (1L << (OLD_PASSWORD - 537)) | (1L << (ONE - 537)) | (1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (RETURNS - 601)) | (1L << (ROLE - 601)) | (1L << (ROLLBACK - 601)) | (1L << (ROLLUP - 601)) | (1L << (ROTATE - 601)) | (1L << (ROW - 601)) | (1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (UNINSTALL - 665)) | (1L << (UNKNOWN - 665)) | (1L << (UNTIL - 665)) | (1L << (UPGRADE - 665)) | (1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (TABLES - 665)) | (1L << (ROUTINE - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (SHUTDOWN - 665)) | (1L << (SUPER - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (REPLICATION_APPLIER - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (REPLICATION_SLAVE_ADMIN - 729)) | (1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)) | (1L << (MYISAM - 729)) | (1L << (NDB - 729)) | (1L << (NDBCLUSTER - 729)) | (1L << (PERFORMANCE_SCHEMA - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)) | (1L << (CROSSES - 793)) | (1L << (DATEDIFF - 793)) | (1L << (DATE_FORMAT - 793)) | (1L << (DAYNAME - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)) | (1L << (IS_IPV4_MAPPED - 857)) | (1L << (IS_IPV6 - 857)) | (1L << (IS_USED_LOCK - 857)) | (1L << (LAST_INSERT_ID - 857)) | (1L << (LCASE - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)) | (1L << (POW - 921)) | (1L << (POWER - 921)) | (1L << (QUOTE - 921)) | (1L << (RADIANS - 921)) | (1L << (RAND - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)) | (1L << (ST_LINEFROMWKB - 985)) | (1L << (ST_LINESTRINGFROMTEXT - 985)) | (1L << (ST_LINESTRINGFROMWKB - 985)) | (1L << (ST_NUMGEOMETRIES - 985)) | (1L << (ST_NUMINTERIORRING - 985)) | (1L << (ST_NUMINTERIORRINGS - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)) | (1L << (PLUS - 1049)) | (1L << (MINUS - 1049)))) != 0) || ((((_la - 1114)) & ~0x3f) == 0 && ((1L << (_la - 1114)) & ((1L << (MOD - 1114)) | (1L << (EXCLAMATION_SYMBOL - 1114)) | (1L << (BIT_NOT_OP - 1114)) | (1L << (DOT - 1114)) | (1L << (LR_BRACKET - 1114)) | (1L << (ZERO_DECIMAL - 1114)) | (1L << (ONE_DECIMAL - 1114)) | (1L << (TWO_DECIMAL - 1114)) | (1L << (START_NATIONAL_STRING_LITERAL - 1114)) | (1L << (STRING_LITERAL - 1114)) | (1L << (DECIMAL_LITERAL - 1114)) | (1L << (HEXADECIMAL_LITERAL - 1114)) | (1L << (REAL_LITERAL - 1114)) | (1L << (NULL_SPEC_LITERAL - 1114)) | (1L << (BIT_STRING - 1114)) | (1L << (STRING_CHARSET_NAME - 1114)) | (1L << (ID - 1114)) | (1L << (REVERSE_QUOTE_ID - 1114)) | (1L << (LOCAL_ID - 1114)) | (1L << (GLOBAL_ID - 1114)))) != 0)) {
					{
					setState(585);
					functionArgs();
					}
				}

				setState(588);
				rightParen();
				}
				break;
			case 5:
				_localctx = new UdfFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(590);
				fullId();
				setState(591);
				leftParen();
				setState(593);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SPOKEN_DOT) | (1L << OPEN_PARENTHESIS) | (1L << LEFT_PARENTHESIS) | (1L << OPEN_PAREN) | (1L << LEFT_PAREN) | (1L << THE) | (1L << CASE) | (1L << CAST))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (CONVERT - 71)) | (1L << (CURRENT - 71)) | (1L << (CURRENT_USER - 71)) | (1L << (DATABASE - 71)) | (1L << (DIAGNOSTICS - 71)) | (1L << (EXCEPT - 71)) | (1L << (EXISTS - 71)) | (1L << (FALSE - 71)) | (1L << (GROUP - 71)) | (1L << (IF - 71)) | (1L << (INSERT - 71)) | (1L << (INTERVAL - 71)) | (1L << (LEFT - 71)))) != 0) || ((((_la - 147)) & ~0x3f) == 0 && ((1L << (_la - 147)) & ((1L << (NOT - 147)) | (1L << (NULL_LITERAL - 147)) | (1L << (NUMBER - 147)) | (1L << (ORDER - 147)) | (1L << (REPLACE - 147)) | (1L << (RIGHT - 147)) | (1L << (SCHEMA - 147)) | (1L << (STACKED - 147)) | (1L << (TRUE - 147)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (VALUES - 217)) | (1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (CHAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_OBJECT - 281)) | (1L << (JSON_QUOTE - 281)) | (1L << (JSON_CONTAINS - 281)) | (1L << (JSON_CONTAINS_PATH - 281)) | (1L << (JSON_EXTRACT - 281)) | (1L << (JSON_KEYS - 281)) | (1L << (JSON_OVERLAPS - 281)) | (1L << (JSON_SEARCH - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (JSON_ARRAY_APPEND - 281)) | (1L << (JSON_ARRAY_INSERT - 281)) | (1L << (JSON_INSERT - 281)) | (1L << (JSON_MERGE - 281)) | (1L << (JSON_MERGE_PATCH - 281)) | (1L << (JSON_MERGE_PRESERVE - 281)) | (1L << (JSON_REMOVE - 281)) | (1L << (JSON_REPLACE - 281)) | (1L << (JSON_SET - 281)) | (1L << (JSON_UNQUOTE - 281)) | (1L << (JSON_DEPTH - 281)) | (1L << (JSON_LENGTH - 281)) | (1L << (JSON_TYPE - 281)) | (1L << (JSON_VALID - 281)) | (1L << (JSON_TABLE - 281)) | (1L << (JSON_SCHEMA_VALID - 281)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 281)) | (1L << (JSON_PRETTY - 281)) | (1L << (JSON_STORAGE_FREE - 281)) | (1L << (JSON_STORAGE_SIZE - 281)) | (1L << (JSON_ARRAYAGG - 281)) | (1L << (JSON_OBJECTAGG - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (DATE_ADD - 345)) | (1L << (DATE_SUB - 345)) | (1L << (EXTRACT - 345)) | (1L << (LOCALTIMESTAMP - 345)) | (1L << (NOW - 345)) | (1L << (POSITION - 345)) | (1L << (SUBSTR - 345)) | (1L << (SUBSTRING - 345)) | (1L << (SYSDATE - 345)) | (1L << (TRIM - 345)) | (1L << (UTC_DATE - 345)) | (1L << (UTC_TIME - 345)) | (1L << (UTC_TIMESTAMP - 345)) | (1L << (ACCOUNT - 345)) | (1L << (ACTION - 345)) | (1L << (AFTER - 345)) | (1L << (AGGREGATE - 345)) | (1L << (ALGORITHM - 345)) | (1L << (ANY - 345)) | (1L << (AT - 345)) | (1L << (AUTHORS - 345)) | (1L << (AUTOCOMMIT - 345)) | (1L << (AUTOEXTEND_SIZE - 345)) | (1L << (AUTO_INCREMENT - 345)) | (1L << (AVG_ROW_LENGTH - 345)) | (1L << (BEGIN - 345)) | (1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (COPY - 409)) | (1L << (CPU - 409)) | (1L << (CURSOR_NAME - 409)) | (1L << (DATA - 409)) | (1L << (DATAFILE - 409)) | (1L << (DEALLOCATE - 409)) | (1L << (DEFAULT_AUTH - 409)) | (1L << (DEFINER - 409)) | (1L << (DELAY_KEY_WRITE - 409)) | (1L << (DES_KEY_FILE - 409)) | (1L << (DIRECTORY - 409)) | (1L << (DISABLE - 409)) | (1L << (DISCARD - 409)) | (1L << (DISK - 409)) | (1L << (DO - 409)) | (1L << (DUMPFILE - 409)) | (1L << (DUPLICATE - 409)) | (1L << (DYNAMIC - 409)) | (1L << (ENABLE - 409)) | (1L << (ENCRYPTION - 409)) | (1L << (END - 409)) | (1L << (ENDS - 409)) | (1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (INPLACE - 473)) | (1L << (INSERT_METHOD - 473)) | (1L << (INSTALL - 473)) | (1L << (INSTANCE - 473)) | (1L << (INVISIBLE - 473)) | (1L << (INVOKER - 473)) | (1L << (IO - 473)) | (1L << (IO_THREAD - 473)) | (1L << (IPC - 473)) | (1L << (ISOLATION - 473)) | (1L << (ISSUER - 473)) | (1L << (JSON - 473)) | (1L << (KEY_BLOCK_SIZE - 473)) | (1L << (LANGUAGE - 473)) | (1L << (LAST - 473)) | (1L << (LEAVES - 473)) | (1L << (LESS - 473)) | (1L << (LEVEL - 473)) | (1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (NEVER - 537)) | (1L << (NEXT - 537)) | (1L << (NO - 537)) | (1L << (NODEGROUP - 537)) | (1L << (NONE - 537)) | (1L << (ODBC - 537)) | (1L << (OFFLINE - 537)) | (1L << (OFFSET - 537)) | (1L << (OF - 537)) | (1L << (OJ - 537)) | (1L << (OLD_PASSWORD - 537)) | (1L << (ONE - 537)) | (1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (RETURNS - 601)) | (1L << (ROLE - 601)) | (1L << (ROLLBACK - 601)) | (1L << (ROLLUP - 601)) | (1L << (ROTATE - 601)) | (1L << (ROW - 601)) | (1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (UNINSTALL - 665)) | (1L << (UNKNOWN - 665)) | (1L << (UNTIL - 665)) | (1L << (UPGRADE - 665)) | (1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (TABLES - 665)) | (1L << (ROUTINE - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (SHUTDOWN - 665)) | (1L << (SUPER - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (REPLICATION_APPLIER - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (REPLICATION_SLAVE_ADMIN - 729)) | (1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)) | (1L << (MYISAM - 729)) | (1L << (NDB - 729)) | (1L << (NDBCLUSTER - 729)) | (1L << (PERFORMANCE_SCHEMA - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)) | (1L << (CROSSES - 793)) | (1L << (DATEDIFF - 793)) | (1L << (DATE_FORMAT - 793)) | (1L << (DAYNAME - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)) | (1L << (IS_IPV4_MAPPED - 857)) | (1L << (IS_IPV6 - 857)) | (1L << (IS_USED_LOCK - 857)) | (1L << (LAST_INSERT_ID - 857)) | (1L << (LCASE - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)) | (1L << (POW - 921)) | (1L << (POWER - 921)) | (1L << (QUOTE - 921)) | (1L << (RADIANS - 921)) | (1L << (RAND - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)) | (1L << (ST_LINEFROMWKB - 985)) | (1L << (ST_LINESTRINGFROMTEXT - 985)) | (1L << (ST_LINESTRINGFROMWKB - 985)) | (1L << (ST_NUMGEOMETRIES - 985)) | (1L << (ST_NUMINTERIORRING - 985)) | (1L << (ST_NUMINTERIORRINGS - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)) | (1L << (PLUS - 1049)) | (1L << (MINUS - 1049)))) != 0) || ((((_la - 1114)) & ~0x3f) == 0 && ((1L << (_la - 1114)) & ((1L << (MOD - 1114)) | (1L << (EXCLAMATION_SYMBOL - 1114)) | (1L << (BIT_NOT_OP - 1114)) | (1L << (DOT - 1114)) | (1L << (LR_BRACKET - 1114)) | (1L << (ZERO_DECIMAL - 1114)) | (1L << (ONE_DECIMAL - 1114)) | (1L << (TWO_DECIMAL - 1114)) | (1L << (START_NATIONAL_STRING_LITERAL - 1114)) | (1L << (STRING_LITERAL - 1114)) | (1L << (DECIMAL_LITERAL - 1114)) | (1L << (HEXADECIMAL_LITERAL - 1114)) | (1L << (REAL_LITERAL - 1114)) | (1L << (NULL_SPEC_LITERAL - 1114)) | (1L << (BIT_STRING - 1114)) | (1L << (STRING_CHARSET_NAME - 1114)) | (1L << (ID - 1114)) | (1L << (REVERSE_QUOTE_ID - 1114)) | (1L << (LOCAL_ID - 1114)) | (1L << (GLOBAL_ID - 1114)))) != 0)) {
					{
					setState(592);
					functionArgs();
					}
				}

				setState(595);
				rightParen();
				}
				break;
			case 6:
				_localctx = new PasswordFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(597);
				passwordFunctionClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecificFunctionContext extends ParserRuleContext {
		public SpecificFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specificFunction; }
	 
		public SpecificFunctionContext() { }
		public void copyFrom(SpecificFunctionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PositionFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext positionString;
		public ExpressionContext positionExpression;
		public StringLiteralContext inString;
		public ExpressionContext inExpression;
		public TerminalNode POSITION() { return getToken(SimpleSpeakQlParser.POSITION, 0); }
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public TerminalNode IN() { return getToken(SimpleSpeakQlParser.IN, 0); }
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public PositionFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterPositionFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitPositionFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitPositionFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TrimFunctionCallContext extends SpecificFunctionContext {
		public Token positioinForm;
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public StringLiteralContext fromString;
		public ExpressionContext fromExpression;
		public TerminalNode TRIM() { return getToken(SimpleSpeakQlParser.TRIM, 0); }
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SimpleSpeakQlParser.FROM, 0); }
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public TerminalNode BOTH() { return getToken(SimpleSpeakQlParser.BOTH, 0); }
		public TerminalNode LEADING() { return getToken(SimpleSpeakQlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(SimpleSpeakQlParser.TRAILING, 0); }
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TrimFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterTrimFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitTrimFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitTrimFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonValueFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode JSON_VALUE() { return getToken(SimpleSpeakQlParser.JSON_VALUE, 0); }
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(SimpleSpeakQlParser.COMMA, 0); }
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(SimpleSpeakQlParser.RETURNING, 0); }
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(SimpleSpeakQlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(SimpleSpeakQlParser.ON, i);
		}
		public TerminalNode EMPTY() { return getToken(SimpleSpeakQlParser.EMPTY, 0); }
		public List<TerminalNode> ERROR() { return getTokens(SimpleSpeakQlParser.ERROR); }
		public TerminalNode ERROR(int i) {
			return getToken(SimpleSpeakQlParser.ERROR, i);
		}
		public List<TerminalNode> NULL_LITERAL() { return getTokens(SimpleSpeakQlParser.NULL_LITERAL); }
		public TerminalNode NULL_LITERAL(int i) {
			return getToken(SimpleSpeakQlParser.NULL_LITERAL, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(SimpleSpeakQlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(SimpleSpeakQlParser.DEFAULT, i);
		}
		public List<DefaultValueContext> defaultValue() {
			return getRuleContexts(DefaultValueContext.class);
		}
		public DefaultValueContext defaultValue(int i) {
			return getRuleContext(DefaultValueContext.class,i);
		}
		public JsonValueFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterJsonValueFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitJsonValueFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitJsonValueFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CaseFunctionCallContext extends SpecificFunctionContext {
		public FunctionArgContext elseArg;
		public TerminalNode CASE() { return getToken(SimpleSpeakQlParser.CASE, 0); }
		public TerminalNode END() { return getToken(SimpleSpeakQlParser.END, 0); }
		public List<CaseFuncAlternativeContext> caseFuncAlternative() {
			return getRuleContexts(CaseFuncAlternativeContext.class);
		}
		public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return getRuleContext(CaseFuncAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(SimpleSpeakQlParser.ELSE, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public CaseFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterCaseFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitCaseFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitCaseFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExtractFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public TerminalNode EXTRACT() { return getToken(SimpleSpeakQlParser.EXTRACT, 0); }
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SimpleSpeakQlParser.FROM, 0); }
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ExtractFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterExtractFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitExtractFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitExtractFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DataTypeFunctionCallContext extends SpecificFunctionContext {
		public Token separator;
		public TerminalNode CONVERT() { return getToken(SimpleSpeakQlParser.CONVERT, 0); }
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(SimpleSpeakQlParser.COMMA, 0); }
		public TerminalNode USING() { return getToken(SimpleSpeakQlParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CAST() { return getToken(SimpleSpeakQlParser.CAST, 0); }
		public TerminalNode AS() { return getToken(SimpleSpeakQlParser.AS, 0); }
		public DataTypeFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterDataTypeFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitDataTypeFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitDataTypeFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ValuesFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode VALUES() { return getToken(SimpleSpeakQlParser.VALUES, 0); }
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public ValuesFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterValuesFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitValuesFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitValuesFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CaseExpressionFunctionCallContext extends SpecificFunctionContext {
		public FunctionArgContext elseArg;
		public TerminalNode CASE() { return getToken(SimpleSpeakQlParser.CASE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(SimpleSpeakQlParser.END, 0); }
		public List<CaseFuncAlternativeContext> caseFuncAlternative() {
			return getRuleContexts(CaseFuncAlternativeContext.class);
		}
		public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return getRuleContext(CaseFuncAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(SimpleSpeakQlParser.ELSE, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public CaseExpressionFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterCaseExpressionFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitCaseExpressionFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitCaseExpressionFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode CURRENT_DATE() { return getToken(SimpleSpeakQlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(SimpleSpeakQlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(SimpleSpeakQlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(SimpleSpeakQlParser.CURRENT_USER, 0); }
		public TerminalNode LOCALTIME() { return getToken(SimpleSpeakQlParser.LOCALTIME, 0); }
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public SimpleFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSimpleFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSimpleFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSimpleFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CharFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode CHAR() { return getToken(SimpleSpeakQlParser.CHAR, 0); }
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public TerminalNode USING() { return getToken(SimpleSpeakQlParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CharFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterCharFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitCharFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitCharFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WeightFunctionCallContext extends SpecificFunctionContext {
		public Token stringFormat;
		public TerminalNode WEIGHT_STRING() { return getToken(SimpleSpeakQlParser.WEIGHT_STRING, 0); }
		public List<LeftParenContext> leftParen() {
			return getRuleContexts(LeftParenContext.class);
		}
		public LeftParenContext leftParen(int i) {
			return getRuleContext(LeftParenContext.class,i);
		}
		public List<RightParenContext> rightParen() {
			return getRuleContexts(RightParenContext.class);
		}
		public RightParenContext rightParen(int i) {
			return getRuleContext(RightParenContext.class,i);
		}
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(SimpleSpeakQlParser.AS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public LevelsInWeightStringContext levelsInWeightString() {
			return getRuleContext(LevelsInWeightStringContext.class,0);
		}
		public TerminalNode CHAR() { return getToken(SimpleSpeakQlParser.CHAR, 0); }
		public TerminalNode BINARY() { return getToken(SimpleSpeakQlParser.BINARY, 0); }
		public WeightFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterWeightFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitWeightFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitWeightFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GetFormatFunctionCallContext extends SpecificFunctionContext {
		public Token datetimeFormat;
		public TerminalNode GET_FORMAT() { return getToken(SimpleSpeakQlParser.GET_FORMAT, 0); }
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(SimpleSpeakQlParser.COMMA, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public TerminalNode DATE() { return getToken(SimpleSpeakQlParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(SimpleSpeakQlParser.TIME, 0); }
		public TerminalNode DATETIME() { return getToken(SimpleSpeakQlParser.DATETIME, 0); }
		public GetFormatFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterGetFormatFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitGetFormatFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitGetFormatFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubstrFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public DecimalLiteralContext fromDecimal;
		public ExpressionContext fromExpression;
		public DecimalLiteralContext forDecimal;
		public ExpressionContext forExpression;
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SimpleSpeakQlParser.FROM, 0); }
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public TerminalNode SUBSTR() { return getToken(SimpleSpeakQlParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(SimpleSpeakQlParser.SUBSTRING, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode FOR() { return getToken(SimpleSpeakQlParser.FOR, 0); }
		public SubstrFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSubstrFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSubstrFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSubstrFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecificFunctionContext specificFunction() throws RecognitionException {
		SpecificFunctionContext _localctx = new SpecificFunctionContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_specificFunction);
		int _la;
		try {
			setState(793);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {
			case 1:
				_localctx = new SimpleFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(600);
				_la = _input.LA(1);
				if ( !(_la==CURRENT_USER || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (CURRENT_DATE - 339)) | (1L << (CURRENT_TIME - 339)) | (1L << (CURRENT_TIMESTAMP - 339)) | (1L << (LOCALTIME - 339)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(604);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
				case 1:
					{
					setState(601);
					leftParen();
					setState(602);
					rightParen();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(606);
				match(CONVERT);
				setState(607);
				leftParen();
				setState(608);
				expression(0);
				setState(609);
				((DataTypeFunctionCallContext)_localctx).separator = match(COMMA);
				setState(610);
				convertedDataType();
				setState(611);
				rightParen();
				}
				break;
			case 3:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(613);
				match(CONVERT);
				setState(614);
				leftParen();
				setState(615);
				expression(0);
				setState(616);
				match(USING);
				setState(617);
				charsetName();
				setState(618);
				rightParen();
				}
				break;
			case 4:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(620);
				match(CAST);
				setState(621);
				leftParen();
				setState(622);
				expression(0);
				setState(623);
				match(AS);
				setState(624);
				convertedDataType();
				setState(625);
				rightParen();
				}
				break;
			case 5:
				_localctx = new ValuesFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(627);
				match(VALUES);
				setState(628);
				leftParen();
				setState(629);
				fullColumnName();
				setState(630);
				rightParen();
				}
				break;
			case 6:
				_localctx = new CaseExpressionFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(632);
				match(CASE);
				setState(633);
				expression(0);
				setState(635); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(634);
					caseFuncAlternative();
					}
					}
					setState(637); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(641);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(639);
					match(ELSE);
					setState(640);
					((CaseExpressionFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				setState(643);
				match(END);
				}
				break;
			case 7:
				_localctx = new CaseFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(645);
				match(CASE);
				setState(647); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(646);
					caseFuncAlternative();
					}
					}
					setState(649); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(653);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(651);
					match(ELSE);
					setState(652);
					((CaseFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				setState(655);
				match(END);
				}
				break;
			case 8:
				_localctx = new CharFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(657);
				match(CHAR);
				setState(658);
				leftParen();
				setState(659);
				functionArgs();
				setState(662);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(660);
					match(USING);
					setState(661);
					charsetName();
					}
				}

				setState(664);
				rightParen();
				}
				break;
			case 9:
				_localctx = new PositionFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(666);
				match(POSITION);
				setState(667);
				leftParen();
				setState(670);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
				case 1:
					{
					setState(668);
					((PositionFunctionCallContext)_localctx).positionString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(669);
					((PositionFunctionCallContext)_localctx).positionExpression = expression(0);
					}
					break;
				}
				setState(672);
				match(IN);
				setState(675);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,64,_ctx) ) {
				case 1:
					{
					setState(673);
					((PositionFunctionCallContext)_localctx).inString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(674);
					((PositionFunctionCallContext)_localctx).inExpression = expression(0);
					}
					break;
				}
				setState(677);
				rightParen();
				}
				break;
			case 10:
				_localctx = new SubstrFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(679);
				_la = _input.LA(1);
				if ( !(_la==SUBSTR || _la==SUBSTRING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(680);
				leftParen();
				setState(683);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
				case 1:
					{
					setState(681);
					((SubstrFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(682);
					((SubstrFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(685);
				match(FROM);
				setState(688);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,66,_ctx) ) {
				case 1:
					{
					setState(686);
					((SubstrFunctionCallContext)_localctx).fromDecimal = decimalLiteral();
					}
					break;
				case 2:
					{
					setState(687);
					((SubstrFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(695);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(690);
					match(FOR);
					setState(693);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,67,_ctx) ) {
					case 1:
						{
						setState(691);
						((SubstrFunctionCallContext)_localctx).forDecimal = decimalLiteral();
						}
						break;
					case 2:
						{
						setState(692);
						((SubstrFunctionCallContext)_localctx).forExpression = expression(0);
						}
						break;
					}
					}
				}

				setState(697);
				rightParen();
				}
				break;
			case 11:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(699);
				match(TRIM);
				setState(700);
				leftParen();
				setState(701);
				((TrimFunctionCallContext)_localctx).positioinForm = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
					((TrimFunctionCallContext)_localctx).positioinForm = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(704);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,69,_ctx) ) {
				case 1:
					{
					setState(702);
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(703);
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(706);
				match(FROM);
				setState(709);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,70,_ctx) ) {
				case 1:
					{
					setState(707);
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(708);
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(711);
				rightParen();
				}
				break;
			case 12:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(713);
				match(TRIM);
				setState(714);
				leftParen();
				setState(717);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
				case 1:
					{
					setState(715);
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(716);
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(719);
				match(FROM);
				setState(722);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
				case 1:
					{
					setState(720);
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(721);
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(724);
				rightParen();
				}
				break;
			case 13:
				_localctx = new WeightFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(726);
				match(WEIGHT_STRING);
				setState(727);
				leftParen();
				setState(730);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
				case 1:
					{
					setState(728);
					stringLiteral();
					}
					break;
				case 2:
					{
					setState(729);
					expression(0);
					}
					break;
				}
				setState(738);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(732);
					match(AS);
					setState(733);
					((WeightFunctionCallContext)_localctx).stringFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==BINARY) ) {
						((WeightFunctionCallContext)_localctx).stringFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(734);
					leftParen();
					setState(735);
					decimalLiteral();
					setState(736);
					rightParen();
					}
				}

				setState(741);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEVEL) {
					{
					setState(740);
					levelsInWeightString();
					}
				}

				setState(743);
				rightParen();
				}
				break;
			case 14:
				_localctx = new ExtractFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(745);
				match(EXTRACT);
				setState(746);
				leftParen();
				setState(747);
				intervalType();
				setState(748);
				match(FROM);
				setState(751);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
				case 1:
					{
					setState(749);
					((ExtractFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(750);
					((ExtractFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(753);
				rightParen();
				}
				break;
			case 15:
				_localctx = new GetFormatFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(755);
				match(GET_FORMAT);
				setState(756);
				leftParen();
				setState(757);
				((GetFormatFunctionCallContext)_localctx).datetimeFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (DATE - 246)) | (1L << (TIME - 246)) | (1L << (DATETIME - 246)))) != 0)) ) {
					((GetFormatFunctionCallContext)_localctx).datetimeFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(758);
				match(COMMA);
				setState(759);
				stringLiteral();
				setState(760);
				rightParen();
				}
				break;
			case 16:
				_localctx = new JsonValueFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(762);
				match(JSON_VALUE);
				setState(763);
				leftParen();
				setState(764);
				expression(0);
				setState(765);
				match(COMMA);
				setState(766);
				expression(0);
				setState(769);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURNING) {
					{
					setState(767);
					match(RETURNING);
					setState(768);
					convertedDataType();
					}
				}

				setState(779);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
				case 1:
					{
					setState(775);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NULL_LITERAL:
						{
						setState(771);
						match(NULL_LITERAL);
						}
						break;
					case ERROR:
						{
						setState(772);
						match(ERROR);
						}
						break;
					case DEFAULT:
						{
						{
						setState(773);
						match(DEFAULT);
						setState(774);
						defaultValue();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(777);
					match(ON);
					setState(778);
					match(EMPTY);
					}
					break;
				}
				setState(789);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==NULL_LITERAL || _la==ERROR) {
					{
					setState(785);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NULL_LITERAL:
						{
						setState(781);
						match(NULL_LITERAL);
						}
						break;
					case ERROR:
						{
						setState(782);
						match(ERROR);
						}
						break;
					case DEFAULT:
						{
						{
						setState(783);
						match(DEFAULT);
						setState(784);
						defaultValue();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(787);
					match(ON);
					setState(788);
					match(ERROR);
					}
				}

				setState(791);
				rightParen();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LeftParenContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(SimpleSpeakQlParser.LR_BRACKET, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(SimpleSpeakQlParser.OPEN_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SimpleSpeakQlParser.LEFT_PAREN, 0); }
		public TerminalNode OPEN_PARENTHESIS() { return getToken(SimpleSpeakQlParser.OPEN_PARENTHESIS, 0); }
		public TerminalNode LEFT_PARENTHESIS() { return getToken(SimpleSpeakQlParser.LEFT_PARENTHESIS, 0); }
		public LeftParenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leftParen; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterLeftParen(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitLeftParen(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitLeftParen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LeftParenContext leftParen() throws RecognitionException {
		LeftParenContext _localctx = new LeftParenContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_leftParen);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(795);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPEN_PARENTHESIS) | (1L << LEFT_PARENTHESIS) | (1L << OPEN_PAREN) | (1L << LEFT_PAREN))) != 0) || _la==LR_BRACKET) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RightParenContext extends ParserRuleContext {
		public TerminalNode RR_BRACKET() { return getToken(SimpleSpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(SimpleSpeakQlParser.CLOSE_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SimpleSpeakQlParser.RIGHT_PAREN, 0); }
		public TerminalNode CLOSE_PARENTHESIS() { return getToken(SimpleSpeakQlParser.CLOSE_PARENTHESIS, 0); }
		public TerminalNode RIGHT_PARENTHESIS() { return getToken(SimpleSpeakQlParser.RIGHT_PARENTHESIS, 0); }
		public RightParenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rightParen; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterRightParen(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitRightParen(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitRightParen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RightParenContext rightParen() throws RecognitionException {
		RightParenContext _localctx = new RightParenContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_rightParen);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(797);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLOSE_PARENTHESIS) | (1L << RIGHT_PARENTHESIS) | (1L << CLOSE_PAREN) | (1L << RIGHT_PAREN))) != 0) || _la==RR_BRACKET) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
	 
		public ExpressionContext() { }
		public void copyFrom(ExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class IsExpressionContext extends ExpressionContext {
		public Token testValue;
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(SimpleSpeakQlParser.IS, 0); }
		public TerminalNode TRUE() { return getToken(SimpleSpeakQlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(SimpleSpeakQlParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(SimpleSpeakQlParser.UNKNOWN, 0); }
		public TerminalNode NOT() { return getToken(SimpleSpeakQlParser.NOT, 0); }
		public IsExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterIsExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitIsExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitIsExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NotExpressionContext extends ExpressionContext {
		public Token notOperator;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SimpleSpeakQlParser.NOT, 0); }
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(SimpleSpeakQlParser.EXCLAMATION_SYMBOL, 0); }
		public NotExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterNotExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitNotExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitNotExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LogicalExpressionContext extends ExpressionContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public LogicalOperatorContext logicalOperator() {
			return getRuleContext(LogicalOperatorContext.class,0);
		}
		public LogicalExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterLogicalExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitLogicalExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitLogicalExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PredicateExpressionContext extends ExpressionContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PredicateExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterPredicateExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitPredicateExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitPredicateExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		return expression(0);
	}

	private ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 64;
		enterRecursionRule(_localctx, 64, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(810);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,84,_ctx) ) {
			case 1:
				{
				_localctx = new NotExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(800);
				((NotExpressionContext)_localctx).notOperator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NOT || _la==EXCLAMATION_SYMBOL) ) {
					((NotExpressionContext)_localctx).notOperator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(801);
				expression(4);
				}
				break;
			case 2:
				{
				_localctx = new IsExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(802);
				predicate(0);
				setState(803);
				match(IS);
				setState(805);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(804);
					match(NOT);
					}
				}

				setState(807);
				((IsExpressionContext)_localctx).testValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
					((IsExpressionContext)_localctx).testValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				{
				_localctx = new PredicateExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(809);
				predicate(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(818);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,85,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_expression);
					setState(812);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(813);
					logicalOperator();
					setState(814);
					expression(4);
					}
					} 
				}
				setState(820);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,85,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class LogicalOperatorContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(SimpleSpeakQlParser.AND, 0); }
		public List<TerminalNode> BIT_AND_OP() { return getTokens(SimpleSpeakQlParser.BIT_AND_OP); }
		public TerminalNode BIT_AND_OP(int i) {
			return getToken(SimpleSpeakQlParser.BIT_AND_OP, i);
		}
		public TerminalNode XOR() { return getToken(SimpleSpeakQlParser.XOR, 0); }
		public TerminalNode OR() { return getToken(SimpleSpeakQlParser.OR, 0); }
		public List<TerminalNode> BIT_OR_OP() { return getTokens(SimpleSpeakQlParser.BIT_OR_OP); }
		public TerminalNode BIT_OR_OP(int i) {
			return getToken(SimpleSpeakQlParser.BIT_OR_OP, i);
		}
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logicalOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterLogicalOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitLogicalOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitLogicalOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogicalOperatorContext logicalOperator() throws RecognitionException {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_logicalOperator);
		try {
			setState(828);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
				enterOuterAlt(_localctx, 1);
				{
				setState(821);
				match(AND);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(822);
				match(BIT_AND_OP);
				setState(823);
				match(BIT_AND_OP);
				}
				break;
			case XOR:
				enterOuterAlt(_localctx, 3);
				{
				setState(824);
				match(XOR);
				}
				break;
			case OR:
				enterOuterAlt(_localctx, 4);
				{
				setState(825);
				match(OR);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(826);
				match(BIT_OR_OP);
				setState(827);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
	 
		public PredicateContext() { }
		public void copyFrom(PredicateContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SoundsLikePredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode SOUNDS() { return getToken(SimpleSpeakQlParser.SOUNDS, 0); }
		public TerminalNode LIKE() { return getToken(SimpleSpeakQlParser.LIKE, 0); }
		public SoundsLikePredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSoundsLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSoundsLikePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSoundsLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExpressionAtomPredicateContext extends PredicateContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(SimpleSpeakQlParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(SimpleSpeakQlParser.VAR_ASSIGN, 0); }
		public ExpressionAtomPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterExpressionAtomPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitExpressionAtomPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitExpressionAtomPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubqueryComparisonPredicateContext extends PredicateContext {
		public Token quantifier;
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SimpleSpeakQlParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(SimpleSpeakQlParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(SimpleSpeakQlParser.SOME, 0); }
		public SubqueryComparisonPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSubqueryComparisonPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSubqueryComparisonPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSubqueryComparisonPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonMemberOfPredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode MEMBER() { return getToken(SimpleSpeakQlParser.MEMBER, 0); }
		public TerminalNode OF() { return getToken(SimpleSpeakQlParser.OF, 0); }
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public JsonMemberOfPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterJsonMemberOfPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitJsonMemberOfPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitJsonMemberOfPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BinaryComparisonPredicateContext extends PredicateContext {
		public PredicateContext left;
		public PredicateContext right;
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public BinaryComparisonPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterBinaryComparisonPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitBinaryComparisonPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitBinaryComparisonPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class InPredicateContext extends PredicateContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IN() { return getToken(SimpleSpeakQlParser.IN, 0); }
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SimpleSpeakQlParser.NOT, 0); }
		public IsKeywordContext isKeyword() {
			return getRuleContext(IsKeywordContext.class,0);
		}
		public InPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterInPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitInPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitInPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BetweenPredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(SimpleSpeakQlParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(SimpleSpeakQlParser.AND, 0); }
		public TerminalNode NOT() { return getToken(SimpleSpeakQlParser.NOT, 0); }
		public BetweenPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterBetweenPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitBetweenPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitBetweenPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IsNullPredicateContext extends PredicateContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(SimpleSpeakQlParser.IS, 0); }
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public IsNullPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterIsNullPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitIsNullPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitIsNullPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LikePredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(SimpleSpeakQlParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(SimpleSpeakQlParser.NOT, 0); }
		public TerminalNode ESCAPE() { return getToken(SimpleSpeakQlParser.ESCAPE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SimpleSpeakQlParser.STRING_LITERAL, 0); }
		public LikePredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitLikePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RegexpPredicateContext extends PredicateContext {
		public Token regex;
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode REGEXP() { return getToken(SimpleSpeakQlParser.REGEXP, 0); }
		public TerminalNode RLIKE() { return getToken(SimpleSpeakQlParser.RLIKE, 0); }
		public TerminalNode NOT() { return getToken(SimpleSpeakQlParser.NOT, 0); }
		public RegexpPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterRegexpPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitRegexpPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitRegexpPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		PredicateContext _localctx = new PredicateContext(_ctx, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 68;
		enterRecursionRule(_localctx, 68, RULE_predicate, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ExpressionAtomPredicateContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(833);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,87,_ctx) ) {
			case 1:
				{
				setState(831);
				match(LOCAL_ID);
				setState(832);
				match(VAR_ASSIGN);
				}
				break;
			}
			setState(835);
			expressionAtom(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(904);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,96,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(902);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,95,_ctx) ) {
					case 1:
						{
						_localctx = new BinaryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
						((BinaryComparisonPredicateContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(837);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(838);
						comparisonOperator();
						setState(839);
						((BinaryComparisonPredicateContext)_localctx).right = predicate(9);
						}
						break;
					case 2:
						{
						_localctx = new BetweenPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(841);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(843);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(842);
							match(NOT);
							}
						}

						setState(845);
						match(BETWEEN);
						setState(846);
						predicate(0);
						setState(847);
						match(AND);
						setState(848);
						predicate(7);
						}
						break;
					case 3:
						{
						_localctx = new SoundsLikePredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(850);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(851);
						match(SOUNDS);
						setState(852);
						match(LIKE);
						setState(853);
						predicate(6);
						}
						break;
					case 4:
						{
						_localctx = new RegexpPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(854);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(856);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(855);
							match(NOT);
							}
						}

						setState(858);
						((RegexpPredicateContext)_localctx).regex = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==REGEXP || _la==RLIKE) ) {
							((RegexpPredicateContext)_localctx).regex = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(859);
						predicate(4);
						}
						break;
					case 5:
						{
						_localctx = new InPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(860);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(862);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(861);
							match(NOT);
							}
						}

						setState(865);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==IS) {
							{
							setState(864);
							isKeyword();
							}
						}

						setState(867);
						match(IN);
						setState(868);
						leftParen();
						setState(871);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,92,_ctx) ) {
						case 1:
							{
							setState(869);
							selectStatement();
							}
							break;
						case 2:
							{
							setState(870);
							expressions();
							}
							break;
						}
						setState(873);
						rightParen();
						}
						break;
					case 6:
						{
						_localctx = new IsNullPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(875);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(876);
						match(IS);
						setState(877);
						nullNotnull();
						}
						break;
					case 7:
						{
						_localctx = new SubqueryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(878);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(879);
						comparisonOperator();
						setState(880);
						((SubqueryComparisonPredicateContext)_localctx).quantifier = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
							((SubqueryComparisonPredicateContext)_localctx).quantifier = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(881);
						leftParen();
						setState(882);
						selectStatement();
						setState(883);
						rightParen();
						}
						break;
					case 8:
						{
						_localctx = new LikePredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(885);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(887);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(886);
							match(NOT);
							}
						}

						setState(889);
						match(LIKE);
						setState(890);
						predicate(0);
						setState(893);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,94,_ctx) ) {
						case 1:
							{
							setState(891);
							match(ESCAPE);
							setState(892);
							match(STRING_LITERAL);
							}
							break;
						}
						}
						break;
					case 9:
						{
						_localctx = new JsonMemberOfPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(895);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(896);
						match(MEMBER);
						setState(897);
						match(OF);
						setState(898);
						leftParen();
						setState(899);
						predicate(0);
						setState(900);
						rightParen();
						}
						break;
					}
					} 
				}
				setState(906);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,96,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class IsKeywordContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(SimpleSpeakQlParser.IS, 0); }
		public IsKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterIsKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitIsKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitIsKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IsKeywordContext isKeyword() throws RecognitionException {
		IsKeywordContext _localctx = new IsKeywordContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_isKeyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(907);
			match(IS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionDelimiterContext extends ParserRuleContext {
		public TerminalNode AND_THEN() { return getToken(SimpleSpeakQlParser.AND_THEN, 0); }
		public TerminalNode THEN() { return getToken(SimpleSpeakQlParser.THEN, 0); }
		public ExpressionDelimiterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionDelimiter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterExpressionDelimiter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitExpressionDelimiter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitExpressionDelimiter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionDelimiterContext expressionDelimiter() throws RecognitionException {
		ExpressionDelimiterContext _localctx = new ExpressionDelimiterContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_expressionDelimiter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(909);
			_la = _input.LA(1);
			if ( !(_la==AND_THEN || _la==THEN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectModifierExpressionContext extends ParserRuleContext {
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public SelectIntoExpressionContext selectIntoExpression() {
			return getRuleContext(SelectIntoExpressionContext.class,0);
		}
		public SelectModifierExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectModifierExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSelectModifierExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSelectModifierExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSelectModifierExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectModifierExpressionContext selectModifierExpression() throws RecognitionException {
		SelectModifierExpressionContext _localctx = new SelectModifierExpressionContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_selectModifierExpression);
		int _la;
		try {
			setState(944);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(912);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GROUP) {
					{
					setState(911);
					groupByClause();
					}
				}

				setState(915);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HAVING) {
					{
					setState(914);
					havingClause();
					}
				}

				setState(918);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WINDOW) {
					{
					setState(917);
					windowClause();
					}
				}

				setState(921);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,100,_ctx) ) {
				case 1:
					{
					setState(920);
					orderByClause();
					}
					break;
				}
				setState(924);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,101,_ctx) ) {
				case 1:
					{
					setState(923);
					limitClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(927);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GROUP) {
					{
					setState(926);
					groupByClause();
					}
				}

				setState(930);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HAVING) {
					{
					setState(929);
					havingClause();
					}
				}

				setState(933);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WINDOW) {
					{
					setState(932);
					windowClause();
					}
				}

				setState(936);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
				case 1:
					{
					setState(935);
					orderByClause();
					}
					break;
				}
				setState(939);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
				case 1:
					{
					setState(938);
					limitClause();
					}
					break;
				}
				setState(942);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(941);
					selectIntoExpression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByClauseContext extends ParserRuleContext {
		public GroupByKeywordContext groupByKeyword() {
			return getRuleContext(GroupByKeywordContext.class,0);
		}
		public List<GroupByItemContext> groupByItem() {
			return getRuleContexts(GroupByItemContext.class);
		}
		public GroupByItemContext groupByItem(int i) {
			return getRuleContext(GroupByItemContext.class,i);
		}
		public List<GroupByItemDelimiterContext> groupByItemDelimiter() {
			return getRuleContexts(GroupByItemDelimiterContext.class);
		}
		public GroupByItemDelimiterContext groupByItemDelimiter(int i) {
			return getRuleContext(GroupByItemDelimiterContext.class,i);
		}
		public TerminalNode WITH() { return getToken(SimpleSpeakQlParser.WITH, 0); }
		public TerminalNode ROLLUP() { return getToken(SimpleSpeakQlParser.ROLLUP, 0); }
		public ExpressionDelimiterContext expressionDelimiter() {
			return getRuleContext(ExpressionDelimiterContext.class,0);
		}
		public List<AggregateWindowedFunctionContext> aggregateWindowedFunction() {
			return getRuleContexts(AggregateWindowedFunctionContext.class);
		}
		public AggregateWindowedFunctionContext aggregateWindowedFunction(int i) {
			return getRuleContext(AggregateWindowedFunctionContext.class,i);
		}
		public SelectKeywordContext selectKeyword() {
			return getRuleContext(SelectKeywordContext.class,0);
		}
		public List<SelectElementDelimiterContext> selectElementDelimiter() {
			return getRuleContexts(SelectElementDelimiterContext.class);
		}
		public SelectElementDelimiterContext selectElementDelimiter(int i) {
			return getRuleContext(SelectElementDelimiterContext.class,i);
		}
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterGroupByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitGroupByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitGroupByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_groupByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(946);
			groupByKeyword();
			setState(947);
			groupByItem();
			setState(953);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AND || _la==COMMA) {
				{
				{
				setState(948);
				groupByItemDelimiter();
				setState(949);
				groupByItem();
				}
				}
				setState(955);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(958);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(956);
				match(WITH);
				setState(957);
				match(ROLLUP);
				}
			}

			setState(973);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND_THEN || _la==THEN) {
				{
				setState(960);
				expressionDelimiter();
				setState(962);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RETRIEVE) | (1L << SHOW_ME) | (1L << DISPLAY) | (1L << PRESENT) | (1L << FIND) | (1L << WHAT_IS) | (1L << WHAT_ARE) | (1L << WHAT_IS_THE) | (1L << WHAT_ARE_THE))) != 0) || _la==GET || _la==SELECT) {
					{
					setState(961);
					selectKeyword();
					}
				}

				setState(964);
				aggregateWindowedFunction();
				setState(970);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==AND || _la==COMMA) {
					{
					{
					setState(965);
					selectElementDelimiter();
					setState(966);
					aggregateWindowedFunction();
					}
					}
					setState(972);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByKeywordContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(SimpleSpeakQlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(SimpleSpeakQlParser.BY, 0); }
		public GroupByKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterGroupByKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitGroupByKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitGroupByKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByKeywordContext groupByKeyword() throws RecognitionException {
		GroupByKeywordContext _localctx = new GroupByKeywordContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_groupByKeyword);
		try {
			setState(978);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,114,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(975);
				match(GROUP);
				setState(976);
				match(BY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(977);
				match(GROUP);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByItemContext extends ParserRuleContext {
		public Token order;
		public GroupByExpressionContext groupByExpression() {
			return getRuleContext(GroupByExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(SimpleSpeakQlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(SimpleSpeakQlParser.DESC, 0); }
		public AutomaticGroupByKeywordContext automaticGroupByKeyword() {
			return getRuleContext(AutomaticGroupByKeywordContext.class,0);
		}
		public GroupByItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterGroupByItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitGroupByItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitGroupByItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByItemContext groupByItem() throws RecognitionException {
		GroupByItemContext _localctx = new GroupByItemContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_groupByItem);
		int _la;
		try {
			setState(985);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SPOKEN_DOT:
			case OPEN_PARENTHESIS:
			case LEFT_PARENTHESIS:
			case OPEN_PAREN:
			case LEFT_PAREN:
			case THE:
			case CASE:
			case CAST:
			case CONVERT:
			case CURRENT:
			case CURRENT_USER:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case EXISTS:
			case FALSE:
			case GROUP:
			case IF:
			case INSERT:
			case INTERVAL:
			case LEFT:
			case NOT:
			case NULL_LITERAL:
			case NUMBER:
			case ORDER:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case TRUE:
			case VALUES:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case CHAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case EXTRACT:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case PLUS:
			case MINUS:
			case MOD:
			case EXCLAMATION_SYMBOL:
			case BIT_NOT_OP:
			case DOT:
			case LR_BRACKET:
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case START_NATIONAL_STRING_LITERAL:
			case STRING_LITERAL:
			case DECIMAL_LITERAL:
			case HEXADECIMAL_LITERAL:
			case REAL_LITERAL:
			case NULL_SPEC_LITERAL:
			case BIT_STRING:
			case STRING_CHARSET_NAME:
			case ID:
			case REVERSE_QUOTE_ID:
			case LOCAL_ID:
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(980);
				groupByExpression();
				setState(982);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(981);
					((GroupByItemContext)_localctx).order = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
						((GroupByItemContext)_localctx).order = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case AUTOMATIC:
			case AUTOMATICALLY:
				enterOuterAlt(_localctx, 2);
				{
				setState(984);
				automaticGroupByKeyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AutomaticGroupByKeywordContext extends ParserRuleContext {
		public TerminalNode AUTOMATIC() { return getToken(SimpleSpeakQlParser.AUTOMATIC, 0); }
		public TerminalNode AUTOMATICALLY() { return getToken(SimpleSpeakQlParser.AUTOMATICALLY, 0); }
		public AutomaticGroupByKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_automaticGroupByKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterAutomaticGroupByKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitAutomaticGroupByKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitAutomaticGroupByKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AutomaticGroupByKeywordContext automaticGroupByKeyword() throws RecognitionException {
		AutomaticGroupByKeywordContext _localctx = new AutomaticGroupByKeywordContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_automaticGroupByKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(987);
			_la = _input.LA(1);
			if ( !(_la==AUTOMATIC || _la==AUTOMATICALLY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByExpressionContext extends ParserRuleContext {
		public Token notOperator;
		public Token testValue;
		public GroupByExpressionContext groupByExpression() {
			return getRuleContext(GroupByExpressionContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SimpleSpeakQlParser.NOT, 0); }
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(SimpleSpeakQlParser.EXCLAMATION_SYMBOL, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(SimpleSpeakQlParser.IS, 0); }
		public TerminalNode TRUE() { return getToken(SimpleSpeakQlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(SimpleSpeakQlParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(SimpleSpeakQlParser.UNKNOWN, 0); }
		public GroupByExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterGroupByExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitGroupByExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitGroupByExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByExpressionContext groupByExpression() throws RecognitionException {
		GroupByExpressionContext _localctx = new GroupByExpressionContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_groupByExpression);
		int _la;
		try {
			setState(999);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(989);
				((GroupByExpressionContext)_localctx).notOperator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NOT || _la==EXCLAMATION_SYMBOL) ) {
					((GroupByExpressionContext)_localctx).notOperator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(990);
				groupByExpression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(991);
				predicate(0);
				setState(992);
				match(IS);
				setState(994);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(993);
					match(NOT);
					}
				}

				setState(996);
				((GroupByExpressionContext)_localctx).testValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
					((GroupByExpressionContext)_localctx).testValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(998);
				predicate(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByItemDelimiterContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(SimpleSpeakQlParser.COMMA, 0); }
		public TerminalNode AND() { return getToken(SimpleSpeakQlParser.AND, 0); }
		public GroupByItemDelimiterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByItemDelimiter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterGroupByItemDelimiter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitGroupByItemDelimiter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitGroupByItemDelimiter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByItemDelimiterContext groupByItemDelimiter() throws RecognitionException {
		GroupByItemDelimiterContext _localctx = new GroupByItemDelimiterContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_groupByItemDelimiter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1001);
			_la = _input.LA(1);
			if ( !(_la==AND || _la==COMMA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingClauseContext extends ParserRuleContext {
		public ExpressionContext havingExpr;
		public HavingKeywordContext havingKeyword() {
			return getRuleContext(HavingKeywordContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterHavingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitHavingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitHavingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1003);
			havingKeyword();
			setState(1004);
			((HavingClauseContext)_localctx).havingExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingKeywordContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(SimpleSpeakQlParser.HAVING, 0); }
		public HavingKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterHavingKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitHavingKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitHavingKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingKeywordContext havingKeyword() throws RecognitionException {
		HavingKeywordContext _localctx = new HavingKeywordContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_havingKeyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1006);
			match(HAVING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowClauseContext extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(SimpleSpeakQlParser.WINDOW, 0); }
		public List<WindowNameContext> windowName() {
			return getRuleContexts(WindowNameContext.class);
		}
		public WindowNameContext windowName(int i) {
			return getRuleContext(WindowNameContext.class,i);
		}
		public List<TerminalNode> AS() { return getTokens(SimpleSpeakQlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(SimpleSpeakQlParser.AS, i);
		}
		public List<LeftParenContext> leftParen() {
			return getRuleContexts(LeftParenContext.class);
		}
		public LeftParenContext leftParen(int i) {
			return getRuleContext(LeftParenContext.class,i);
		}
		public List<WindowSpecContext> windowSpec() {
			return getRuleContexts(WindowSpecContext.class);
		}
		public WindowSpecContext windowSpec(int i) {
			return getRuleContext(WindowSpecContext.class,i);
		}
		public List<RightParenContext> rightParen() {
			return getRuleContexts(RightParenContext.class);
		}
		public RightParenContext rightParen(int i) {
			return getRuleContext(RightParenContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SimpleSpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SimpleSpeakQlParser.COMMA, i);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterWindowClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitWindowClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitWindowClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowClauseContext windowClause() throws RecognitionException {
		WindowClauseContext _localctx = new WindowClauseContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_windowClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1008);
			match(WINDOW);
			setState(1009);
			windowName();
			setState(1010);
			match(AS);
			setState(1011);
			leftParen();
			setState(1012);
			windowSpec();
			setState(1013);
			rightParen();
			setState(1023);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1014);
				match(COMMA);
				setState(1015);
				windowName();
				setState(1016);
				match(AS);
				setState(1017);
				leftParen();
				setState(1018);
				windowSpec();
				setState(1019);
				rightParen();
				}
				}
				setState(1025);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public WindowNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterWindowName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitWindowName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitWindowName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowNameContext windowName() throws RecognitionException {
		WindowNameContext _localctx = new WindowNameContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_windowName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1026);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowSpecContext extends ParserRuleContext {
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public FrameClauseContext frameClause() {
			return getRuleContext(FrameClauseContext.class,0);
		}
		public WindowSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterWindowSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitWindowSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitWindowSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowSpecContext windowSpec() throws RecognitionException {
		WindowSpecContext _localctx = new WindowSpecContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_windowSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1029);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
			case 1:
				{
				setState(1028);
				windowName();
				}
				break;
			}
			setState(1032);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(1031);
				partitionClause();
				}
			}

			setState(1035);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(1034);
				orderByClause();
				}
			}

			setState(1038);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				setState(1037);
				frameClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionClauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(SimpleSpeakQlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(SimpleSpeakQlParser.BY, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SimpleSpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SimpleSpeakQlParser.COMMA, i);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterPartitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitPartitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitPartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionClauseContext partitionClause() throws RecognitionException {
		PartitionClauseContext _localctx = new PartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_partitionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1040);
			match(PARTITION);
			setState(1041);
			match(BY);
			setState(1042);
			expression(0);
			setState(1047);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1043);
				match(COMMA);
				setState(1044);
				expression(0);
				}
				}
				setState(1049);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(SimpleSpeakQlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(SimpleSpeakQlParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SimpleSpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SimpleSpeakQlParser.COMMA, i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterOrderByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitOrderByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitOrderByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByClauseContext orderByClause() throws RecognitionException {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_orderByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1050);
			match(ORDER);
			setState(1051);
			match(BY);
			setState(1052);
			orderByExpression();
			setState(1057);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1053);
				match(COMMA);
				setState(1054);
				orderByExpression();
				}
				}
				setState(1059);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByExpressionContext extends ParserRuleContext {
		public Token order;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(SimpleSpeakQlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(SimpleSpeakQlParser.DESC, 0); }
		public OrderByExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterOrderByExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitOrderByExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitOrderByExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByExpressionContext orderByExpression() throws RecognitionException {
		OrderByExpressionContext _localctx = new OrderByExpressionContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_orderByExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1060);
			expression(0);
			setState(1062);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(1061);
				((OrderByExpressionContext)_localctx).order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((OrderByExpressionContext)_localctx).order = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameClauseContext extends ParserRuleContext {
		public FrameUnitsContext frameUnits() {
			return getRuleContext(FrameUnitsContext.class,0);
		}
		public FrameExtentContext frameExtent() {
			return getRuleContext(FrameExtentContext.class,0);
		}
		public FrameClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterFrameClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitFrameClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitFrameClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameClauseContext frameClause() throws RecognitionException {
		FrameClauseContext _localctx = new FrameClauseContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_frameClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1064);
			frameUnits();
			setState(1065);
			frameExtent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameUnitsContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(SimpleSpeakQlParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(SimpleSpeakQlParser.RANGE, 0); }
		public FrameUnitsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameUnits; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterFrameUnits(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitFrameUnits(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitFrameUnits(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameUnitsContext frameUnits() throws RecognitionException {
		FrameUnitsContext _localctx = new FrameUnitsContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_frameUnits);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1067);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameExtentContext extends ParserRuleContext {
		public FrameRangeContext frameRange() {
			return getRuleContext(FrameRangeContext.class,0);
		}
		public FrameBetweenContext frameBetween() {
			return getRuleContext(FrameBetweenContext.class,0);
		}
		public FrameExtentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameExtent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterFrameExtent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitFrameExtent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitFrameExtent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameExtentContext frameExtent() throws RecognitionException {
		FrameExtentContext _localctx = new FrameExtentContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_frameExtent);
		try {
			setState(1071);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SPOKEN_DOT:
			case OPEN_PARENTHESIS:
			case LEFT_PARENTHESIS:
			case OPEN_PAREN:
			case LEFT_PAREN:
			case THE:
			case CASE:
			case CAST:
			case CONVERT:
			case CURRENT:
			case CURRENT_USER:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case EXISTS:
			case FALSE:
			case GROUP:
			case IF:
			case INSERT:
			case INTERVAL:
			case LEFT:
			case NOT:
			case NULL_LITERAL:
			case NUMBER:
			case ORDER:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case TRUE:
			case VALUES:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case CHAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case EXTRACT:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case PLUS:
			case MINUS:
			case MOD:
			case EXCLAMATION_SYMBOL:
			case BIT_NOT_OP:
			case DOT:
			case LR_BRACKET:
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case START_NATIONAL_STRING_LITERAL:
			case STRING_LITERAL:
			case DECIMAL_LITERAL:
			case HEXADECIMAL_LITERAL:
			case REAL_LITERAL:
			case NULL_SPEC_LITERAL:
			case BIT_STRING:
			case STRING_CHARSET_NAME:
			case ID:
			case REVERSE_QUOTE_ID:
			case LOCAL_ID:
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1069);
				frameRange();
				}
				break;
			case BETWEEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(1070);
				frameBetween();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameRangeContext extends ParserRuleContext {
		public TerminalNode CURRENT() { return getToken(SimpleSpeakQlParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(SimpleSpeakQlParser.ROW, 0); }
		public TerminalNode UNBOUNDED() { return getToken(SimpleSpeakQlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(SimpleSpeakQlParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(SimpleSpeakQlParser.FOLLOWING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FrameRangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameRange; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterFrameRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitFrameRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitFrameRange(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameRangeContext frameRange() throws RecognitionException {
		FrameRangeContext _localctx = new FrameRangeContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_frameRange);
		int _la;
		try {
			setState(1080);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1073);
				match(CURRENT);
				setState(1074);
				match(ROW);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1075);
				match(UNBOUNDED);
				setState(1076);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1077);
				expression(0);
				setState(1078);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameBetweenContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(SimpleSpeakQlParser.BETWEEN, 0); }
		public List<FrameRangeContext> frameRange() {
			return getRuleContexts(FrameRangeContext.class);
		}
		public FrameRangeContext frameRange(int i) {
			return getRuleContext(FrameRangeContext.class,i);
		}
		public TerminalNode AND() { return getToken(SimpleSpeakQlParser.AND, 0); }
		public FrameBetweenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameBetween; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterFrameBetween(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitFrameBetween(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitFrameBetween(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameBetweenContext frameBetween() throws RecognitionException {
		FrameBetweenContext _localctx = new FrameBetweenContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_frameBetween);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1082);
			match(BETWEEN);
			setState(1083);
			frameRange();
			setState(1084);
			match(AND);
			setState(1085);
			frameRange();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseContext extends ParserRuleContext {
		public LimitClauseAtomContext offset;
		public LimitClauseAtomContext limit;
		public TerminalNode LIMIT() { return getToken(SimpleSpeakQlParser.LIMIT, 0); }
		public TerminalNode OFFSET() { return getToken(SimpleSpeakQlParser.OFFSET, 0); }
		public List<LimitClauseAtomContext> limitClauseAtom() {
			return getRuleContexts(LimitClauseAtomContext.class);
		}
		public LimitClauseAtomContext limitClauseAtom(int i) {
			return getRuleContext(LimitClauseAtomContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(SimpleSpeakQlParser.COMMA, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterLimitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitLimitClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitLimitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_limitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1087);
			match(LIMIT);
			setState(1098);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
			case 1:
				{
				setState(1091);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,129,_ctx) ) {
				case 1:
					{
					setState(1088);
					((LimitClauseContext)_localctx).offset = limitClauseAtom();
					setState(1089);
					match(COMMA);
					}
					break;
				}
				setState(1093);
				((LimitClauseContext)_localctx).limit = limitClauseAtom();
				}
				break;
			case 2:
				{
				setState(1094);
				((LimitClauseContext)_localctx).limit = limitClauseAtom();
				setState(1095);
				match(OFFSET);
				setState(1096);
				((LimitClauseContext)_localctx).offset = limitClauseAtom();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseAtomContext extends ParserRuleContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public LimitClauseAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClauseAtom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterLimitClauseAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitLimitClauseAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitLimitClauseAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseAtomContext limitClauseAtom() throws RecognitionException {
		LimitClauseAtomContext _localctx = new LimitClauseAtomContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_limitClauseAtom);
		try {
			setState(1103);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1100);
				decimalLiteral();
				}
				break;
			case LOCAL_ID:
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(1101);
				mysqlVariable();
				}
				break;
			case SPOKEN_DOT:
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case LEFT:
			case NUMBER:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(1102);
				simpleId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectIntoExpressionContext extends ParserRuleContext {
		public SelectIntoExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectIntoExpression; }
	 
		public SelectIntoExpressionContext() { }
		public void copyFrom(SelectIntoExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectIntoVariablesContext extends SelectIntoExpressionContext {
		public TerminalNode INTO() { return getToken(SimpleSpeakQlParser.INTO, 0); }
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SimpleSpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SimpleSpeakQlParser.COMMA, i);
		}
		public SelectIntoVariablesContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSelectIntoVariables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSelectIntoVariables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSelectIntoVariables(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectIntoTextFileContext extends SelectIntoExpressionContext {
		public Token filename;
		public CharsetNameContext charset;
		public Token fieldsFormat;
		public TerminalNode INTO() { return getToken(SimpleSpeakQlParser.INTO, 0); }
		public TerminalNode OUTFILE() { return getToken(SimpleSpeakQlParser.OUTFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SimpleSpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode CHARACTER() { return getToken(SimpleSpeakQlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(SimpleSpeakQlParser.SET, 0); }
		public TerminalNode LINES() { return getToken(SimpleSpeakQlParser.LINES, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode FIELDS() { return getToken(SimpleSpeakQlParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(SimpleSpeakQlParser.COLUMNS, 0); }
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public SelectIntoTextFileContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSelectIntoTextFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSelectIntoTextFile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSelectIntoTextFile(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectIntoDumpFileContext extends SelectIntoExpressionContext {
		public TerminalNode INTO() { return getToken(SimpleSpeakQlParser.INTO, 0); }
		public TerminalNode DUMPFILE() { return getToken(SimpleSpeakQlParser.DUMPFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SimpleSpeakQlParser.STRING_LITERAL, 0); }
		public SelectIntoDumpFileContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSelectIntoDumpFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSelectIntoDumpFile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSelectIntoDumpFile(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectIntoExpressionContext selectIntoExpression() throws RecognitionException {
		SelectIntoExpressionContext _localctx = new SelectIntoExpressionContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_selectIntoExpression);
		int _la;
		try {
			setState(1141);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,138,_ctx) ) {
			case 1:
				_localctx = new SelectIntoVariablesContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1105);
				match(INTO);
				setState(1106);
				assignmentField();
				setState(1111);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1107);
					match(COMMA);
					setState(1108);
					assignmentField();
					}
					}
					setState(1113);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SelectIntoDumpFileContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1114);
				match(INTO);
				setState(1115);
				match(DUMPFILE);
				setState(1116);
				match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new SelectIntoTextFileContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(1117);
				match(INTO);
				setState(1118);
				match(OUTFILE);
				setState(1119);
				((SelectIntoTextFileContext)_localctx).filename = match(STRING_LITERAL);
				setState(1123);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER) {
					{
					setState(1120);
					match(CHARACTER);
					setState(1121);
					match(SET);
					setState(1122);
					((SelectIntoTextFileContext)_localctx).charset = charsetName();
					}
				}

				setState(1131);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMNS || _la==FIELDS) {
					{
					setState(1125);
					((SelectIntoTextFileContext)_localctx).fieldsFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==COLUMNS || _la==FIELDS) ) {
						((SelectIntoTextFileContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1127); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1126);
						selectFieldsInto();
						}
						}
						setState(1129); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & ((1L << (ENCLOSED - 94)) | (1L << (ESCAPED - 94)) | (1L << (OPTIONALLY - 94)))) != 0) || _la==TERMINATED );
					}
				}

				setState(1139);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINES) {
					{
					setState(1133);
					match(LINES);
					setState(1135); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1134);
						selectLinesInto();
						}
						}
						setState(1137); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==STARTING || _la==TERMINATED );
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignmentFieldContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(SimpleSpeakQlParser.LOCAL_ID, 0); }
		public AssignmentFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignmentField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterAssignmentField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitAssignmentField(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitAssignmentField(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentFieldContext assignmentField() throws RecognitionException {
		AssignmentFieldContext _localctx = new AssignmentFieldContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_assignmentField);
		try {
			setState(1145);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SPOKEN_DOT:
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case LEFT:
			case NUMBER:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1143);
				uid();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(1144);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectFieldsIntoContext extends ParserRuleContext {
		public Token terminationField;
		public Token enclosion;
		public Token escaping;
		public TerminalNode TERMINATED() { return getToken(SimpleSpeakQlParser.TERMINATED, 0); }
		public TerminalNode BY() { return getToken(SimpleSpeakQlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SimpleSpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode ENCLOSED() { return getToken(SimpleSpeakQlParser.ENCLOSED, 0); }
		public TerminalNode OPTIONALLY() { return getToken(SimpleSpeakQlParser.OPTIONALLY, 0); }
		public TerminalNode ESCAPED() { return getToken(SimpleSpeakQlParser.ESCAPED, 0); }
		public SelectFieldsIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectFieldsInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSelectFieldsInto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSelectFieldsInto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSelectFieldsInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectFieldsIntoContext selectFieldsInto() throws RecognitionException {
		SelectFieldsIntoContext _localctx = new SelectFieldsIntoContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_selectFieldsInto);
		int _la;
		try {
			setState(1159);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TERMINATED:
				enterOuterAlt(_localctx, 1);
				{
				setState(1147);
				match(TERMINATED);
				setState(1148);
				match(BY);
				setState(1149);
				((SelectFieldsIntoContext)_localctx).terminationField = match(STRING_LITERAL);
				}
				break;
			case ENCLOSED:
			case OPTIONALLY:
				enterOuterAlt(_localctx, 2);
				{
				setState(1151);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONALLY) {
					{
					setState(1150);
					match(OPTIONALLY);
					}
				}

				setState(1153);
				match(ENCLOSED);
				setState(1154);
				match(BY);
				setState(1155);
				((SelectFieldsIntoContext)_localctx).enclosion = match(STRING_LITERAL);
				}
				break;
			case ESCAPED:
				enterOuterAlt(_localctx, 3);
				{
				setState(1156);
				match(ESCAPED);
				setState(1157);
				match(BY);
				setState(1158);
				((SelectFieldsIntoContext)_localctx).escaping = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectLinesIntoContext extends ParserRuleContext {
		public Token starting;
		public Token terminationLine;
		public TerminalNode STARTING() { return getToken(SimpleSpeakQlParser.STARTING, 0); }
		public TerminalNode BY() { return getToken(SimpleSpeakQlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SimpleSpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode TERMINATED() { return getToken(SimpleSpeakQlParser.TERMINATED, 0); }
		public SelectLinesIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectLinesInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSelectLinesInto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSelectLinesInto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSelectLinesInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectLinesIntoContext selectLinesInto() throws RecognitionException {
		SelectLinesIntoContext _localctx = new SelectLinesIntoContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_selectLinesInto);
		try {
			setState(1167);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STARTING:
				enterOuterAlt(_localctx, 1);
				{
				setState(1161);
				match(STARTING);
				setState(1162);
				match(BY);
				setState(1163);
				((SelectLinesIntoContext)_localctx).starting = match(STRING_LITERAL);
				}
				break;
			case TERMINATED:
				enterOuterAlt(_localctx, 2);
				{
				setState(1164);
				match(TERMINATED);
				setState(1165);
				match(BY);
				setState(1166);
				((SelectLinesIntoContext)_localctx).terminationLine = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(SimpleSpeakQlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(SimpleSpeakQlParser.UPDATE, 0); }
		public TerminalNode LOCK() { return getToken(SimpleSpeakQlParser.LOCK, 0); }
		public TerminalNode IN() { return getToken(SimpleSpeakQlParser.IN, 0); }
		public TerminalNode SHARE() { return getToken(SimpleSpeakQlParser.SHARE, 0); }
		public TerminalNode MODE() { return getToken(SimpleSpeakQlParser.MODE, 0); }
		public LockClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterLockClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitLockClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitLockClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockClauseContext lockClause() throws RecognitionException {
		LockClauseContext _localctx = new LockClauseContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_lockClause);
		try {
			setState(1175);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(1169);
				match(FOR);
				setState(1170);
				match(UPDATE);
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(1171);
				match(LOCK);
				setState(1172);
				match(IN);
				setState(1173);
				match(SHARE);
				setState(1174);
				match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionContext extends ParserRuleContext {
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitQueryExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitQueryExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionContext queryExpression() throws RecognitionException {
		QueryExpressionContext _localctx = new QueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_queryExpression);
		try {
			setState(1185);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,144,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1177);
				leftParen();
				setState(1178);
				querySpecification();
				setState(1179);
				rightParen();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1181);
				leftParen();
				setState(1182);
				queryExpression();
				setState(1183);
				rightParen();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationNointoContext extends ParserRuleContext {
		public SelectKeywordContext selectKeyword() {
			return getRuleContext(SelectKeywordContext.class,0);
		}
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QuerySpecificationNointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecificationNointo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterQuerySpecificationNointo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitQuerySpecificationNointo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitQuerySpecificationNointo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationNointoContext querySpecificationNointo() throws RecognitionException {
		QuerySpecificationNointoContext _localctx = new QuerySpecificationNointoContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_querySpecificationNointo);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1187);
			selectKeyword();
			setState(1191);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,145,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1188);
					selectSpec();
					}
					} 
				}
				setState(1193);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,145,_ctx);
			}
			setState(1194);
			selectElements();
			setState(1196);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IN_TABLE) | (1L << IN_TABLES) | (1L << FROM_TABLE) | (1L << FROM_TABLES))) != 0) || _la==FROM || _la==IN) {
				{
				setState(1195);
				fromClause();
				}
			}

			setState(1199);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(1198);
				groupByClause();
				}
			}

			setState(1202);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(1201);
				havingClause();
				}
			}

			setState(1205);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WINDOW) {
				{
				setState(1204);
				windowClause();
				}
			}

			setState(1208);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,150,_ctx) ) {
			case 1:
				{
				setState(1207);
				orderByClause();
				}
				break;
			}
			setState(1211);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,151,_ctx) ) {
			case 1:
				{
				setState(1210);
				limitClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseNoJoinContext extends ParserRuleContext {
		public FromKeywordContext fromKeyword() {
			return getRuleContext(FromKeywordContext.class,0);
		}
		public TableSourceNoJoinContext tableSourceNoJoin() {
			return getRuleContext(TableSourceNoJoinContext.class,0);
		}
		public FromClauseNoJoinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClauseNoJoin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterFromClauseNoJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitFromClauseNoJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitFromClauseNoJoin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseNoJoinContext fromClauseNoJoin() throws RecognitionException {
		FromClauseNoJoinContext _localctx = new FromClauseNoJoinContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_fromClauseNoJoin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1213);
			fromKeyword();
			setState(1214);
			tableSourceNoJoin();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public FromKeywordContext fromKeyword() {
			return getRuleContext(FromKeywordContext.class,0);
		}
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitFromClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_fromClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1216);
			fromKeyword();
			setState(1217);
			tableSources();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromKeywordContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(SimpleSpeakQlParser.FROM, 0); }
		public TerminalNode FROM_TABLE() { return getToken(SimpleSpeakQlParser.FROM_TABLE, 0); }
		public TerminalNode FROM_TABLES() { return getToken(SimpleSpeakQlParser.FROM_TABLES, 0); }
		public TerminalNode IN() { return getToken(SimpleSpeakQlParser.IN, 0); }
		public TerminalNode IN_TABLE() { return getToken(SimpleSpeakQlParser.IN_TABLE, 0); }
		public TerminalNode IN_TABLES() { return getToken(SimpleSpeakQlParser.IN_TABLES, 0); }
		public FromKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterFromKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitFromKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitFromKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromKeywordContext fromKeyword() throws RecognitionException {
		FromKeywordContext _localctx = new FromKeywordContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_fromKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1219);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IN_TABLE) | (1L << IN_TABLES) | (1L << FROM_TABLE) | (1L << FROM_TABLES))) != 0) || _la==FROM || _la==IN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableKeywordContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(SimpleSpeakQlParser.TABLE, 0); }
		public TableKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterTableKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitTableKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitTableKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableKeywordContext tableKeyword() throws RecognitionException {
		TableKeywordContext _localctx = new TableKeywordContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_tableKeyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1221);
			match(TABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourcesContext extends ParserRuleContext {
		public List<TableSourceContext> tableSource() {
			return getRuleContexts(TableSourceContext.class);
		}
		public TableSourceContext tableSource(int i) {
			return getRuleContext(TableSourceContext.class,i);
		}
		public List<TheKeywordContext> theKeyword() {
			return getRuleContexts(TheKeywordContext.class);
		}
		public TheKeywordContext theKeyword(int i) {
			return getRuleContext(TheKeywordContext.class,i);
		}
		public List<TableKeywordContext> tableKeyword() {
			return getRuleContexts(TableKeywordContext.class);
		}
		public TableKeywordContext tableKeyword(int i) {
			return getRuleContext(TableKeywordContext.class,i);
		}
		public List<TableSourceDelimiterContext> tableSourceDelimiter() {
			return getRuleContexts(TableSourceDelimiterContext.class);
		}
		public TableSourceDelimiterContext tableSourceDelimiter(int i) {
			return getRuleContext(TableSourceDelimiterContext.class,i);
		}
		public TableSourcesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSources; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterTableSources(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitTableSources(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitTableSources(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourcesContext tableSources() throws RecognitionException {
		TableSourcesContext _localctx = new TableSourcesContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_tableSources);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1224);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,152,_ctx) ) {
			case 1:
				{
				setState(1223);
				theKeyword();
				}
				break;
			}
			setState(1226);
			tableSource();
			setState(1228);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(1227);
				tableKeyword();
				}
			}

			setState(1240);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AND || _la==COMMA) {
				{
				{
				setState(1230);
				tableSourceDelimiter();
				setState(1232);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
				case 1:
					{
					setState(1231);
					theKeyword();
					}
					break;
				}
				setState(1234);
				tableSource();
				setState(1236);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(1235);
					tableKeyword();
					}
				}

				}
				}
				setState(1242);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceNoJoinContext extends ParserRuleContext {
		public TableSourceNoJoinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSourceNoJoin; }
	 
		public TableSourceNoJoinContext() { }
		public void copyFrom(TableSourceNoJoinContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableSourceNoJoinBaseContext extends TableSourceNoJoinContext {
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TableSourceNoJoinBaseContext(TableSourceNoJoinContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterTableSourceNoJoinBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitTableSourceNoJoinBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitTableSourceNoJoinBase(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableSourceNoJoinNestedContext extends TableSourceNoJoinContext {
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public TableSourceNoJoinNestedContext(TableSourceNoJoinContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterTableSourceNoJoinNested(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitTableSourceNoJoinNested(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitTableSourceNoJoinNested(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceNoJoinContext tableSourceNoJoin() throws RecognitionException {
		TableSourceNoJoinContext _localctx = new TableSourceNoJoinContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_tableSourceNoJoin);
		try {
			setState(1248);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
			case 1:
				_localctx = new TableSourceNoJoinBaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1243);
				tableSourceItem();
				}
				break;
			case 2:
				_localctx = new TableSourceNoJoinNestedContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1244);
				leftParen();
				setState(1245);
				tableSourceItem();
				setState(1246);
				rightParen();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceContext extends ParserRuleContext {
		public TableSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSource; }
	 
		public TableSourceContext() { }
		public void copyFrom(TableSourceContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableSourceNestedContext extends TableSourceContext {
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public TableSourceNestedContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterTableSourceNested(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitTableSourceNested(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitTableSourceNested(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableSourceBaseContext extends TableSourceContext {
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public TableSourceBaseContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterTableSourceBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitTableSourceBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitTableSourceBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceContext tableSource() throws RecognitionException {
		TableSourceContext _localctx = new TableSourceContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_tableSource);
		int _la;
		try {
			setState(1267);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,160,_ctx) ) {
			case 1:
				_localctx = new TableSourceBaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1250);
				tableSourceItem();
				setState(1254);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 19)) & ~0x3f) == 0 && ((1L << (_la - 19)) & ((1L << (JOIN_TABLE - 19)) | (1L << (BY_JOINING - 19)) | (1L << (BY_JOINING_TABLE - 19)) | (1L << (JOIN_WITH - 19)) | (1L << (JOIN_WITH_TABLE - 19)) | (1L << (JOINED_WITH - 19)) | (1L << (JOINED_WITH_TABLE - 19)) | (1L << (BY_JOINING_WITH_TABLE - 19)) | (1L << (CROSS - 19)))) != 0) || ((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & ((1L << (INNER - 119)) | (1L << (JOIN - 119)) | (1L << (LEFT - 119)) | (1L << (NATURAL - 119)) | (1L << (RIGHT - 119)))) != 0)) {
					{
					{
					setState(1251);
					joinPart();
					}
					}
					setState(1256);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new TableSourceNestedContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1257);
				leftParen();
				setState(1258);
				tableSourceItem();
				setState(1262);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 19)) & ~0x3f) == 0 && ((1L << (_la - 19)) & ((1L << (JOIN_TABLE - 19)) | (1L << (BY_JOINING - 19)) | (1L << (BY_JOINING_TABLE - 19)) | (1L << (JOIN_WITH - 19)) | (1L << (JOIN_WITH_TABLE - 19)) | (1L << (JOINED_WITH - 19)) | (1L << (JOINED_WITH_TABLE - 19)) | (1L << (BY_JOINING_WITH_TABLE - 19)) | (1L << (CROSS - 19)))) != 0) || ((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & ((1L << (INNER - 119)) | (1L << (JOIN - 119)) | (1L << (LEFT - 119)) | (1L << (NATURAL - 119)) | (1L << (RIGHT - 119)))) != 0)) {
					{
					{
					setState(1259);
					joinPart();
					}
					}
					setState(1264);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1265);
				rightParen();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceItemContext extends ParserRuleContext {
		public TableSourceItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSourceItem; }
	 
		public TableSourceItemContext() { }
		public void copyFrom(TableSourceItemContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubqueryTableItemContext extends TableSourceItemContext {
		public SubQueryTableContext subQueryTable() {
			return getRuleContext(SubQueryTableContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public SubqueryTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSubqueryTableItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSubqueryTableItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSubqueryTableItem(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AtomTableItemContext extends TableSourceItemContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(SimpleSpeakQlParser.PARTITION, 0); }
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public List<IndexHintContext> indexHint() {
			return getRuleContexts(IndexHintContext.class);
		}
		public IndexHintContext indexHint(int i) {
			return getRuleContext(IndexHintContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SimpleSpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SimpleSpeakQlParser.COMMA, i);
		}
		public AtomTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterAtomTableItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitAtomTableItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitAtomTableItem(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableSourcesItemContext extends TableSourceItemContext {
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public TableSourcesItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterTableSourcesItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitTableSourcesItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitTableSourcesItem(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OnlyTableNameItemContext extends TableSourceItemContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TheKeywordContext theKeyword() {
			return getRuleContext(TheKeywordContext.class,0);
		}
		public TableKeywordContext tableKeyword() {
			return getRuleContext(TableKeywordContext.class,0);
		}
		public OnlyTableNameItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterOnlyTableNameItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitOnlyTableNameItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitOnlyTableNameItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceItemContext tableSourceItem() throws RecognitionException {
		TableSourceItemContext _localctx = new TableSourceItemContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_tableSourceItem);
		int _la;
		try {
			int _alt;
			setState(1304);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
			case 1:
				_localctx = new SubqueryTableItemContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1269);
				subQueryTable();
				setState(1270);
				tableAlias();
				}
				break;
			case 2:
				_localctx = new OnlyTableNameItemContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1273);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==THE) {
					{
					setState(1272);
					theKeyword();
					}
				}

				setState(1275);
				tableName();
				setState(1277);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,162,_ctx) ) {
				case 1:
					{
					setState(1276);
					tableKeyword();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new AtomTableItemContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1279);
				tableName();
				setState(1285);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1280);
					match(PARTITION);
					setState(1281);
					leftParen();
					setState(1282);
					uidList();
					setState(1283);
					rightParen();
					}
				}

				setState(1288);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,164,_ctx) ) {
				case 1:
					{
					setState(1287);
					tableAlias();
					}
					break;
				}
				setState(1298);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORCE || _la==IGNORE || _la==USE) {
					{
					setState(1290);
					indexHint();
					setState(1295);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,165,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1291);
							match(COMMA);
							setState(1292);
							indexHint();
							}
							} 
						}
						setState(1297);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,165,_ctx);
					}
					}
				}

				}
				break;
			case 4:
				_localctx = new TableSourcesItemContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1300);
				leftParen();
				setState(1301);
				tableSources();
				setState(1302);
				rightParen();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubQueryTableContext extends ParserRuleContext {
		public SelectStatementContext parenthesisSubquery;
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public SubQueryTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subQueryTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSubQueryTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSubQueryTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSubQueryTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubQueryTableContext subQueryTable() throws RecognitionException {
		SubQueryTableContext _localctx = new SubQueryTableContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_subQueryTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1306);
			leftParen();
			setState(1307);
			((SubQueryTableContext)_localctx).parenthesisSubquery = selectStatement();
			setState(1308);
			rightParen();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableAliasContext extends ParserRuleContext {
		public UidContext alias;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TableAliasAsContext tableAliasAs() {
			return getRuleContext(TableAliasAsContext.class,0);
		}
		public TableAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterTableAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitTableAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitTableAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableAliasContext tableAlias() throws RecognitionException {
		TableAliasContext _localctx = new TableAliasContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_tableAlias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1311);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(1310);
				tableAliasAs();
				}
			}

			setState(1313);
			((TableAliasContext)_localctx).alias = uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableAliasAsContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SimpleSpeakQlParser.AS, 0); }
		public TableAliasAsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAliasAs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterTableAliasAs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitTableAliasAs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitTableAliasAs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableAliasAsContext tableAliasAs() throws RecognitionException {
		TableAliasAsContext _localctx = new TableAliasAsContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_tableAliasAs);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1315);
			match(AS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_tableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1317);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UidListContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SimpleSpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SimpleSpeakQlParser.COMMA, i);
		}
		public UidListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uidList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterUidList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitUidList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitUidList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UidListContext uidList() throws RecognitionException {
		UidListContext _localctx = new UidListContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_uidList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1319);
			uid();
			setState(1324);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1320);
				match(COMMA);
				setState(1321);
				uid();
				}
				}
				setState(1326);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintContext extends ParserRuleContext {
		public Token indexHintAction;
		public Token keyFormat;
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public TerminalNode USE() { return getToken(SimpleSpeakQlParser.USE, 0); }
		public TerminalNode IGNORE() { return getToken(SimpleSpeakQlParser.IGNORE, 0); }
		public TerminalNode FORCE() { return getToken(SimpleSpeakQlParser.FORCE, 0); }
		public TerminalNode INDEX() { return getToken(SimpleSpeakQlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(SimpleSpeakQlParser.KEY, 0); }
		public TerminalNode FOR() { return getToken(SimpleSpeakQlParser.FOR, 0); }
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public IndexHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterIndexHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitIndexHint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitIndexHint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintContext indexHint() throws RecognitionException {
		IndexHintContext _localctx = new IndexHintContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_indexHint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1327);
			((IndexHintContext)_localctx).indexHintAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FORCE || _la==IGNORE || _la==USE) ) {
				((IndexHintContext)_localctx).indexHintAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1328);
			((IndexHintContext)_localctx).keyFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==INDEX || _la==KEY) ) {
				((IndexHintContext)_localctx).keyFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1331);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1329);
				match(FOR);
				setState(1330);
				indexHintType();
				}
			}

			setState(1333);
			leftParen();
			setState(1334);
			uidList();
			setState(1335);
			rightParen();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintTypeContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(SimpleSpeakQlParser.JOIN, 0); }
		public TerminalNode ORDER() { return getToken(SimpleSpeakQlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(SimpleSpeakQlParser.BY, 0); }
		public TerminalNode GROUP() { return getToken(SimpleSpeakQlParser.GROUP, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterIndexHintType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitIndexHintType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitIndexHintType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintTypeContext indexHintType() throws RecognitionException {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_indexHintType);
		try {
			setState(1342);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(1337);
				match(JOIN);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 2);
				{
				setState(1338);
				match(ORDER);
				setState(1339);
				match(BY);
				}
				break;
			case GROUP:
				enterOuterAlt(_localctx, 3);
				{
				setState(1340);
				match(GROUP);
				setState(1341);
				match(BY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinKeywordContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(SimpleSpeakQlParser.JOIN, 0); }
		public TerminalNode JOIN_TABLE() { return getToken(SimpleSpeakQlParser.JOIN_TABLE, 0); }
		public TerminalNode BY_JOINING() { return getToken(SimpleSpeakQlParser.BY_JOINING, 0); }
		public TerminalNode BY_JOINING_TABLE() { return getToken(SimpleSpeakQlParser.BY_JOINING_TABLE, 0); }
		public TerminalNode JOINED_WITH() { return getToken(SimpleSpeakQlParser.JOINED_WITH, 0); }
		public TerminalNode JOIN_WITH() { return getToken(SimpleSpeakQlParser.JOIN_WITH, 0); }
		public TerminalNode JOINED_WITH_TABLE() { return getToken(SimpleSpeakQlParser.JOINED_WITH_TABLE, 0); }
		public TerminalNode JOIN_WITH_TABLE() { return getToken(SimpleSpeakQlParser.JOIN_WITH_TABLE, 0); }
		public TerminalNode BY_JOINING_WITH_TABLE() { return getToken(SimpleSpeakQlParser.BY_JOINING_WITH_TABLE, 0); }
		public JoinKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterJoinKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitJoinKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitJoinKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinKeywordContext joinKeyword() throws RecognitionException {
		JoinKeywordContext _localctx = new JoinKeywordContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_joinKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1344);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << JOIN_TABLE) | (1L << BY_JOINING) | (1L << BY_JOINING_TABLE) | (1L << JOIN_WITH) | (1L << JOIN_WITH_TABLE) | (1L << JOINED_WITH) | (1L << JOINED_WITH_TABLE) | (1L << BY_JOINING_WITH_TABLE))) != 0) || _la==JOIN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultiJoinExpressionContext extends ParserRuleContext {
		public List<MultiJoinPartContext> multiJoinPart() {
			return getRuleContexts(MultiJoinPartContext.class);
		}
		public MultiJoinPartContext multiJoinPart(int i) {
			return getRuleContext(MultiJoinPartContext.class,i);
		}
		public List<ExpressionDelimiterContext> expressionDelimiter() {
			return getRuleContexts(ExpressionDelimiterContext.class);
		}
		public ExpressionDelimiterContext expressionDelimiter(int i) {
			return getRuleContext(ExpressionDelimiterContext.class,i);
		}
		public MultiJoinExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiJoinExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterMultiJoinExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitMultiJoinExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitMultiJoinExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultiJoinExpressionContext multiJoinExpression() throws RecognitionException {
		MultiJoinExpressionContext _localctx = new MultiJoinExpressionContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_multiJoinExpression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1346);
			multiJoinPart();
			setState(1352);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,172,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1347);
					expressionDelimiter();
					setState(1348);
					multiJoinPart();
					}
					} 
				}
				setState(1354);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,172,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultiJoinPartContext extends ParserRuleContext {
		public MultiInnerJoinContext multiInnerJoin() {
			return getRuleContext(MultiInnerJoinContext.class,0);
		}
		public MultiOuterJoinContext multiOuterJoin() {
			return getRuleContext(MultiOuterJoinContext.class,0);
		}
		public MultiNaturalJoinContext multiNaturalJoin() {
			return getRuleContext(MultiNaturalJoinContext.class,0);
		}
		public MultiJoinPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiJoinPart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterMultiJoinPart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitMultiJoinPart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitMultiJoinPart(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultiJoinPartContext multiJoinPart() throws RecognitionException {
		MultiJoinPartContext _localctx = new MultiJoinPartContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_multiJoinPart);
		try {
			setState(1358);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JOIN_TABLE:
			case BY_JOINING:
			case BY_JOINING_TABLE:
			case JOIN_WITH:
			case JOIN_WITH_TABLE:
			case JOINED_WITH:
			case JOINED_WITH_TABLE:
			case BY_JOINING_WITH_TABLE:
			case CROSS:
			case INNER:
			case JOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(1355);
				multiInnerJoin();
				}
				break;
			case LEFT:
			case RIGHT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1356);
				multiOuterJoin();
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(1357);
				multiNaturalJoin();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultiInnerJoinContext extends ParserRuleContext {
		public JoinKeywordContext joinKeyword() {
			return getRuleContext(JoinKeywordContext.class,0);
		}
		public List<TableSourceItemContext> tableSourceItem() {
			return getRuleContexts(TableSourceItemContext.class);
		}
		public TableSourceItemContext tableSourceItem(int i) {
			return getRuleContext(TableSourceItemContext.class,i);
		}
		public WithKeywordContext withKeyword() {
			return getRuleContext(WithKeywordContext.class,0);
		}
		public InnerJoinKeywordContext innerJoinKeyword() {
			return getRuleContext(InnerJoinKeywordContext.class,0);
		}
		public OnKeywordContext onKeyword() {
			return getRuleContext(OnKeywordContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(SimpleSpeakQlParser.USING, 0); }
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public MultiInnerJoinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiInnerJoin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterMultiInnerJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitMultiInnerJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitMultiInnerJoin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultiInnerJoinContext multiInnerJoin() throws RecognitionException {
		MultiInnerJoinContext _localctx = new MultiInnerJoinContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_multiInnerJoin);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1361);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CROSS || _la==INNER) {
				{
				setState(1360);
				innerJoinKeyword();
				}
			}

			setState(1363);
			joinKeyword();
			setState(1364);
			tableSourceItem();
			setState(1365);
			withKeyword();
			setState(1366);
			tableSourceItem();
			setState(1375);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				{
				setState(1367);
				onKeyword();
				setState(1368);
				expression(0);
				}
				break;
			case USING:
				{
				setState(1370);
				match(USING);
				setState(1371);
				leftParen();
				setState(1372);
				uidList();
				setState(1373);
				rightParen();
				}
				break;
			case EOF:
			case END_OF_FILE:
			case AND_THEN:
			case CLOSE_PARENTHESIS:
			case RIGHT_PARENTHESIS:
			case CLOSE_PAREN:
			case RIGHT_PAREN:
			case FOR:
			case LIMIT:
			case LOCK:
			case ORDER:
			case THEN:
			case RR_BRACKET:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultiOuterJoinContext extends ParserRuleContext {
		public JoinKeywordContext joinKeyword() {
			return getRuleContext(JoinKeywordContext.class,0);
		}
		public List<TableSourceItemContext> tableSourceItem() {
			return getRuleContexts(TableSourceItemContext.class);
		}
		public TableSourceItemContext tableSourceItem(int i) {
			return getRuleContext(TableSourceItemContext.class,i);
		}
		public WithKeywordContext withKeyword() {
			return getRuleContext(WithKeywordContext.class,0);
		}
		public JoinDirectionContext joinDirection() {
			return getRuleContext(JoinDirectionContext.class,0);
		}
		public OnKeywordContext onKeyword() {
			return getRuleContext(OnKeywordContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(SimpleSpeakQlParser.USING, 0); }
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public OuterJoinKeywordContext outerJoinKeyword() {
			return getRuleContext(OuterJoinKeywordContext.class,0);
		}
		public MultiOuterJoinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiOuterJoin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterMultiOuterJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitMultiOuterJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitMultiOuterJoin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultiOuterJoinContext multiOuterJoin() throws RecognitionException {
		MultiOuterJoinContext _localctx = new MultiOuterJoinContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_multiOuterJoin);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1377);
			joinDirection();
			}
			setState(1379);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTER) {
				{
				setState(1378);
				outerJoinKeyword();
				}
			}

			setState(1381);
			joinKeyword();
			setState(1382);
			tableSourceItem();
			setState(1383);
			withKeyword();
			setState(1384);
			tableSourceItem();
			setState(1393);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				{
				setState(1385);
				onKeyword();
				setState(1386);
				expression(0);
				}
				break;
			case USING:
				{
				setState(1388);
				match(USING);
				setState(1389);
				leftParen();
				setState(1390);
				uidList();
				setState(1391);
				rightParen();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultiNaturalJoinContext extends ParserRuleContext {
		public NaturalJoinKeywordContext naturalJoinKeyword() {
			return getRuleContext(NaturalJoinKeywordContext.class,0);
		}
		public JoinKeywordContext joinKeyword() {
			return getRuleContext(JoinKeywordContext.class,0);
		}
		public List<TableSourceItemContext> tableSourceItem() {
			return getRuleContexts(TableSourceItemContext.class);
		}
		public TableSourceItemContext tableSourceItem(int i) {
			return getRuleContext(TableSourceItemContext.class,i);
		}
		public WithKeywordContext withKeyword() {
			return getRuleContext(WithKeywordContext.class,0);
		}
		public JoinDirectionContext joinDirection() {
			return getRuleContext(JoinDirectionContext.class,0);
		}
		public OuterJoinKeywordContext outerJoinKeyword() {
			return getRuleContext(OuterJoinKeywordContext.class,0);
		}
		public MultiNaturalJoinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiNaturalJoin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterMultiNaturalJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitMultiNaturalJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitMultiNaturalJoin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultiNaturalJoinContext multiNaturalJoin() throws RecognitionException {
		MultiNaturalJoinContext _localctx = new MultiNaturalJoinContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_multiNaturalJoin);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1395);
			naturalJoinKeyword();
			setState(1400);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT || _la==RIGHT) {
				{
				{
				setState(1396);
				joinDirection();
				}
				setState(1398);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(1397);
					outerJoinKeyword();
					}
				}

				}
			}

			setState(1402);
			joinKeyword();
			setState(1403);
			tableSourceItem();
			setState(1404);
			withKeyword();
			setState(1405);
			tableSourceItem();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithKeywordContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SimpleSpeakQlParser.WITH, 0); }
		public TerminalNode WITH_TABLE() { return getToken(SimpleSpeakQlParser.WITH_TABLE, 0); }
		public WithKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterWithKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitWithKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitWithKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithKeywordContext withKeyword() throws RecognitionException {
		WithKeywordContext _localctx = new WithKeywordContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_withKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1407);
			_la = _input.LA(1);
			if ( !(_la==WITH_TABLE || _la==WITH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinPartContext extends ParserRuleContext {
		public InnerJoinContext innerJoin() {
			return getRuleContext(InnerJoinContext.class,0);
		}
		public OuterJoinContext outerJoin() {
			return getRuleContext(OuterJoinContext.class,0);
		}
		public NaturalJoinContext naturalJoin() {
			return getRuleContext(NaturalJoinContext.class,0);
		}
		public JoinPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinPart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterJoinPart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitJoinPart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitJoinPart(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinPartContext joinPart() throws RecognitionException {
		JoinPartContext _localctx = new JoinPartContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_joinPart);
		try {
			setState(1412);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JOIN_TABLE:
			case BY_JOINING:
			case BY_JOINING_TABLE:
			case JOIN_WITH:
			case JOIN_WITH_TABLE:
			case JOINED_WITH:
			case JOINED_WITH_TABLE:
			case BY_JOINING_WITH_TABLE:
			case CROSS:
			case INNER:
			case JOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(1409);
				innerJoin();
				}
				break;
			case LEFT:
			case RIGHT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1410);
				outerJoin();
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(1411);
				naturalJoin();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InnerJoinContext extends ParserRuleContext {
		public JoinKeywordContext joinKeyword() {
			return getRuleContext(JoinKeywordContext.class,0);
		}
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public InnerJoinKeywordContext innerJoinKeyword() {
			return getRuleContext(InnerJoinKeywordContext.class,0);
		}
		public OnKeywordContext onKeyword() {
			return getRuleContext(OnKeywordContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(SimpleSpeakQlParser.USING, 0); }
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public InnerJoinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_innerJoin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterInnerJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitInnerJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitInnerJoin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InnerJoinContext innerJoin() throws RecognitionException {
		InnerJoinContext _localctx = new InnerJoinContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_innerJoin);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1415);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CROSS || _la==INNER) {
				{
				setState(1414);
				innerJoinKeyword();
				}
			}

			setState(1417);
			joinKeyword();
			setState(1418);
			tableSourceItem();
			setState(1427);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				{
				setState(1419);
				onKeyword();
				setState(1420);
				expression(0);
				}
				break;
			case USING:
				{
				setState(1422);
				match(USING);
				setState(1423);
				leftParen();
				setState(1424);
				uidList();
				setState(1425);
				rightParen();
				}
				break;
			case EOF:
			case END_OF_FILE:
			case RETRIEVE:
			case SHOW_ME:
			case DISPLAY:
			case PRESENT:
			case FIND:
			case WHAT_IS:
			case WHAT_ARE:
			case WHAT_IS_THE:
			case WHAT_ARE_THE:
			case JOIN_TABLE:
			case BY_JOINING:
			case BY_JOINING_TABLE:
			case JOIN_WITH:
			case JOIN_WITH_TABLE:
			case JOINED_WITH:
			case JOINED_WITH_TABLE:
			case BY_JOINING_WITH_TABLE:
			case CLOSE_PARENTHESIS:
			case RIGHT_PARENTHESIS:
			case CLOSE_PAREN:
			case RIGHT_PAREN:
			case AND:
			case CROSS:
			case FOR:
			case GET:
			case GROUP:
			case HAVING:
			case INNER:
			case INTO:
			case JOIN:
			case LEFT:
			case LIMIT:
			case LOCK:
			case NATURAL:
			case ORDER:
			case RIGHT:
			case SELECT:
			case TABLE:
			case UNION:
			case WHERE:
			case WINDOW:
			case RR_BRACKET:
			case COMMA:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InnerJoinKeywordContext extends ParserRuleContext {
		public TerminalNode INNER() { return getToken(SimpleSpeakQlParser.INNER, 0); }
		public TerminalNode CROSS() { return getToken(SimpleSpeakQlParser.CROSS, 0); }
		public InnerJoinKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_innerJoinKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterInnerJoinKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitInnerJoinKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitInnerJoinKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InnerJoinKeywordContext innerJoinKeyword() throws RecognitionException {
		InnerJoinKeywordContext _localctx = new InnerJoinKeywordContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_innerJoinKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1429);
			_la = _input.LA(1);
			if ( !(_la==CROSS || _la==INNER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnKeywordContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SimpleSpeakQlParser.ON, 0); }
		public OnKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterOnKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitOnKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitOnKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnKeywordContext onKeyword() throws RecognitionException {
		OnKeywordContext _localctx = new OnKeywordContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_onKeyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1431);
			match(ON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OuterJoinContext extends ParserRuleContext {
		public JoinKeywordContext joinKeyword() {
			return getRuleContext(JoinKeywordContext.class,0);
		}
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public JoinDirectionContext joinDirection() {
			return getRuleContext(JoinDirectionContext.class,0);
		}
		public OnKeywordContext onKeyword() {
			return getRuleContext(OnKeywordContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(SimpleSpeakQlParser.USING, 0); }
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public OuterJoinKeywordContext outerJoinKeyword() {
			return getRuleContext(OuterJoinKeywordContext.class,0);
		}
		public OuterJoinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outerJoin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterOuterJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitOuterJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitOuterJoin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OuterJoinContext outerJoin() throws RecognitionException {
		OuterJoinContext _localctx = new OuterJoinContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_outerJoin);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1433);
			joinDirection();
			}
			setState(1435);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTER) {
				{
				setState(1434);
				outerJoinKeyword();
				}
			}

			setState(1437);
			joinKeyword();
			setState(1438);
			tableSourceItem();
			setState(1447);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				{
				setState(1439);
				onKeyword();
				setState(1440);
				expression(0);
				}
				break;
			case USING:
				{
				setState(1442);
				match(USING);
				setState(1443);
				leftParen();
				setState(1444);
				uidList();
				setState(1445);
				rightParen();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinDirectionContext extends ParserRuleContext {
		public TerminalNode LEFT() { return getToken(SimpleSpeakQlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(SimpleSpeakQlParser.RIGHT, 0); }
		public JoinDirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinDirection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterJoinDirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitJoinDirection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitJoinDirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinDirectionContext joinDirection() throws RecognitionException {
		JoinDirectionContext _localctx = new JoinDirectionContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_joinDirection);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1449);
			_la = _input.LA(1);
			if ( !(_la==LEFT || _la==RIGHT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OuterJoinKeywordContext extends ParserRuleContext {
		public TerminalNode OUTER() { return getToken(SimpleSpeakQlParser.OUTER, 0); }
		public OuterJoinKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outerJoinKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterOuterJoinKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitOuterJoinKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitOuterJoinKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OuterJoinKeywordContext outerJoinKeyword() throws RecognitionException {
		OuterJoinKeywordContext _localctx = new OuterJoinKeywordContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_outerJoinKeyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1451);
			match(OUTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NaturalJoinContext extends ParserRuleContext {
		public NaturalJoinKeywordContext naturalJoinKeyword() {
			return getRuleContext(NaturalJoinKeywordContext.class,0);
		}
		public JoinKeywordContext joinKeyword() {
			return getRuleContext(JoinKeywordContext.class,0);
		}
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public JoinDirectionContext joinDirection() {
			return getRuleContext(JoinDirectionContext.class,0);
		}
		public OuterJoinKeywordContext outerJoinKeyword() {
			return getRuleContext(OuterJoinKeywordContext.class,0);
		}
		public NaturalJoinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_naturalJoin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterNaturalJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitNaturalJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitNaturalJoin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NaturalJoinContext naturalJoin() throws RecognitionException {
		NaturalJoinContext _localctx = new NaturalJoinContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_naturalJoin);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1453);
			naturalJoinKeyword();
			setState(1458);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT || _la==RIGHT) {
				{
				{
				setState(1454);
				joinDirection();
				}
				setState(1456);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(1455);
					outerJoinKeyword();
					}
				}

				}
			}

			setState(1460);
			joinKeyword();
			setState(1461);
			tableSourceItem();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NaturalJoinKeywordContext extends ParserRuleContext {
		public TerminalNode NATURAL() { return getToken(SimpleSpeakQlParser.NATURAL, 0); }
		public NaturalJoinKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_naturalJoinKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterNaturalJoinKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitNaturalJoinKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitNaturalJoinKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NaturalJoinKeywordContext naturalJoinKeyword() throws RecognitionException {
		NaturalJoinKeywordContext _localctx = new NaturalJoinKeywordContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_naturalJoinKeyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1463);
			match(NATURAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceDelimiterContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(SimpleSpeakQlParser.COMMA, 0); }
		public TerminalNode AND() { return getToken(SimpleSpeakQlParser.AND, 0); }
		public TableSourceDelimiterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSourceDelimiter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterTableSourceDelimiter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitTableSourceDelimiter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitTableSourceDelimiter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceDelimiterContext tableSourceDelimiter() throws RecognitionException {
		TableSourceDelimiterContext _localctx = new TableSourceDelimiterContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_tableSourceDelimiter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1465);
			_la = _input.LA(1);
			if ( !(_la==AND || _la==COMMA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionStatementContext extends ParserRuleContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(SimpleSpeakQlParser.UNION, 0); }
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SimpleSpeakQlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(SimpleSpeakQlParser.DISTINCT, 0); }
		public UnionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterUnionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitUnionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitUnionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionStatementContext unionStatement() throws RecognitionException {
		UnionStatementContext _localctx = new UnionStatementContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_unionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1467);
			match(UNION);
			setState(1469);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(1468);
				((UnionStatementContext)_localctx).unionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((UnionStatementContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1473);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RETRIEVE:
			case SHOW_ME:
			case DISPLAY:
			case PRESENT:
			case FIND:
			case WHAT_IS:
			case WHAT_ARE:
			case WHAT_IS_THE:
			case WHAT_ARE_THE:
			case GET:
			case SELECT:
				{
				setState(1471);
				querySpecificationNointo();
				}
				break;
			case OPEN_PARENTHESIS:
			case LEFT_PARENTHESIS:
			case OPEN_PAREN:
			case LEFT_PAREN:
			case LR_BRACKET:
				{
				setState(1472);
				queryExpressionNointo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionNointoContext extends ParserRuleContext {
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public QueryExpressionNointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionNointo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterQueryExpressionNointo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitQueryExpressionNointo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitQueryExpressionNointo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionNointoContext queryExpressionNointo() throws RecognitionException {
		QueryExpressionNointoContext _localctx = new QueryExpressionNointoContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_queryExpressionNointo);
		try {
			setState(1483);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,189,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1475);
				leftParen();
				setState(1476);
				querySpecificationNointo();
				setState(1477);
				rightParen();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1479);
				leftParen();
				setState(1480);
				queryExpressionNointo();
				setState(1481);
				rightParen();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionParenthesisContext extends ParserRuleContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(SimpleSpeakQlParser.UNION, 0); }
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SimpleSpeakQlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(SimpleSpeakQlParser.DISTINCT, 0); }
		public UnionParenthesisContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionParenthesis; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterUnionParenthesis(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitUnionParenthesis(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitUnionParenthesis(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionParenthesisContext unionParenthesis() throws RecognitionException {
		UnionParenthesisContext _localctx = new UnionParenthesisContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_unionParenthesis);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1485);
			match(UNION);
			setState(1487);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(1486);
				((UnionParenthesisContext)_localctx).unionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((UnionParenthesisContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1489);
			queryExpressionNointo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SimpleSpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SimpleSpeakQlParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterExpressions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitExpressions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitExpressions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsContext expressions() throws RecognitionException {
		ExpressionsContext _localctx = new ExpressionsContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_expressions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1491);
			expression(0);
			setState(1496);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1492);
				match(COMMA);
				setState(1493);
				expression(0);
				}
				}
				setState(1498);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullNotnullContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(SimpleSpeakQlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(SimpleSpeakQlParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(SimpleSpeakQlParser.NOT, 0); }
		public NullNotnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullNotnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterNullNotnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitNullNotnull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitNullNotnull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullNotnullContext nullNotnull() throws RecognitionException {
		NullNotnullContext _localctx = new NullNotnullContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_nullNotnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1500);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1499);
				match(NOT);
				}
			}

			setState(1502);
			_la = _input.LA(1);
			if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQUAL_SYMBOL() { return getToken(SimpleSpeakQlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode GREATER_SYMBOL() { return getToken(SimpleSpeakQlParser.GREATER_SYMBOL, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(SimpleSpeakQlParser.LESS_SYMBOL, 0); }
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(SimpleSpeakQlParser.EXCLAMATION_SYMBOL, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitComparisonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_comparisonOperator);
		try {
			setState(1518);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1504);
				match(EQUAL_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1505);
				match(GREATER_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1506);
				match(LESS_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1507);
				match(LESS_SYMBOL);
				setState(1508);
				match(EQUAL_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1509);
				match(GREATER_SYMBOL);
				setState(1510);
				match(EQUAL_SYMBOL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1511);
				match(LESS_SYMBOL);
				setState(1512);
				match(GREATER_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1513);
				match(EXCLAMATION_SYMBOL);
				setState(1514);
				match(EQUAL_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1515);
				match(LESS_SYMBOL);
				setState(1516);
				match(EQUAL_SYMBOL);
				setState(1517);
				match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionAtomContext extends ParserRuleContext {
		public ExpressionAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionAtom; }
	 
		public ExpressionAtomContext() { }
		public void copyFrom(ExpressionAtomContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnaryExpressionAtomContext extends ExpressionAtomContext {
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public UnaryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterUnaryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitUnaryExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitUnaryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollateExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(SimpleSpeakQlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterCollateExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitCollateExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitCollateExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MysqlVariableExpressionAtomContext extends ExpressionAtomContext {
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public MysqlVariableExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterMysqlVariableExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitMysqlVariableExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitMysqlVariableExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NestedExpressionAtomContext extends ExpressionAtomContext {
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SimpleSpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SimpleSpeakQlParser.COMMA, i);
		}
		public NestedExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterNestedExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitNestedExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitNestedExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NestedRowExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode ROW() { return getToken(SimpleSpeakQlParser.ROW, 0); }
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SimpleSpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SimpleSpeakQlParser.COMMA, i);
		}
		public NestedRowExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterNestedRowExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitNestedRowExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitNestedRowExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MathExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public MathOperatorContext mathOperator() {
			return getRuleContext(MathOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public MathExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterMathExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitMathExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitMathExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExistsExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode EXISTS() { return getToken(SimpleSpeakQlParser.EXISTS, 0); }
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public ExistsExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterExistsExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitExistsExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitExistsExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntervalExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode INTERVAL() { return getToken(SimpleSpeakQlParser.INTERVAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public IntervalExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterIntervalExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitIntervalExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitIntervalExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public JsonOperatorContext jsonOperator() {
			return getRuleContext(JsonOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public JsonExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterJsonExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitJsonExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitJsonExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubqueryExpressionAtomContext extends ExpressionAtomContext {
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public SubqueryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSubqueryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSubqueryExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSubqueryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConstantExpressionAtomContext extends ExpressionAtomContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ConstantExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterConstantExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitConstantExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitConstantExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FunctionCallExpressionAtomContext extends ExpressionAtomContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public FunctionCallExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterFunctionCallExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitFunctionCallExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitFunctionCallExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BinaryExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode BINARY() { return getToken(SimpleSpeakQlParser.BINARY, 0); }
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public BinaryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterBinaryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitBinaryExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitBinaryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FullColumnNameExpressionAtomContext extends ExpressionAtomContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FullColumnNameExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterFullColumnNameExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitFullColumnNameExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitFullColumnNameExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BitExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public BitOperatorContext bitOperator() {
			return getRuleContext(BitOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public BitExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterBitExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitBitExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitBitExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionAtomContext expressionAtom() throws RecognitionException {
		return expressionAtom(0);
	}

	private ExpressionAtomContext expressionAtom(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionAtomContext _localctx = new ExpressionAtomContext(_ctx, _parentState);
		ExpressionAtomContext _prevctx = _localctx;
		int _startState = 208;
		enterRecursionRule(_localctx, 208, RULE_expressionAtom, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1565);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				_localctx = new ConstantExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(1521);
				constant();
				}
				break;
			case 2:
				{
				_localctx = new FullColumnNameExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(1522);
				fullColumnName();
				}
				break;
			case 3:
				{
				_localctx = new FunctionCallExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(1523);
				functionCall();
				}
				break;
			case 4:
				{
				_localctx = new MysqlVariableExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(1524);
				mysqlVariable();
				}
				break;
			case 5:
				{
				_localctx = new UnaryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(1525);
				unaryOperator();
				setState(1526);
				expressionAtom(10);
				}
				break;
			case 6:
				{
				_localctx = new BinaryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(1528);
				match(BINARY);
				setState(1529);
				expressionAtom(9);
				}
				break;
			case 7:
				{
				_localctx = new NestedExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(1530);
				leftParen();
				setState(1531);
				expression(0);
				setState(1536);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1532);
					match(COMMA);
					setState(1533);
					expression(0);
					}
					}
					setState(1538);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1539);
				rightParen();
				}
				break;
			case 8:
				{
				_localctx = new NestedRowExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(1541);
				match(ROW);
				setState(1542);
				leftParen();
				setState(1543);
				expression(0);
				setState(1546); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1544);
					match(COMMA);
					setState(1545);
					expression(0);
					}
					}
					setState(1548); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(1550);
				rightParen();
				}
				break;
			case 9:
				{
				_localctx = new ExistsExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(1552);
				match(EXISTS);
				setState(1553);
				leftParen();
				setState(1554);
				selectStatement();
				setState(1555);
				rightParen();
				}
				break;
			case 10:
				{
				_localctx = new SubqueryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(1557);
				leftParen();
				setState(1558);
				selectStatement();
				setState(1559);
				rightParen();
				}
				break;
			case 11:
				{
				_localctx = new IntervalExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(1561);
				match(INTERVAL);
				setState(1562);
				expression(0);
				setState(1563);
				intervalType();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(1584);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,198,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(1582);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
					case 1:
						{
						_localctx = new BitExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((BitExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(1567);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(1568);
						bitOperator();
						setState(1569);
						((BitExpressionAtomContext)_localctx).right = expressionAtom(4);
						}
						break;
					case 2:
						{
						_localctx = new MathExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((MathExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(1571);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(1572);
						mathOperator();
						setState(1573);
						((MathExpressionAtomContext)_localctx).right = expressionAtom(3);
						}
						break;
					case 3:
						{
						_localctx = new JsonExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((JsonExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(1575);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(1576);
						jsonOperator();
						setState(1577);
						((JsonExpressionAtomContext)_localctx).right = expressionAtom(2);
						}
						break;
					case 4:
						{
						_localctx = new CollateExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(1579);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(1580);
						match(COLLATE);
						setState(1581);
						collationName();
						}
						break;
					}
					} 
				}
				setState(1586);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,198,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public Token nullLiteral;
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MINUS() { return getToken(SimpleSpeakQlParser.MINUS, 0); }
		public HexadecimalLiteralContext hexadecimalLiteral() {
			return getRuleContext(HexadecimalLiteralContext.class,0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return getRuleContext(BooleanLiteralContext.class,0);
		}
		public TerminalNode REAL_LITERAL() { return getToken(SimpleSpeakQlParser.REAL_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(SimpleSpeakQlParser.BIT_STRING, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(SimpleSpeakQlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(SimpleSpeakQlParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(SimpleSpeakQlParser.NOT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_constant);
		int _la;
		try {
			setState(1599);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,200,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1587);
				stringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1588);
				decimalLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1589);
				match(MINUS);
				setState(1590);
				decimalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1591);
				hexadecimalLiteral();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1592);
				booleanLiteral();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1593);
				match(REAL_LITERAL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1594);
				match(BIT_STRING);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1596);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1595);
					match(NOT);
					}
				}

				setState(1598);
				((ConstantContext)_localctx).nullLiteral = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
					((ConstantContext)_localctx).nullLiteral = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringLiteralContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(SimpleSpeakQlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(SimpleSpeakQlParser.STRING_LITERAL, i);
		}
		public TerminalNode START_NATIONAL_STRING_LITERAL() { return getToken(SimpleSpeakQlParser.START_NATIONAL_STRING_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(SimpleSpeakQlParser.STRING_CHARSET_NAME, 0); }
		public TerminalNode COLLATE() { return getToken(SimpleSpeakQlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitStringLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitStringLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringLiteralContext stringLiteral() throws RecognitionException {
		StringLiteralContext _localctx = new StringLiteralContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_stringLiteral);
		int _la;
		try {
			int _alt;
			setState(1624);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,207,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1606);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(1602);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(1601);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(1604);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(1605);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1609); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1608);
						match(STRING_LITERAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1611); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,203,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1618);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(1614);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(1613);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(1616);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(1617);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1622);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,206,_ctx) ) {
				case 1:
					{
					setState(1620);
					match(COLLATE);
					setState(1621);
					collationName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollationNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(SimpleSpeakQlParser.STRING_LITERAL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterCollationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitCollationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitCollationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollationNameContext collationName() throws RecognitionException {
		CollationNameContext _localctx = new CollationNameContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_collationName);
		try {
			setState(1628);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,208,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1626);
				uid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1627);
				match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalLiteralContext extends ParserRuleContext {
		public TerminalNode DECIMAL_LITERAL() { return getToken(SimpleSpeakQlParser.DECIMAL_LITERAL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(SimpleSpeakQlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(SimpleSpeakQlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(SimpleSpeakQlParser.TWO_DECIMAL, 0); }
		public TerminalNode REAL_LITERAL() { return getToken(SimpleSpeakQlParser.REAL_LITERAL, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterDecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitDecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitDecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DecimalLiteralContext decimalLiteral() throws RecognitionException {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_decimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1630);
			_la = _input.LA(1);
			if ( !(((((_la - 1129)) & ~0x3f) == 0 && ((1L << (_la - 1129)) & ((1L << (ZERO_DECIMAL - 1129)) | (1L << (ONE_DECIMAL - 1129)) | (1L << (TWO_DECIMAL - 1129)) | (1L << (DECIMAL_LITERAL - 1129)) | (1L << (REAL_LITERAL - 1129)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HexadecimalLiteralContext extends ParserRuleContext {
		public TerminalNode HEXADECIMAL_LITERAL() { return getToken(SimpleSpeakQlParser.HEXADECIMAL_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(SimpleSpeakQlParser.STRING_CHARSET_NAME, 0); }
		public HexadecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hexadecimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterHexadecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitHexadecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitHexadecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HexadecimalLiteralContext hexadecimalLiteral() throws RecognitionException {
		HexadecimalLiteralContext _localctx = new HexadecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_hexadecimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1633);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING_CHARSET_NAME) {
				{
				setState(1632);
				match(STRING_CHARSET_NAME);
				}
			}

			setState(1635);
			match(HEXADECIMAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanLiteralContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(SimpleSpeakQlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(SimpleSpeakQlParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterBooleanLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitBooleanLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitBooleanLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanLiteralContext booleanLiteral() throws RecognitionException {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_booleanLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1637);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MysqlVariableContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(SimpleSpeakQlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL_ID() { return getToken(SimpleSpeakQlParser.GLOBAL_ID, 0); }
		public MysqlVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mysqlVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterMysqlVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitMysqlVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitMysqlVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MysqlVariableContext mysqlVariable() throws RecognitionException {
		MysqlVariableContext _localctx = new MysqlVariableContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_mysqlVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1639);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==GLOBAL_ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnaryOperatorContext extends ParserRuleContext {
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(SimpleSpeakQlParser.EXCLAMATION_SYMBOL, 0); }
		public TerminalNode BIT_NOT_OP() { return getToken(SimpleSpeakQlParser.BIT_NOT_OP, 0); }
		public TerminalNode PLUS() { return getToken(SimpleSpeakQlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(SimpleSpeakQlParser.MINUS, 0); }
		public TerminalNode NOT() { return getToken(SimpleSpeakQlParser.NOT, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unaryOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterUnaryOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitUnaryOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitUnaryOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnaryOperatorContext unaryOperator() throws RecognitionException {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_unaryOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1641);
			_la = _input.LA(1);
			if ( !(_la==NOT || ((((_la - 1111)) & ~0x3f) == 0 && ((1L << (_la - 1111)) & ((1L << (PLUS - 1111)) | (1L << (MINUS - 1111)) | (1L << (EXCLAMATION_SYMBOL - 1111)) | (1L << (BIT_NOT_OP - 1111)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeContext extends ParserRuleContext {
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public TerminalNode YEAR() { return getToken(SimpleSpeakQlParser.YEAR, 0); }
		public TerminalNode YEAR_MONTH() { return getToken(SimpleSpeakQlParser.YEAR_MONTH, 0); }
		public TerminalNode DAY_HOUR() { return getToken(SimpleSpeakQlParser.DAY_HOUR, 0); }
		public TerminalNode DAY_MINUTE() { return getToken(SimpleSpeakQlParser.DAY_MINUTE, 0); }
		public TerminalNode DAY_SECOND() { return getToken(SimpleSpeakQlParser.DAY_SECOND, 0); }
		public TerminalNode HOUR_MINUTE() { return getToken(SimpleSpeakQlParser.HOUR_MINUTE, 0); }
		public TerminalNode HOUR_SECOND() { return getToken(SimpleSpeakQlParser.HOUR_SECOND, 0); }
		public TerminalNode MINUTE_SECOND() { return getToken(SimpleSpeakQlParser.MINUTE_SECOND, 0); }
		public TerminalNode SECOND_MICROSECOND() { return getToken(SimpleSpeakQlParser.SECOND_MICROSECOND, 0); }
		public TerminalNode MINUTE_MICROSECOND() { return getToken(SimpleSpeakQlParser.MINUTE_MICROSECOND, 0); }
		public TerminalNode HOUR_MICROSECOND() { return getToken(SimpleSpeakQlParser.HOUR_MICROSECOND, 0); }
		public TerminalNode DAY_MICROSECOND() { return getToken(SimpleSpeakQlParser.DAY_MICROSECOND, 0); }
		public IntervalTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterIntervalType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitIntervalType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitIntervalType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalTypeContext intervalType() throws RecognitionException {
		IntervalTypeContext _localctx = new IntervalTypeContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_intervalType);
		try {
			setState(1656);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
				enterOuterAlt(_localctx, 1);
				{
				setState(1643);
				intervalTypeBase();
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(1644);
				match(YEAR);
				}
				break;
			case YEAR_MONTH:
				enterOuterAlt(_localctx, 3);
				{
				setState(1645);
				match(YEAR_MONTH);
				}
				break;
			case DAY_HOUR:
				enterOuterAlt(_localctx, 4);
				{
				setState(1646);
				match(DAY_HOUR);
				}
				break;
			case DAY_MINUTE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1647);
				match(DAY_MINUTE);
				}
				break;
			case DAY_SECOND:
				enterOuterAlt(_localctx, 6);
				{
				setState(1648);
				match(DAY_SECOND);
				}
				break;
			case HOUR_MINUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1649);
				match(HOUR_MINUTE);
				}
				break;
			case HOUR_SECOND:
				enterOuterAlt(_localctx, 8);
				{
				setState(1650);
				match(HOUR_SECOND);
				}
				break;
			case MINUTE_SECOND:
				enterOuterAlt(_localctx, 9);
				{
				setState(1651);
				match(MINUTE_SECOND);
				}
				break;
			case SECOND_MICROSECOND:
				enterOuterAlt(_localctx, 10);
				{
				setState(1652);
				match(SECOND_MICROSECOND);
				}
				break;
			case MINUTE_MICROSECOND:
				enterOuterAlt(_localctx, 11);
				{
				setState(1653);
				match(MINUTE_MICROSECOND);
				}
				break;
			case HOUR_MICROSECOND:
				enterOuterAlt(_localctx, 12);
				{
				setState(1654);
				match(HOUR_MICROSECOND);
				}
				break;
			case DAY_MICROSECOND:
				enterOuterAlt(_localctx, 13);
				{
				setState(1655);
				match(DAY_MICROSECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitOperatorContext extends ParserRuleContext {
		public List<TerminalNode> LESS_SYMBOL() { return getTokens(SimpleSpeakQlParser.LESS_SYMBOL); }
		public TerminalNode LESS_SYMBOL(int i) {
			return getToken(SimpleSpeakQlParser.LESS_SYMBOL, i);
		}
		public List<TerminalNode> GREATER_SYMBOL() { return getTokens(SimpleSpeakQlParser.GREATER_SYMBOL); }
		public TerminalNode GREATER_SYMBOL(int i) {
			return getToken(SimpleSpeakQlParser.GREATER_SYMBOL, i);
		}
		public TerminalNode BIT_AND_OP() { return getToken(SimpleSpeakQlParser.BIT_AND_OP, 0); }
		public TerminalNode BIT_XOR_OP() { return getToken(SimpleSpeakQlParser.BIT_XOR_OP, 0); }
		public TerminalNode BIT_OR_OP() { return getToken(SimpleSpeakQlParser.BIT_OR_OP, 0); }
		public BitOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterBitOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitBitOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitBitOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitOperatorContext bitOperator() throws RecognitionException {
		BitOperatorContext _localctx = new BitOperatorContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_bitOperator);
		try {
			setState(1665);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LESS_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1658);
				match(LESS_SYMBOL);
				setState(1659);
				match(LESS_SYMBOL);
				}
				break;
			case GREATER_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1660);
				match(GREATER_SYMBOL);
				setState(1661);
				match(GREATER_SYMBOL);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 3);
				{
				setState(1662);
				match(BIT_AND_OP);
				}
				break;
			case BIT_XOR_OP:
				enterOuterAlt(_localctx, 4);
				{
				setState(1663);
				match(BIT_XOR_OP);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(1664);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MathOperatorContext extends ParserRuleContext {
		public TerminalNode STAR() { return getToken(SimpleSpeakQlParser.STAR, 0); }
		public TerminalNode DIVIDE() { return getToken(SimpleSpeakQlParser.DIVIDE, 0); }
		public TerminalNode MODULE() { return getToken(SimpleSpeakQlParser.MODULE, 0); }
		public TerminalNode DIV() { return getToken(SimpleSpeakQlParser.DIV, 0); }
		public TerminalNode MOD() { return getToken(SimpleSpeakQlParser.MOD, 0); }
		public TerminalNode PLUS() { return getToken(SimpleSpeakQlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(SimpleSpeakQlParser.MINUS, 0); }
		public MathOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterMathOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitMathOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitMathOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MathOperatorContext mathOperator() throws RecognitionException {
		MathOperatorContext _localctx = new MathOperatorContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_mathOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1667);
			_la = _input.LA(1);
			if ( !(((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (STAR - 1108)) | (1L << (DIVIDE - 1108)) | (1L << (MODULE - 1108)) | (1L << (PLUS - 1108)) | (1L << (MINUS - 1108)) | (1L << (DIV - 1108)) | (1L << (MOD - 1108)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonOperatorContext extends ParserRuleContext {
		public TerminalNode MINUS() { return getToken(SimpleSpeakQlParser.MINUS, 0); }
		public List<TerminalNode> GREATER_SYMBOL() { return getTokens(SimpleSpeakQlParser.GREATER_SYMBOL); }
		public TerminalNode GREATER_SYMBOL(int i) {
			return getToken(SimpleSpeakQlParser.GREATER_SYMBOL, i);
		}
		public JsonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterJsonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitJsonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitJsonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonOperatorContext jsonOperator() throws RecognitionException {
		JsonOperatorContext _localctx = new JsonOperatorContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_jsonOperator);
		try {
			setState(1674);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,212,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1669);
				match(MINUS);
				setState(1670);
				match(GREATER_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1671);
				match(MINUS);
				setState(1672);
				match(GREATER_SYMBOL);
				setState(1673);
				match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConvertedDataTypeContext extends ParserRuleContext {
		public Token typeName;
		public TerminalNode BINARY() { return getToken(SimpleSpeakQlParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(SimpleSpeakQlParser.NCHAR, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode CHAR() { return getToken(SimpleSpeakQlParser.CHAR, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(SimpleSpeakQlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(SimpleSpeakQlParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(SimpleSpeakQlParser.CHARSET, 0); }
		public TerminalNode DATE() { return getToken(SimpleSpeakQlParser.DATE, 0); }
		public TerminalNode DATETIME() { return getToken(SimpleSpeakQlParser.DATETIME, 0); }
		public TerminalNode TIME() { return getToken(SimpleSpeakQlParser.TIME, 0); }
		public TerminalNode JSON() { return getToken(SimpleSpeakQlParser.JSON, 0); }
		public TerminalNode DECIMAL() { return getToken(SimpleSpeakQlParser.DECIMAL, 0); }
		public LengthTwoDimensionContext lengthTwoDimension() {
			return getRuleContext(LengthTwoDimensionContext.class,0);
		}
		public TerminalNode SIGNED() { return getToken(SimpleSpeakQlParser.SIGNED, 0); }
		public TerminalNode UNSIGNED() { return getToken(SimpleSpeakQlParser.UNSIGNED, 0); }
		public TerminalNode INTEGER() { return getToken(SimpleSpeakQlParser.INTEGER, 0); }
		public TerminalNode ARRAY() { return getToken(SimpleSpeakQlParser.ARRAY, 0); }
		public ConvertedDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_convertedDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterConvertedDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitConvertedDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitConvertedDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConvertedDataTypeContext convertedDataType() throws RecognitionException {
		ConvertedDataTypeContext _localctx = new ConvertedDataTypeContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_convertedDataType);
		int _la;
		try {
			setState(1703);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1676);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==NCHAR) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1678);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPEN_PARENTHESIS) | (1L << LEFT_PARENTHESIS) | (1L << OPEN_PAREN) | (1L << LEFT_PAREN))) != 0) || _la==LR_BRACKET) {
					{
					setState(1677);
					lengthOneDimension();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1680);
				((ConvertedDataTypeContext)_localctx).typeName = match(CHAR);
				setState(1682);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPEN_PARENTHESIS) | (1L << LEFT_PARENTHESIS) | (1L << OPEN_PAREN) | (1L << LEFT_PAREN))) != 0) || _la==LR_BRACKET) {
					{
					setState(1681);
					lengthOneDimension();
					}
				}

				setState(1690);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER || _la==CHARSET) {
					{
					setState(1687);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CHARACTER:
						{
						setState(1684);
						match(CHARACTER);
						setState(1685);
						match(SET);
						}
						break;
					case CHARSET:
						{
						setState(1686);
						match(CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1689);
					charsetName();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1692);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (DATE - 246)) | (1L << (TIME - 246)) | (1L << (DATETIME - 246)))) != 0) || _la==JSON) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1693);
				((ConvertedDataTypeContext)_localctx).typeName = match(DECIMAL);
				setState(1695);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPEN_PARENTHESIS) | (1L << LEFT_PARENTHESIS) | (1L << OPEN_PAREN) | (1L << LEFT_PAREN))) != 0) || _la==LR_BRACKET) {
					{
					setState(1694);
					lengthTwoDimension();
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1697);
				_la = _input.LA(1);
				if ( !(_la==UNSIGNED || _la==SIGNED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1699);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTEGER) {
					{
					setState(1698);
					match(INTEGER);
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1701);
				match(UNSIGNED);
				setState(1702);
				match(ARRAY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthOneDimensionContext extends ParserRuleContext {
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public LengthOneDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthOneDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterLengthOneDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitLengthOneDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitLengthOneDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthOneDimensionContext lengthOneDimension() throws RecognitionException {
		LengthOneDimensionContext _localctx = new LengthOneDimensionContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_lengthOneDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1705);
			leftParen();
			setState(1706);
			decimalLiteral();
			setState(1707);
			rightParen();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(SimpleSpeakQlParser.BINARY, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(SimpleSpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(SimpleSpeakQlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterCharsetName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitCharsetName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitCharsetName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetNameContext charsetName() throws RecognitionException {
		CharsetNameContext _localctx = new CharsetNameContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_charsetName);
		try {
			setState(1713);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,220,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1709);
				match(BINARY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1710);
				charsetNameBase();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1711);
				match(STRING_LITERAL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1712);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoDimensionContext extends ParserRuleContext {
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(SimpleSpeakQlParser.COMMA, 0); }
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public LengthTwoDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterLengthTwoDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitLengthTwoDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitLengthTwoDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoDimensionContext lengthTwoDimension() throws RecognitionException {
		LengthTwoDimensionContext _localctx = new LengthTwoDimensionContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_lengthTwoDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1715);
			leftParen();
			setState(1716);
			decimalLiteral();
			setState(1717);
			match(COMMA);
			setState(1718);
			decimalLiteral();
			setState(1719);
			rightParen();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseFuncAlternativeContext extends ParserRuleContext {
		public FunctionArgContext condition;
		public FunctionArgContext consequent;
		public TerminalNode WHEN() { return getToken(SimpleSpeakQlParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(SimpleSpeakQlParser.THEN, 0); }
		public List<FunctionArgContext> functionArg() {
			return getRuleContexts(FunctionArgContext.class);
		}
		public FunctionArgContext functionArg(int i) {
			return getRuleContext(FunctionArgContext.class,i);
		}
		public CaseFuncAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseFuncAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterCaseFuncAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitCaseFuncAlternative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitCaseFuncAlternative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseFuncAlternativeContext caseFuncAlternative() throws RecognitionException {
		CaseFuncAlternativeContext _localctx = new CaseFuncAlternativeContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_caseFuncAlternative);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1721);
			match(WHEN);
			setState(1722);
			((CaseFuncAlternativeContext)_localctx).condition = functionArg();
			setState(1723);
			match(THEN);
			setState(1724);
			((CaseFuncAlternativeContext)_localctx).consequent = functionArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgsContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<FullColumnNameContext> fullColumnName() {
			return getRuleContexts(FullColumnNameContext.class);
		}
		public FullColumnNameContext fullColumnName(int i) {
			return getRuleContext(FullColumnNameContext.class,i);
		}
		public List<FunctionCallContext> functionCall() {
			return getRuleContexts(FunctionCallContext.class);
		}
		public FunctionCallContext functionCall(int i) {
			return getRuleContext(FunctionCallContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SimpleSpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SimpleSpeakQlParser.COMMA, i);
		}
		public FunctionArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterFunctionArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitFunctionArgs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitFunctionArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionArgsContext functionArgs() throws RecognitionException {
		FunctionArgsContext _localctx = new FunctionArgsContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_functionArgs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1730);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,221,_ctx) ) {
			case 1:
				{
				setState(1726);
				constant();
				}
				break;
			case 2:
				{
				setState(1727);
				fullColumnName();
				}
				break;
			case 3:
				{
				setState(1728);
				functionCall();
				}
				break;
			case 4:
				{
				setState(1729);
				expression(0);
				}
				break;
			}
			setState(1741);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1732);
				match(COMMA);
				setState(1737);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
				case 1:
					{
					setState(1733);
					constant();
					}
					break;
				case 2:
					{
					setState(1734);
					fullColumnName();
					}
					break;
				case 3:
					{
					setState(1735);
					functionCall();
					}
					break;
				case 4:
					{
					setState(1736);
					expression(0);
					}
					break;
				}
				}
				}
				setState(1743);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelsInWeightStringContext extends ParserRuleContext {
		public LevelsInWeightStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelsInWeightString; }
	 
		public LevelsInWeightStringContext() { }
		public void copyFrom(LevelsInWeightStringContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class LevelWeightRangeContext extends LevelsInWeightStringContext {
		public DecimalLiteralContext firstLevel;
		public DecimalLiteralContext lastLevel;
		public TerminalNode LEVEL() { return getToken(SimpleSpeakQlParser.LEVEL, 0); }
		public TerminalNode MINUS() { return getToken(SimpleSpeakQlParser.MINUS, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public LevelWeightRangeContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterLevelWeightRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitLevelWeightRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitLevelWeightRange(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LevelWeightListContext extends LevelsInWeightStringContext {
		public TerminalNode LEVEL() { return getToken(SimpleSpeakQlParser.LEVEL, 0); }
		public List<LevelInWeightListElementContext> levelInWeightListElement() {
			return getRuleContexts(LevelInWeightListElementContext.class);
		}
		public LevelInWeightListElementContext levelInWeightListElement(int i) {
			return getRuleContext(LevelInWeightListElementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SimpleSpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SimpleSpeakQlParser.COMMA, i);
		}
		public LevelWeightListContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterLevelWeightList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitLevelWeightList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitLevelWeightList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelsInWeightStringContext levelsInWeightString() throws RecognitionException {
		LevelsInWeightStringContext _localctx = new LevelsInWeightStringContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_levelsInWeightString);
		int _la;
		try {
			setState(1758);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
			case 1:
				_localctx = new LevelWeightListContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1744);
				match(LEVEL);
				setState(1745);
				levelInWeightListElement();
				setState(1750);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1746);
					match(COMMA);
					setState(1747);
					levelInWeightListElement();
					}
					}
					setState(1752);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new LevelWeightRangeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1753);
				match(LEVEL);
				setState(1754);
				((LevelWeightRangeContext)_localctx).firstLevel = decimalLiteral();
				setState(1755);
				match(MINUS);
				setState(1756);
				((LevelWeightRangeContext)_localctx).lastLevel = decimalLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelInWeightListElementContext extends ParserRuleContext {
		public Token orderType;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode ASC() { return getToken(SimpleSpeakQlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(SimpleSpeakQlParser.DESC, 0); }
		public TerminalNode REVERSE() { return getToken(SimpleSpeakQlParser.REVERSE, 0); }
		public LevelInWeightListElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelInWeightListElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterLevelInWeightListElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitLevelInWeightListElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitLevelInWeightListElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelInWeightListElementContext levelInWeightListElement() throws RecognitionException {
		LevelInWeightListElementContext _localctx = new LevelInWeightListElementContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_levelInWeightListElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1760);
			decimalLiteral();
			setState(1762);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC || _la==REVERSE) {
				{
				setState(1761);
				((LevelInWeightListElementContext)_localctx).orderType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC || _la==REVERSE) ) {
					((LevelInWeightListElementContext)_localctx).orderType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultValueContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(SimpleSpeakQlParser.NULL_LITERAL, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public List<CurrentTimestampContext> currentTimestamp() {
			return getRuleContexts(CurrentTimestampContext.class);
		}
		public CurrentTimestampContext currentTimestamp(int i) {
			return getRuleContext(CurrentTimestampContext.class,i);
		}
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public TerminalNode ON() { return getToken(SimpleSpeakQlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(SimpleSpeakQlParser.UPDATE, 0); }
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterDefaultValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitDefaultValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitDefaultValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultValueContext defaultValue() throws RecognitionException {
		DefaultValueContext _localctx = new DefaultValueContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_defaultValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1774);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
			case 1:
				{
				setState(1764);
				match(NULL_LITERAL);
				}
				break;
			case 2:
				{
				setState(1766);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
				case 1:
					{
					setState(1765);
					unaryOperator();
					}
					break;
				}
				setState(1768);
				constant();
				}
				break;
			case 3:
				{
				setState(1769);
				currentTimestamp();
				}
				break;
			case 4:
				{
				setState(1770);
				leftParen();
				setState(1771);
				expression(0);
				setState(1772);
				rightParen();
				}
				break;
			}
			setState(1779);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,229,_ctx) ) {
			case 1:
				{
				setState(1776);
				match(ON);
				setState(1777);
				match(UPDATE);
				setState(1778);
				currentTimestamp();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CurrentTimestampContext extends ParserRuleContext {
		public TerminalNode NOW() { return getToken(SimpleSpeakQlParser.NOW, 0); }
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(SimpleSpeakQlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(SimpleSpeakQlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(SimpleSpeakQlParser.LOCALTIMESTAMP, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public CurrentTimestampContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_currentTimestamp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterCurrentTimestamp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitCurrentTimestamp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitCurrentTimestamp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CurrentTimestampContext currentTimestamp() throws RecognitionException {
		CurrentTimestampContext _localctx = new CurrentTimestampContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_currentTimestamp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1797);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
				{
				setState(1781);
				_la = _input.LA(1);
				if ( !(((((_la - 341)) & ~0x3f) == 0 && ((1L << (_la - 341)) & ((1L << (CURRENT_TIMESTAMP - 341)) | (1L << (LOCALTIME - 341)) | (1L << (LOCALTIMESTAMP - 341)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1788);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPEN_PARENTHESIS) | (1L << LEFT_PARENTHESIS) | (1L << OPEN_PAREN) | (1L << LEFT_PAREN))) != 0) || _la==LR_BRACKET) {
					{
					setState(1782);
					leftParen();
					setState(1784);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 1129)) & ~0x3f) == 0 && ((1L << (_la - 1129)) & ((1L << (ZERO_DECIMAL - 1129)) | (1L << (ONE_DECIMAL - 1129)) | (1L << (TWO_DECIMAL - 1129)) | (1L << (DECIMAL_LITERAL - 1129)) | (1L << (REAL_LITERAL - 1129)))) != 0)) {
						{
						setState(1783);
						decimalLiteral();
						}
					}

					setState(1786);
					rightParen();
					}
				}

				}
				break;
			case NOW:
				{
				setState(1790);
				match(NOW);
				setState(1791);
				leftParen();
				setState(1793);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 1129)) & ~0x3f) == 0 && ((1L << (_la - 1129)) & ((1L << (ZERO_DECIMAL - 1129)) | (1L << (ONE_DECIMAL - 1129)) | (1L << (TWO_DECIMAL - 1129)) | (1L << (DECIMAL_LITERAL - 1129)) | (1L << (REAL_LITERAL - 1129)))) != 0)) {
					{
					setState(1792);
					decimalLiteral();
					}
				}

				setState(1795);
				rightParen();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateWindowedFunctionContext extends ParserRuleContext {
		public Token aggregator;
		public Token starArg;
		public Token separator;
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public TerminalNode AVG() { return getToken(SimpleSpeakQlParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(SimpleSpeakQlParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(SimpleSpeakQlParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(SimpleSpeakQlParser.SUM, 0); }
		public TheKeywordContext theKeyword() {
			return getRuleContext(TheKeywordContext.class,0);
		}
		public OfKeywordContext ofKeyword() {
			return getRuleContext(OfKeywordContext.class,0);
		}
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SimpleSpeakQlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(SimpleSpeakQlParser.DISTINCT, 0); }
		public TerminalNode COUNT() { return getToken(SimpleSpeakQlParser.COUNT, 0); }
		public DistinctAggregatorKeywordContext distinctAggregatorKeyword() {
			return getRuleContext(DistinctAggregatorKeywordContext.class,0);
		}
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode STAR() { return getToken(SimpleSpeakQlParser.STAR, 0); }
		public AllAggregatorKeywordContext allAggregatorKeyword() {
			return getRuleContext(AllAggregatorKeywordContext.class,0);
		}
		public TerminalNode BIT_AND() { return getToken(SimpleSpeakQlParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(SimpleSpeakQlParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(SimpleSpeakQlParser.BIT_XOR, 0); }
		public TerminalNode STD() { return getToken(SimpleSpeakQlParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(SimpleSpeakQlParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(SimpleSpeakQlParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(SimpleSpeakQlParser.STDDEV_SAMP, 0); }
		public TerminalNode VAR_POP() { return getToken(SimpleSpeakQlParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(SimpleSpeakQlParser.VAR_SAMP, 0); }
		public TerminalNode VARIANCE() { return getToken(SimpleSpeakQlParser.VARIANCE, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(SimpleSpeakQlParser.GROUP_CONCAT, 0); }
		public TerminalNode ORDER() { return getToken(SimpleSpeakQlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(SimpleSpeakQlParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public TerminalNode SEPARATOR() { return getToken(SimpleSpeakQlParser.SEPARATOR, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SimpleSpeakQlParser.STRING_LITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SimpleSpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SimpleSpeakQlParser.COMMA, i);
		}
		public AggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateWindowedFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterAggregateWindowedFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitAggregateWindowedFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitAggregateWindowedFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateWindowedFunctionContext aggregateWindowedFunction() throws RecognitionException {
		AggregateWindowedFunctionContext _localctx = new AggregateWindowedFunctionContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_aggregateWindowedFunction);
		int _la;
		try {
			setState(1871);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1800);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==THE) {
					{
					setState(1799);
					theKeyword();
					}
				}

				setState(1802);
				_la = _input.LA(1);
				if ( !(((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & ((1L << (AVG - 312)) | (1L << (MAX - 312)) | (1L << (MIN - 312)) | (1L << (SUM - 312)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1804);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OF) {
					{
					setState(1803);
					ofKeyword();
					}
				}

				setState(1806);
				leftParen();
				setState(1808);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(1807);
					((AggregateWindowedFunctionContext)_localctx).aggregator = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
						((AggregateWindowedFunctionContext)_localctx).aggregator = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1810);
				functionArg();
				setState(1811);
				rightParen();
				setState(1813);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,237,_ctx) ) {
				case 1:
					{
					setState(1812);
					overClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1816);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==THE) {
					{
					setState(1815);
					theKeyword();
					}
				}

				setState(1818);
				match(COUNT);
				setState(1820);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OF) {
					{
					setState(1819);
					ofKeyword();
					}
				}

				setState(1822);
				leftParen();
				setState(1831);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STAR:
					{
					setState(1823);
					((AggregateWindowedFunctionContext)_localctx).starArg = match(STAR);
					}
					break;
				case SPOKEN_DOT:
				case OPEN_PARENTHESIS:
				case LEFT_PARENTHESIS:
				case OPEN_PAREN:
				case LEFT_PAREN:
				case THE:
				case ALL:
				case CASE:
				case CAST:
				case CONVERT:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case EXISTS:
				case FALSE:
				case GROUP:
				case IF:
				case INSERT:
				case INTERVAL:
				case LEFT:
				case NOT:
				case NULL_LITERAL:
				case NUMBER:
				case ORDER:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case TRUE:
				case VALUES:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case CHAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case EXTRACT:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case PLUS:
				case MINUS:
				case MOD:
				case EXCLAMATION_SYMBOL:
				case BIT_NOT_OP:
				case DOT:
				case LR_BRACKET:
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case START_NATIONAL_STRING_LITERAL:
				case STRING_LITERAL:
				case DECIMAL_LITERAL:
				case HEXADECIMAL_LITERAL:
				case REAL_LITERAL:
				case NULL_SPEC_LITERAL:
				case BIT_STRING:
				case STRING_CHARSET_NAME:
				case ID:
				case REVERSE_QUOTE_ID:
				case LOCAL_ID:
				case GLOBAL_ID:
					{
					setState(1825);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL) {
						{
						setState(1824);
						allAggregatorKeyword();
						}
					}

					setState(1827);
					functionArg();
					}
					break;
				case DISTINCT:
					{
					setState(1828);
					distinctAggregatorKeyword();
					setState(1829);
					functionArgs();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1833);
				rightParen();
				setState(1835);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,242,_ctx) ) {
				case 1:
					{
					setState(1834);
					overClause();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1837);
				_la = _input.LA(1);
				if ( !(((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (BIT_AND - 313)) | (1L << (BIT_OR - 313)) | (1L << (BIT_XOR - 313)) | (1L << (STD - 313)) | (1L << (STDDEV - 313)) | (1L << (STDDEV_POP - 313)) | (1L << (STDDEV_SAMP - 313)) | (1L << (VAR_POP - 313)) | (1L << (VAR_SAMP - 313)) | (1L << (VARIANCE - 313)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1838);
				leftParen();
				setState(1840);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(1839);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
					}
				}

				setState(1842);
				functionArg();
				setState(1843);
				rightParen();
				setState(1845);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
				case 1:
					{
					setState(1844);
					overClause();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1847);
				match(GROUP_CONCAT);
				setState(1848);
				leftParen();
				setState(1850);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DISTINCT) {
					{
					setState(1849);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
					}
				}

				setState(1852);
				functionArgs();
				setState(1863);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(1853);
					match(ORDER);
					setState(1854);
					match(BY);
					setState(1855);
					orderByExpression();
					setState(1860);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1856);
						match(COMMA);
						setState(1857);
						orderByExpression();
						}
						}
						setState(1862);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1867);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEPARATOR) {
					{
					setState(1865);
					match(SEPARATOR);
					setState(1866);
					((AggregateWindowedFunctionContext)_localctx).separator = match(STRING_LITERAL);
					}
				}

				setState(1869);
				rightParen();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OfKeywordContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(SimpleSpeakQlParser.OF, 0); }
		public OfKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ofKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterOfKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitOfKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitOfKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OfKeywordContext ofKeyword() throws RecognitionException {
		OfKeywordContext _localctx = new OfKeywordContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_ofKeyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1873);
			match(OF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TheKeywordContext extends ParserRuleContext {
		public TerminalNode THE() { return getToken(SimpleSpeakQlParser.THE, 0); }
		public TheKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_theKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterTheKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitTheKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitTheKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TheKeywordContext theKeyword() throws RecognitionException {
		TheKeywordContext _localctx = new TheKeywordContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_theKeyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1875);
			match(THE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterFunctionArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitFunctionArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitFunctionArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionArgContext functionArg() throws RecognitionException {
		FunctionArgContext _localctx = new FunctionArgContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_functionArg);
		try {
			setState(1881);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1877);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1878);
				fullColumnName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1879);
				functionCall();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1880);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverClauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(SimpleSpeakQlParser.OVER, 0); }
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public WindowSpecContext windowSpec() {
			return getRuleContext(WindowSpecContext.class,0);
		}
		public OverClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterOverClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitOverClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitOverClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverClauseContext overClause() throws RecognitionException {
		OverClauseContext _localctx = new OverClauseContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_overClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1883);
			match(OVER);
			setState(1891);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PARENTHESIS:
			case LEFT_PARENTHESIS:
			case OPEN_PAREN:
			case LEFT_PAREN:
			case LR_BRACKET:
				{
				setState(1884);
				leftParen();
				setState(1886);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
				case 1:
					{
					setState(1885);
					windowSpec();
					}
					break;
				}
				setState(1888);
				rightParen();
				}
				break;
			case SPOKEN_DOT:
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case LEFT:
			case NUMBER:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				setState(1890);
				windowName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllAggregatorKeywordContext extends ParserRuleContext {
		public Token aggregator;
		public TerminalNode ALL() { return getToken(SimpleSpeakQlParser.ALL, 0); }
		public AllAggregatorKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allAggregatorKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterAllAggregatorKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitAllAggregatorKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitAllAggregatorKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AllAggregatorKeywordContext allAggregatorKeyword() throws RecognitionException {
		AllAggregatorKeywordContext _localctx = new AllAggregatorKeywordContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_allAggregatorKeyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1893);
			((AllAggregatorKeywordContext)_localctx).aggregator = match(ALL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DistinctAggregatorKeywordContext extends ParserRuleContext {
		public Token aggregator;
		public TerminalNode DISTINCT() { return getToken(SimpleSpeakQlParser.DISTINCT, 0); }
		public DistinctAggregatorKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinctAggregatorKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterDistinctAggregatorKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitDistinctAggregatorKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitDistinctAggregatorKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistinctAggregatorKeywordContext distinctAggregatorKeyword() throws RecognitionException {
		DistinctAggregatorKeywordContext _localctx = new DistinctAggregatorKeywordContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_distinctAggregatorKeyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1895);
			((DistinctAggregatorKeywordContext)_localctx).aggregator = match(DISTINCT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonAggregateWindowedFunctionContext extends ParserRuleContext {
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public TerminalNode LAG() { return getToken(SimpleSpeakQlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(SimpleSpeakQlParser.LEAD, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SimpleSpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SimpleSpeakQlParser.COMMA, i);
		}
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode FIRST_VALUE() { return getToken(SimpleSpeakQlParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(SimpleSpeakQlParser.LAST_VALUE, 0); }
		public TerminalNode CUME_DIST() { return getToken(SimpleSpeakQlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(SimpleSpeakQlParser.DENSE_RANK, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(SimpleSpeakQlParser.PERCENT_RANK, 0); }
		public TerminalNode RANK() { return getToken(SimpleSpeakQlParser.RANK, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(SimpleSpeakQlParser.ROW_NUMBER, 0); }
		public TerminalNode NTH_VALUE() { return getToken(SimpleSpeakQlParser.NTH_VALUE, 0); }
		public TerminalNode NTILE() { return getToken(SimpleSpeakQlParser.NTILE, 0); }
		public NonAggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonAggregateWindowedFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterNonAggregateWindowedFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitNonAggregateWindowedFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitNonAggregateWindowedFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonAggregateWindowedFunctionContext nonAggregateWindowedFunction() throws RecognitionException {
		NonAggregateWindowedFunctionContext _localctx = new NonAggregateWindowedFunctionContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_nonAggregateWindowedFunction);
		int _la;
		try {
			setState(1936);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LAG:
			case LEAD:
				enterOuterAlt(_localctx, 1);
				{
				setState(1897);
				_la = _input.LA(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1898);
				leftParen();
				setState(1899);
				expression(0);
				setState(1902);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
				case 1:
					{
					setState(1900);
					match(COMMA);
					setState(1901);
					decimalLiteral();
					}
					break;
				}
				setState(1906);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1904);
					match(COMMA);
					setState(1905);
					decimalLiteral();
					}
				}

				setState(1908);
				rightParen();
				setState(1909);
				overClause();
				}
				break;
			case FIRST_VALUE:
			case LAST_VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1911);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1912);
				leftParen();
				setState(1913);
				expression(0);
				setState(1914);
				rightParen();
				setState(1915);
				overClause();
				}
				break;
			case CUME_DIST:
			case DENSE_RANK:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
				enterOuterAlt(_localctx, 3);
				{
				setState(1917);
				_la = _input.LA(1);
				if ( !(((((_la - 317)) & ~0x3f) == 0 && ((1L << (_la - 317)) & ((1L << (CUME_DIST - 317)) | (1L << (DENSE_RANK - 317)) | (1L << (PERCENT_RANK - 317)) | (1L << (RANK - 317)) | (1L << (ROW_NUMBER - 317)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1918);
				leftParen();
				setState(1919);
				rightParen();
				setState(1920);
				overClause();
				}
				break;
			case NTH_VALUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(1922);
				match(NTH_VALUE);
				setState(1923);
				leftParen();
				setState(1924);
				expression(0);
				setState(1925);
				match(COMMA);
				setState(1926);
				decimalLiteral();
				setState(1927);
				rightParen();
				setState(1928);
				overClause();
				}
				break;
			case NTILE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1930);
				match(NTILE);
				setState(1931);
				leftParen();
				setState(1932);
				decimalLiteral();
				setState(1933);
				rightParen();
				setState(1934);
				overClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScalarFunctionNameContext extends ParserRuleContext {
		public FunctionNameBaseContext functionNameBase() {
			return getRuleContext(FunctionNameBaseContext.class,0);
		}
		public TerminalNode ASCII() { return getToken(SimpleSpeakQlParser.ASCII, 0); }
		public TerminalNode CURDATE() { return getToken(SimpleSpeakQlParser.CURDATE, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(SimpleSpeakQlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(SimpleSpeakQlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(SimpleSpeakQlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURTIME() { return getToken(SimpleSpeakQlParser.CURTIME, 0); }
		public TerminalNode DATE_ADD() { return getToken(SimpleSpeakQlParser.DATE_ADD, 0); }
		public TerminalNode DATE_SUB() { return getToken(SimpleSpeakQlParser.DATE_SUB, 0); }
		public TerminalNode IF() { return getToken(SimpleSpeakQlParser.IF, 0); }
		public TerminalNode INSERT() { return getToken(SimpleSpeakQlParser.INSERT, 0); }
		public TerminalNode LOCALTIME() { return getToken(SimpleSpeakQlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(SimpleSpeakQlParser.LOCALTIMESTAMP, 0); }
		public TerminalNode MID() { return getToken(SimpleSpeakQlParser.MID, 0); }
		public TerminalNode NOW() { return getToken(SimpleSpeakQlParser.NOW, 0); }
		public TerminalNode REPLACE() { return getToken(SimpleSpeakQlParser.REPLACE, 0); }
		public TerminalNode SUBSTR() { return getToken(SimpleSpeakQlParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(SimpleSpeakQlParser.SUBSTRING, 0); }
		public TerminalNode SYSDATE() { return getToken(SimpleSpeakQlParser.SYSDATE, 0); }
		public TerminalNode TRIM() { return getToken(SimpleSpeakQlParser.TRIM, 0); }
		public TerminalNode UTC_DATE() { return getToken(SimpleSpeakQlParser.UTC_DATE, 0); }
		public TerminalNode UTC_TIME() { return getToken(SimpleSpeakQlParser.UTC_TIME, 0); }
		public TerminalNode UTC_TIMESTAMP() { return getToken(SimpleSpeakQlParser.UTC_TIMESTAMP, 0); }
		public ScalarFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalarFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterScalarFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitScalarFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitScalarFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScalarFunctionNameContext scalarFunctionName() throws RecognitionException {
		ScalarFunctionNameContext _localctx = new ScalarFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_scalarFunctionName);
		try {
			setState(1961);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATABASE:
			case LEFT:
			case RIGHT:
			case SCHEMA:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case COUNT:
			case POSITION:
			case INVISIBLE:
			case VISIBLE:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case SESSION_VARIABLES_ADMIN:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
				enterOuterAlt(_localctx, 1);
				{
				setState(1938);
				functionNameBase();
				}
				break;
			case ASCII:
				enterOuterAlt(_localctx, 2);
				{
				setState(1939);
				match(ASCII);
				}
				break;
			case CURDATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1940);
				match(CURDATE);
				}
				break;
			case CURRENT_DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(1941);
				match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				enterOuterAlt(_localctx, 5);
				{
				setState(1942);
				match(CURRENT_TIME);
				}
				break;
			case CURRENT_TIMESTAMP:
				enterOuterAlt(_localctx, 6);
				{
				setState(1943);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case CURTIME:
				enterOuterAlt(_localctx, 7);
				{
				setState(1944);
				match(CURTIME);
				}
				break;
			case DATE_ADD:
				enterOuterAlt(_localctx, 8);
				{
				setState(1945);
				match(DATE_ADD);
				}
				break;
			case DATE_SUB:
				enterOuterAlt(_localctx, 9);
				{
				setState(1946);
				match(DATE_SUB);
				}
				break;
			case IF:
				enterOuterAlt(_localctx, 10);
				{
				setState(1947);
				match(IF);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 11);
				{
				setState(1948);
				match(INSERT);
				}
				break;
			case LOCALTIME:
				enterOuterAlt(_localctx, 12);
				{
				setState(1949);
				match(LOCALTIME);
				}
				break;
			case LOCALTIMESTAMP:
				enterOuterAlt(_localctx, 13);
				{
				setState(1950);
				match(LOCALTIMESTAMP);
				}
				break;
			case MID:
				enterOuterAlt(_localctx, 14);
				{
				setState(1951);
				match(MID);
				}
				break;
			case NOW:
				enterOuterAlt(_localctx, 15);
				{
				setState(1952);
				match(NOW);
				}
				break;
			case REPLACE:
				enterOuterAlt(_localctx, 16);
				{
				setState(1953);
				match(REPLACE);
				}
				break;
			case SUBSTR:
				enterOuterAlt(_localctx, 17);
				{
				setState(1954);
				match(SUBSTR);
				}
				break;
			case SUBSTRING:
				enterOuterAlt(_localctx, 18);
				{
				setState(1955);
				match(SUBSTRING);
				}
				break;
			case SYSDATE:
				enterOuterAlt(_localctx, 19);
				{
				setState(1956);
				match(SYSDATE);
				}
				break;
			case TRIM:
				enterOuterAlt(_localctx, 20);
				{
				setState(1957);
				match(TRIM);
				}
				break;
			case UTC_DATE:
				enterOuterAlt(_localctx, 21);
				{
				setState(1958);
				match(UTC_DATE);
				}
				break;
			case UTC_TIME:
				enterOuterAlt(_localctx, 22);
				{
				setState(1959);
				match(UTC_TIME);
				}
				break;
			case UTC_TIMESTAMP:
				enterOuterAlt(_localctx, 23);
				{
				setState(1960);
				match(UTC_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PasswordFunctionClauseContext extends ParserRuleContext {
		public Token functionName;
		public LeftParenContext leftParen() {
			return getRuleContext(LeftParenContext.class,0);
		}
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public RightParenContext rightParen() {
			return getRuleContext(RightParenContext.class,0);
		}
		public TerminalNode PASSWORD() { return getToken(SimpleSpeakQlParser.PASSWORD, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(SimpleSpeakQlParser.OLD_PASSWORD, 0); }
		public PasswordFunctionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_passwordFunctionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterPasswordFunctionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitPasswordFunctionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitPasswordFunctionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PasswordFunctionClauseContext passwordFunctionClause() throws RecognitionException {
		PasswordFunctionClauseContext _localctx = new PasswordFunctionClauseContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_passwordFunctionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1963);
			((PasswordFunctionClauseContext)_localctx).functionName = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==OLD_PASSWORD || _la==PASSWORD) ) {
				((PasswordFunctionClauseContext)_localctx).functionName = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1964);
			leftParen();
			setState(1965);
			functionArg();
			setState(1966);
			rightParen();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementDelimiterContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(SimpleSpeakQlParser.COMMA, 0); }
		public TerminalNode AND() { return getToken(SimpleSpeakQlParser.AND, 0); }
		public SelectElementDelimiterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElementDelimiter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterSelectElementDelimiter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitSelectElementDelimiter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitSelectElementDelimiter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementDelimiterContext selectElementDelimiter() throws RecognitionException {
		SelectElementDelimiterContext _localctx = new SelectElementDelimiterContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_selectElementDelimiter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1968);
			_la = _input.LA(1);
			if ( !(_la==AND || _la==COMMA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhereKeywordContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(SimpleSpeakQlParser.WHERE, 0); }
		public WhereKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterWhereKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitWhereKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitWhereKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhereKeywordContext whereKeyword() throws RecognitionException {
		WhereKeywordContext _localctx = new WhereKeywordContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_whereKeyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1970);
			match(WHERE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhereExpressionContext extends ParserRuleContext {
		public ExpressionContext whereExpr;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public WhereExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterWhereExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitWhereExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitWhereExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhereExpressionContext whereExpression() throws RecognitionException {
		WhereExpressionContext _localctx = new WhereExpressionContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_whereExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1972);
			((WhereExpressionContext)_localctx).whereExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableExpressionNoJoinContext extends ParserRuleContext {
		public FromClauseNoJoinContext fromClauseNoJoin() {
			return getRuleContext(FromClauseNoJoinContext.class,0);
		}
		public TableExpressionNoJoinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableExpressionNoJoin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterTableExpressionNoJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitTableExpressionNoJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitTableExpressionNoJoin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableExpressionNoJoinContext tableExpressionNoJoin() throws RecognitionException {
		TableExpressionNoJoinContext _localctx = new TableExpressionNoJoinContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_tableExpressionNoJoin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1974);
			fromClauseNoJoin();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableExpressionContext extends ParserRuleContext {
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public TableExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).enterTableExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleSpeakQlParserListener ) ((SimpleSpeakQlParserListener)listener).exitTableExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleSpeakQlParserVisitor ) return ((SimpleSpeakQlParserVisitor<? extends T>)visitor).visitTableExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableExpressionContext tableExpression() throws RecognitionException {
		TableExpressionContext _localctx = new TableExpressionContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_tableExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1976);
			fromClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 32:
			return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 34:
			return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 104:
			return expressionAtom_sempred((ExpressionAtomContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 8);
		case 2:
			return precpred(_ctx, 6);
		case 3:
			return precpred(_ctx, 5);
		case 4:
			return precpred(_ctx, 3);
		case 5:
			return precpred(_ctx, 10);
		case 6:
			return precpred(_ctx, 9);
		case 7:
			return precpred(_ctx, 7);
		case 8:
			return precpred(_ctx, 4);
		case 9:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean expressionAtom_sempred(ExpressionAtomContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10:
			return precpred(_ctx, 3);
		case 11:
			return precpred(_ctx, 2);
		case 12:
			return precpred(_ctx, 1);
		case 13:
			return precpred(_ctx, 12);
		}
		return true;
	}

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0483\u07bd\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\3\2\3\2\5\2\u0121\n\2\3\3\3\3\5\3\u0125\n\3\3"+
		"\3\3\3\5\3\u0129\n\3\3\3\3\3\6\3\u012d\n\3\r\3\16\3\u012e\3\3\3\3\5\3"+
		"\u0133\n\3\3\3\3\3\5\3\u0137\n\3\5\3\u0139\n\3\3\3\5\3\u013c\n\3\3\3\5"+
		"\3\u013f\n\3\3\3\5\3\u0142\n\3\3\3\3\3\6\3\u0146\n\3\r\3\16\3\u0147\3"+
		"\3\3\3\5\3\u014c\n\3\3\3\5\3\u014f\n\3\3\3\5\3\u0152\n\3\3\3\5\3\u0155"+
		"\n\3\3\3\5\3\u0158\n\3\5\3\u015a\n\3\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u0162"+
		"\n\4\3\4\3\4\3\4\3\4\5\4\u0168\n\4\7\4\u016a\n\4\f\4\16\4\u016d\13\4\3"+
		"\4\3\4\3\4\5\4\u0172\n\4\5\4\u0174\n\4\3\5\3\5\3\5\3\5\5\5\u017a\n\5\3"+
		"\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0183\n\5\3\5\3\5\3\5\3\5\3\5\5\5\u018a"+
		"\n\5\3\5\3\5\3\5\3\5\5\5\u0190\n\5\3\5\3\5\5\5\u0194\n\5\3\6\3\6\3\6\3"+
		"\6\5\6\u019a\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u01a3\n\6\3\6\3\6\3\6"+
		"\3\6\3\6\5\6\u01aa\n\6\3\6\3\6\3\6\3\6\5\6\u01b0\n\6\3\6\3\6\5\6\u01b4"+
		"\n\6\3\7\3\7\7\7\u01b8\n\7\f\7\16\7\u01bb\13\7\3\7\3\7\5\7\u01bf\n\7\3"+
		"\7\3\7\7\7\u01c3\n\7\f\7\16\7\u01c6\13\7\3\7\3\7\3\7\3\7\3\7\5\7\u01cd"+
		"\n\7\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f"+
		"\5\f\u01df\n\f\3\r\3\r\5\r\u01e3\n\r\3\r\3\r\3\r\7\r\u01e8\n\r\f\r\16"+
		"\r\u01eb\13\r\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u01f3\n\16\3\16\5\16"+
		"\u01f6\n\16\3\16\3\16\5\16\u01fa\n\16\3\16\5\16\u01fd\n\16\3\16\3\16\5"+
		"\16\u0201\n\16\3\16\3\16\5\16\u0205\n\16\3\16\5\16\u0208\n\16\5\16\u020a"+
		"\n\16\3\17\3\17\3\17\3\17\5\17\u0210\n\17\3\20\3\20\3\21\3\21\3\21\3\21"+
		"\3\21\3\21\3\21\3\21\3\21\5\21\u021d\n\21\3\22\3\22\3\23\3\23\3\24\3\24"+
		"\3\25\3\25\3\26\3\26\3\27\3\27\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33"+
		"\3\33\5\33\u0234\n\33\5\33\u0236\n\33\3\33\3\33\3\33\5\33\u023b\n\33\5"+
		"\33\u023d\n\33\3\34\3\34\3\34\3\34\5\34\u0243\n\34\3\35\3\35\3\36\3\36"+
		"\3\36\3\36\3\36\3\36\5\36\u024d\n\36\3\36\3\36\3\36\3\36\3\36\5\36\u0254"+
		"\n\36\3\36\3\36\3\36\5\36\u0259\n\36\3\37\3\37\3\37\3\37\5\37\u025f\n"+
		"\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3"+
		"\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3"+
		"\37\3\37\6\37\u027e\n\37\r\37\16\37\u027f\3\37\3\37\5\37\u0284\n\37\3"+
		"\37\3\37\3\37\3\37\6\37\u028a\n\37\r\37\16\37\u028b\3\37\3\37\5\37\u0290"+
		"\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u0299\n\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\5\37\u02a1\n\37\3\37\3\37\3\37\5\37\u02a6\n\37\3\37\3"+
		"\37\3\37\3\37\3\37\3\37\5\37\u02ae\n\37\3\37\3\37\3\37\5\37\u02b3\n\37"+
		"\3\37\3\37\3\37\5\37\u02b8\n\37\5\37\u02ba\n\37\3\37\3\37\3\37\3\37\3"+
		"\37\3\37\3\37\5\37\u02c3\n\37\3\37\3\37\3\37\5\37\u02c8\n\37\3\37\3\37"+
		"\3\37\3\37\3\37\3\37\5\37\u02d0\n\37\3\37\3\37\3\37\5\37\u02d5\n\37\3"+
		"\37\3\37\3\37\3\37\3\37\3\37\5\37\u02dd\n\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\5\37\u02e5\n\37\3\37\5\37\u02e8\n\37\3\37\3\37\3\37\3\37\3\37\3"+
		"\37\3\37\3\37\5\37\u02f2\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u0304\n\37\3\37\3\37\3\37"+
		"\3\37\5\37\u030a\n\37\3\37\3\37\5\37\u030e\n\37\3\37\3\37\3\37\3\37\5"+
		"\37\u0314\n\37\3\37\3\37\5\37\u0318\n\37\3\37\3\37\5\37\u031c\n\37\3 "+
		"\3 \3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u0328\n\"\3\"\3\"\3\"\5\"\u032d"+
		"\n\"\3\"\3\"\3\"\3\"\7\"\u0333\n\"\f\"\16\"\u0336\13\"\3#\3#\3#\3#\3#"+
		"\3#\3#\5#\u033f\n#\3$\3$\3$\5$\u0344\n$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u034e"+
		"\n$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u035b\n$\3$\3$\3$\3$\5$\u0361"+
		"\n$\3$\5$\u0364\n$\3$\3$\3$\3$\5$\u036a\n$\3$\3$\3$\3$\3$\3$\3$\3$\3$"+
		"\3$\3$\3$\3$\3$\5$\u037a\n$\3$\3$\3$\3$\5$\u0380\n$\3$\3$\3$\3$\3$\3$"+
		"\3$\7$\u0389\n$\f$\16$\u038c\13$\3%\3%\3&\3&\3\'\5\'\u0393\n\'\3\'\5\'"+
		"\u0396\n\'\3\'\5\'\u0399\n\'\3\'\5\'\u039c\n\'\3\'\5\'\u039f\n\'\3\'\5"+
		"\'\u03a2\n\'\3\'\5\'\u03a5\n\'\3\'\5\'\u03a8\n\'\3\'\5\'\u03ab\n\'\3\'"+
		"\5\'\u03ae\n\'\3\'\5\'\u03b1\n\'\5\'\u03b3\n\'\3(\3(\3(\3(\3(\7(\u03ba"+
		"\n(\f(\16(\u03bd\13(\3(\3(\5(\u03c1\n(\3(\3(\5(\u03c5\n(\3(\3(\3(\3(\7"+
		"(\u03cb\n(\f(\16(\u03ce\13(\5(\u03d0\n(\3)\3)\3)\5)\u03d5\n)\3*\3*\5*"+
		"\u03d9\n*\3*\5*\u03dc\n*\3+\3+\3,\3,\3,\3,\3,\5,\u03e5\n,\3,\3,\3,\5,"+
		"\u03ea\n,\3-\3-\3.\3.\3.\3/\3/\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60"+
		"\3\60\3\60\3\60\3\60\3\60\7\60\u0400\n\60\f\60\16\60\u0403\13\60\3\61"+
		"\3\61\3\62\5\62\u0408\n\62\3\62\5\62\u040b\n\62\3\62\5\62\u040e\n\62\3"+
		"\62\5\62\u0411\n\62\3\63\3\63\3\63\3\63\3\63\7\63\u0418\n\63\f\63\16\63"+
		"\u041b\13\63\3\64\3\64\3\64\3\64\3\64\7\64\u0422\n\64\f\64\16\64\u0425"+
		"\13\64\3\65\3\65\5\65\u0429\n\65\3\66\3\66\3\66\3\67\3\67\38\38\58\u0432"+
		"\n8\39\39\39\39\39\39\39\59\u043b\n9\3:\3:\3:\3:\3:\3;\3;\3;\3;\5;\u0446"+
		"\n;\3;\3;\3;\3;\3;\5;\u044d\n;\3<\3<\3<\5<\u0452\n<\3=\3=\3=\3=\7=\u0458"+
		"\n=\f=\16=\u045b\13=\3=\3=\3=\3=\3=\3=\3=\3=\3=\5=\u0466\n=\3=\3=\6=\u046a"+
		"\n=\r=\16=\u046b\5=\u046e\n=\3=\3=\6=\u0472\n=\r=\16=\u0473\5=\u0476\n"+
		"=\5=\u0478\n=\3>\3>\5>\u047c\n>\3?\3?\3?\3?\5?\u0482\n?\3?\3?\3?\3?\3"+
		"?\3?\5?\u048a\n?\3@\3@\3@\3@\3@\3@\5@\u0492\n@\3A\3A\3A\3A\3A\3A\5A\u049a"+
		"\nA\3B\3B\3B\3B\3B\3B\3B\3B\5B\u04a4\nB\3C\3C\7C\u04a8\nC\fC\16C\u04ab"+
		"\13C\3C\3C\5C\u04af\nC\3C\5C\u04b2\nC\3C\5C\u04b5\nC\3C\5C\u04b8\nC\3"+
		"C\5C\u04bb\nC\3C\5C\u04be\nC\3D\3D\3D\3E\3E\3E\3F\3F\3G\3G\3H\5H\u04cb"+
		"\nH\3H\3H\5H\u04cf\nH\3H\3H\5H\u04d3\nH\3H\3H\5H\u04d7\nH\7H\u04d9\nH"+
		"\fH\16H\u04dc\13H\3I\3I\3I\3I\3I\5I\u04e3\nI\3J\3J\7J\u04e7\nJ\fJ\16J"+
		"\u04ea\13J\3J\3J\3J\7J\u04ef\nJ\fJ\16J\u04f2\13J\3J\3J\5J\u04f6\nJ\3K"+
		"\3K\3K\3K\5K\u04fc\nK\3K\3K\5K\u0500\nK\3K\3K\3K\3K\3K\3K\5K\u0508\nK"+
		"\3K\5K\u050b\nK\3K\3K\3K\7K\u0510\nK\fK\16K\u0513\13K\5K\u0515\nK\3K\3"+
		"K\3K\3K\5K\u051b\nK\3L\3L\3L\3L\3M\5M\u0522\nM\3M\3M\3N\3N\3O\3O\3P\3"+
		"P\3P\7P\u052d\nP\fP\16P\u0530\13P\3Q\3Q\3Q\3Q\5Q\u0536\nQ\3Q\3Q\3Q\3Q"+
		"\3R\3R\3R\3R\3R\5R\u0541\nR\3S\3S\3T\3T\3T\3T\7T\u0549\nT\fT\16T\u054c"+
		"\13T\3U\3U\3U\5U\u0551\nU\3V\5V\u0554\nV\3V\3V\3V\3V\3V\3V\3V\3V\3V\3"+
		"V\3V\3V\5V\u0562\nV\3W\3W\5W\u0566\nW\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3"+
		"W\3W\5W\u0574\nW\3X\3X\3X\5X\u0579\nX\5X\u057b\nX\3X\3X\3X\3X\3X\3Y\3"+
		"Y\3Z\3Z\3Z\5Z\u0587\nZ\3[\5[\u058a\n[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\5"+
		"[\u0596\n[\3\\\3\\\3]\3]\3^\3^\5^\u059e\n^\3^\3^\3^\3^\3^\3^\3^\3^\3^"+
		"\3^\5^\u05aa\n^\3_\3_\3`\3`\3a\3a\3a\5a\u05b3\na\5a\u05b5\na\3a\3a\3a"+
		"\3b\3b\3c\3c\3d\3d\5d\u05c0\nd\3d\3d\5d\u05c4\nd\3e\3e\3e\3e\3e\3e\3e"+
		"\3e\5e\u05ce\ne\3f\3f\5f\u05d2\nf\3f\3f\3g\3g\3g\7g\u05d9\ng\fg\16g\u05dc"+
		"\13g\3h\5h\u05df\nh\3h\3h\3i\3i\3i\3i\3i\3i\3i\3i\3i\3i\3i\3i\3i\3i\5"+
		"i\u05f1\ni\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\7j\u0601\nj\fj\16"+
		"j\u0604\13j\3j\3j\3j\3j\3j\3j\3j\6j\u060d\nj\rj\16j\u060e\3j\3j\3j\3j"+
		"\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\5j\u0620\nj\3j\3j\3j\3j\3j\3j\3j\3j"+
		"\3j\3j\3j\3j\3j\3j\3j\7j\u0631\nj\fj\16j\u0634\13j\3k\3k\3k\3k\3k\3k\3"+
		"k\3k\3k\5k\u063f\nk\3k\5k\u0642\nk\3l\5l\u0645\nl\3l\3l\5l\u0649\nl\3"+
		"l\6l\u064c\nl\rl\16l\u064d\3l\5l\u0651\nl\3l\3l\5l\u0655\nl\3l\3l\5l\u0659"+
		"\nl\5l\u065b\nl\3m\3m\5m\u065f\nm\3n\3n\3o\5o\u0664\no\3o\3o\3p\3p\3q"+
		"\3q\3r\3r\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\5s\u067b\ns\3t\3t\3t"+
		"\3t\3t\3t\3t\5t\u0684\nt\3u\3u\3v\3v\3v\3v\3v\5v\u068d\nv\3w\3w\5w\u0691"+
		"\nw\3w\3w\5w\u0695\nw\3w\3w\3w\5w\u069a\nw\3w\5w\u069d\nw\3w\3w\3w\5w"+
		"\u06a2\nw\3w\3w\5w\u06a6\nw\3w\3w\5w\u06aa\nw\3x\3x\3x\3x\3y\3y\3y\3y"+
		"\5y\u06b4\ny\3z\3z\3z\3z\3z\3z\3{\3{\3{\3{\3{\3|\3|\3|\3|\5|\u06c5\n|"+
		"\3|\3|\3|\3|\3|\5|\u06cc\n|\7|\u06ce\n|\f|\16|\u06d1\13|\3}\3}\3}\3}\7"+
		"}\u06d7\n}\f}\16}\u06da\13}\3}\3}\3}\3}\3}\5}\u06e1\n}\3~\3~\5~\u06e5"+
		"\n~\3\177\3\177\5\177\u06e9\n\177\3\177\3\177\3\177\3\177\3\177\3\177"+
		"\5\177\u06f1\n\177\3\177\3\177\3\177\5\177\u06f6\n\177\3\u0080\3\u0080"+
		"\3\u0080\5\u0080\u06fb\n\u0080\3\u0080\3\u0080\5\u0080\u06ff\n\u0080\3"+
		"\u0080\3\u0080\3\u0080\5\u0080\u0704\n\u0080\3\u0080\3\u0080\5\u0080\u0708"+
		"\n\u0080\3\u0081\5\u0081\u070b\n\u0081\3\u0081\3\u0081\5\u0081\u070f\n"+
		"\u0081\3\u0081\3\u0081\5\u0081\u0713\n\u0081\3\u0081\3\u0081\3\u0081\5"+
		"\u0081\u0718\n\u0081\3\u0081\5\u0081\u071b\n\u0081\3\u0081\3\u0081\5\u0081"+
		"\u071f\n\u0081\3\u0081\3\u0081\3\u0081\5\u0081\u0724\n\u0081\3\u0081\3"+
		"\u0081\3\u0081\3\u0081\5\u0081\u072a\n\u0081\3\u0081\3\u0081\5\u0081\u072e"+
		"\n\u0081\3\u0081\3\u0081\3\u0081\5\u0081\u0733\n\u0081\3\u0081\3\u0081"+
		"\3\u0081\5\u0081\u0738\n\u0081\3\u0081\3\u0081\3\u0081\5\u0081\u073d\n"+
		"\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\7\u0081\u0745\n"+
		"\u0081\f\u0081\16\u0081\u0748\13\u0081\5\u0081\u074a\n\u0081\3\u0081\3"+
		"\u0081\5\u0081\u074e\n\u0081\3\u0081\3\u0081\5\u0081\u0752\n\u0081\3\u0082"+
		"\3\u0082\3\u0083\3\u0083\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084\u075c"+
		"\n\u0084\3\u0085\3\u0085\3\u0085\5\u0085\u0761\n\u0085\3\u0085\3\u0085"+
		"\3\u0085\5\u0085\u0766\n\u0085\3\u0086\3\u0086\3\u0087\3\u0087\3\u0088"+
		"\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088\u0771\n\u0088\3\u0088\3\u0088"+
		"\5\u0088\u0775\n\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088"+
		"\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088"+
		"\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088"+
		"\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088\u0793\n\u0088\3\u0089\3\u0089"+
		"\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\3\u0089\3\u0089\3\u0089\5\u0089\u07ac\n\u0089\3\u008a\3\u008a\3\u008a"+
		"\3\u008a\3\u008a\3\u008b\3\u008b\3\u008c\3\u008c\3\u008d\3\u008d\3\u008e"+
		"\3\u008e\3\u008f\3\u008f\3\u008f\2\5BF\u00d2\u0090\2\4\6\b\n\f\16\20\22"+
		"\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnp"+
		"rtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094"+
		"\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac"+
		"\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4"+
		"\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc"+
		"\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4"+
		"\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c"+
		"\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\2:\4\2\60\60YY\5\2\b"+
		"\20nn\u00ba\u00ba\3\2$%\4\2\60\60YZ\3\2\u0278\u0279\4\2\u0101\u0101\u02e7"+
		"\u030f\3\2\u031c\u031f\6\2\u0192\u0192\u0310\u031b\u0475\u0475\u047d\u047e"+
		"\3\2\u02be\u02c6\3\2\u02b6\u02bd\5\2\u00f8\u00fc\u0109\u0109\u010c\u010c"+
		" \2\36\36LLXXbbpp\u0098\u0098\u009e\u009e\u00c8\u00c8\u010e\u010e\u013a"+
		"\u013e\u0142\u0142\u0146\u0147\u014d\u0154\u0168\u01c7\u01c9\u01de\u01e0"+
		"\u0239\u023b\u0259\u025b\u0282\u0284\u028d\u028f\u0296\u0298\u02a5\u02a8"+
		"\u02a9\u02ab\u02b5\u02c8\u02d0\u02d5\u02d6\u02d8\u02de\u02e0\u02e6\u0315"+
		"\u0315\u0341\u0341\u03e7\u03e7\24\2OO\u0086\u0086\u00b6\u00b6\u00b8\u00b8"+
		"\u00f8\u00fa\u00fc\u00fc\u011a\u0139\u013e\u013e\u0160\u0160\u01df\u01df"+
		"\u02a7\u02a7\u02b6\u02bd\u02e0\u02e0\u0320\u0320\u0323\u0340\u0342\u03e6"+
		"\u03e8\u044c\u045c\u045c\4\2\36\36\u0465\u0465\4\2MM\u0155\u0158\3\2\u0161"+
		"\u0162\5\2::\u0084\u0084\u00cf\u00cf\4\2\u00fd\u00fd\u0101\u0101\4\2\u00f8"+
		"\u00f9\u00fb\u00fb\5\2&\'*+\u0466\u0466\5\2(),-\u0467\u0467\4\2\u0095"+
		"\u0095\u0460\u0460\5\2ff\u00d1\u00d1\u029c\u029c\4\2\u00ab\u00ab\u00b7"+
		"\u00b7\5\2\60\60\u016d\u016d\u0270\u0270\4\2\37\37\u00cd\u00cd\4\2\67"+
		"\67UU\3\2\"#\4\2\64\64\u0468\u0468\4\2\u00a7\u00a7\u0261\u0261\4\2\u01c8"+
		"\u01c8\u023a\u023a\4\2\u0188\u0188\u01c2\u01c2\5\2\21\24kkvv\5\2iiuu\u00d9"+
		"\u00d9\4\2ww\u0081\u0081\4\2\25\34\u0080\u0080\4\2\35\35\u00df\u00df\4"+
		"\2KKyy\4\2\u0086\u0086\u00b6\u00b6\4\2\u0097\u0097\u0479\u0479\5\2\u046b"+
		"\u046d\u0476\u0476\u0478\u0478\4\2ff\u00d1\u00d1\3\2\u0481\u0482\5\2\u0095"+
		"\u0095\u0459\u045a\u0460\u0461\3\2\u0456\u045c\4\2\u0101\u0101\u021a\u021a"+
		"\5\2\u00f8\u00f9\u00fb\u00fb\u01e6\u01e6\4\2\u00d6\u00d6\u026a\u026a\5"+
		"\2\67\67UU\u03dd\u03dd\4\2\u0157\u0158\u015e\u015e\5\2\u013a\u013a\u0146"+
		"\u0147\u0151\u0151\5\2\u013b\u013d\u014d\u0150\u0152\u0154\4\2\u0143\u0143"+
		"\u0145\u0145\4\2\u0141\u0141\u0144\u0144\4\2\u013f\u0140\u014a\u014c\4"+
		"\2\u0225\u0225\u0233\u0233\2\u08c0\2\u011e\3\2\2\2\4\u0159\3\2\2\2\6\u0173"+
		"\3\2\2\2\b\u0193\3\2\2\2\n\u01b3\3\2\2\2\f\u01cc\3\2\2\2\16\u01ce\3\2"+
		"\2\2\20\u01d0\3\2\2\2\22\u01d2\3\2\2\2\24\u01d4\3\2\2\2\26\u01de\3\2\2"+
		"\2\30\u01e2\3\2\2\2\32\u0209\3\2\2\2\34\u020b\3\2\2\2\36\u0211\3\2\2\2"+
		" \u021c\3\2\2\2\"\u021e\3\2\2\2$\u0220\3\2\2\2&\u0222\3\2\2\2(\u0224\3"+
		"\2\2\2*\u0226\3\2\2\2,\u0228\3\2\2\2.\u022a\3\2\2\2\60\u022c\3\2\2\2\62"+
		"\u022e\3\2\2\2\64\u023c\3\2\2\2\66\u0242\3\2\2\28\u0244\3\2\2\2:\u0258"+
		"\3\2\2\2<\u031b\3\2\2\2>\u031d\3\2\2\2@\u031f\3\2\2\2B\u032c\3\2\2\2D"+
		"\u033e\3\2\2\2F\u0340\3\2\2\2H\u038d\3\2\2\2J\u038f\3\2\2\2L\u03b2\3\2"+
		"\2\2N\u03b4\3\2\2\2P\u03d4\3\2\2\2R\u03db\3\2\2\2T\u03dd\3\2\2\2V\u03e9"+
		"\3\2\2\2X\u03eb\3\2\2\2Z\u03ed\3\2\2\2\\\u03f0\3\2\2\2^\u03f2\3\2\2\2"+
		"`\u0404\3\2\2\2b\u0407\3\2\2\2d\u0412\3\2\2\2f\u041c\3\2\2\2h\u0426\3"+
		"\2\2\2j\u042a\3\2\2\2l\u042d\3\2\2\2n\u0431\3\2\2\2p\u043a\3\2\2\2r\u043c"+
		"\3\2\2\2t\u0441\3\2\2\2v\u0451\3\2\2\2x\u0477\3\2\2\2z\u047b\3\2\2\2|"+
		"\u0489\3\2\2\2~\u0491\3\2\2\2\u0080\u0499\3\2\2\2\u0082\u04a3\3\2\2\2"+
		"\u0084\u04a5\3\2\2\2\u0086\u04bf\3\2\2\2\u0088\u04c2\3\2\2\2\u008a\u04c5"+
		"\3\2\2\2\u008c\u04c7\3\2\2\2\u008e\u04ca\3\2\2\2\u0090\u04e2\3\2\2\2\u0092"+
		"\u04f5\3\2\2\2\u0094\u051a\3\2\2\2\u0096\u051c\3\2\2\2\u0098\u0521\3\2"+
		"\2\2\u009a\u0525\3\2\2\2\u009c\u0527\3\2\2\2\u009e\u0529\3\2\2\2\u00a0"+
		"\u0531\3\2\2\2\u00a2\u0540\3\2\2\2\u00a4\u0542\3\2\2\2\u00a6\u0544\3\2"+
		"\2\2\u00a8\u0550\3\2\2\2\u00aa\u0553\3\2\2\2\u00ac\u0563\3\2\2\2\u00ae"+
		"\u0575\3\2\2\2\u00b0\u0581\3\2\2\2\u00b2\u0586\3\2\2\2\u00b4\u0589\3\2"+
		"\2\2\u00b6\u0597\3\2\2\2\u00b8\u0599\3\2\2\2\u00ba\u059b\3\2\2\2\u00bc"+
		"\u05ab\3\2\2\2\u00be\u05ad\3\2\2\2\u00c0\u05af\3\2\2\2\u00c2\u05b9\3\2"+
		"\2\2\u00c4\u05bb\3\2\2\2\u00c6\u05bd\3\2\2\2\u00c8\u05cd\3\2\2\2\u00ca"+
		"\u05cf\3\2\2\2\u00cc\u05d5\3\2\2\2\u00ce\u05de\3\2\2\2\u00d0\u05f0\3\2"+
		"\2\2\u00d2\u061f\3\2\2\2\u00d4\u0641\3\2\2\2\u00d6\u065a\3\2\2\2\u00d8"+
		"\u065e\3\2\2\2\u00da\u0660\3\2\2\2\u00dc\u0663\3\2\2\2\u00de\u0667\3\2"+
		"\2\2\u00e0\u0669\3\2\2\2\u00e2\u066b\3\2\2\2\u00e4\u067a\3\2\2\2\u00e6"+
		"\u0683\3\2\2\2\u00e8\u0685\3\2\2\2\u00ea\u068c\3\2\2\2\u00ec\u06a9\3\2"+
		"\2\2\u00ee\u06ab\3\2\2\2\u00f0\u06b3\3\2\2\2\u00f2\u06b5\3\2\2\2\u00f4"+
		"\u06bb\3\2\2\2\u00f6\u06c4\3\2\2\2\u00f8\u06e0\3\2\2\2\u00fa\u06e2\3\2"+
		"\2\2\u00fc\u06f0\3\2\2\2\u00fe\u0707\3\2\2\2\u0100\u0751\3\2\2\2\u0102"+
		"\u0753\3\2\2\2\u0104\u0755\3\2\2\2\u0106\u075b\3\2\2\2\u0108\u075d\3\2"+
		"\2\2\u010a\u0767\3\2\2\2\u010c\u0769\3\2\2\2\u010e\u0792\3\2\2\2\u0110"+
		"\u07ab\3\2\2\2\u0112\u07ad\3\2\2\2\u0114\u07b2\3\2\2\2\u0116\u07b4\3\2"+
		"\2\2\u0118\u07b6\3\2\2\2\u011a\u07b8\3\2\2\2\u011c\u07ba\3\2\2\2\u011e"+
		"\u0120\5\4\3\2\u011f\u0121\7\7\2\2\u0120\u011f\3\2\2\2\u0120\u0121\3\2"+
		"\2\2\u0121\3\3\2\2\2\u0122\u0124\5\6\4\2\u0123\u0125\5\u0080A\2\u0124"+
		"\u0123\3\2\2\2\u0124\u0125\3\2\2\2\u0125\u015a\3\2\2\2\u0126\u0128\5\u0082"+
		"B\2\u0127\u0129\5\u0080A\2\u0128\u0127\3\2\2\2\u0128\u0129\3\2\2\2\u0129"+
		"\u015a\3\2\2\2\u012a\u012c\5\u0084C\2\u012b\u012d\5\u00c6d\2\u012c\u012b"+
		"\3\2\2\2\u012d\u012e\3\2\2\2\u012e\u012c\3\2\2\2\u012e\u012f\3\2\2\2\u012f"+
		"\u0138\3\2\2\2\u0130\u0132\7\u00d3\2\2\u0131\u0133\t\2\2\2\u0132\u0131"+
		"\3\2\2\2\u0132\u0133\3\2\2\2\u0133\u0136\3\2\2\2\u0134\u0137\5\6\4\2\u0135"+
		"\u0137\5\u0082B\2\u0136\u0134\3\2\2\2\u0136\u0135\3\2\2\2\u0137\u0139"+
		"\3\2\2\2\u0138\u0130\3\2\2\2\u0138\u0139\3\2\2\2\u0139\u013b\3\2\2\2\u013a"+
		"\u013c\5f\64\2\u013b\u013a\3\2\2\2\u013b\u013c\3\2\2\2\u013c\u013e\3\2"+
		"\2\2\u013d\u013f\5t;\2\u013e\u013d\3\2\2\2\u013e\u013f\3\2\2\2\u013f\u0141"+
		"\3\2\2\2\u0140\u0142\5\u0080A\2\u0141\u0140\3\2\2\2\u0141\u0142\3\2\2"+
		"\2\u0142\u015a\3\2\2\2\u0143\u0145\5\u00c8e\2\u0144\u0146\5\u00caf\2\u0145"+
		"\u0144\3\2\2\2\u0146\u0147\3\2\2\2\u0147\u0145\3\2\2\2\u0147\u0148\3\2"+
		"\2\2\u0148\u014e\3\2\2\2\u0149\u014b\7\u00d3\2\2\u014a\u014c\t\2\2\2\u014b"+
		"\u014a\3\2\2\2\u014b\u014c\3\2\2\2\u014c\u014d\3\2\2\2\u014d\u014f\5\u0082"+
		"B\2\u014e\u0149\3\2\2\2\u014e\u014f\3\2\2\2\u014f\u0151\3\2\2\2\u0150"+
		"\u0152\5f\64\2\u0151\u0150\3\2\2\2\u0151\u0152\3\2\2\2\u0152\u0154\3\2"+
		"\2\2\u0153\u0155\5t;\2\u0154\u0153\3\2\2\2\u0154\u0155\3\2\2\2\u0155\u0157"+
		"\3\2\2\2\u0156\u0158\5\u0080A\2\u0157\u0156\3\2\2\2\u0157\u0158\3\2\2"+
		"\2\u0158\u015a\3\2\2\2\u0159\u0122\3\2\2\2\u0159\u0126\3\2\2\2\u0159\u012a"+
		"\3\2\2\2\u0159\u0143\3\2\2\2\u015a\5\3\2\2\2\u015b\u015c\5\b\5\2\u015c"+
		"\u015d\5L\'\2\u015d\u0174\3\2\2\2\u015e\u015f\5\u00a6T\2\u015f\u0160\5"+
		"J&\2\u0160\u0162\3\2\2\2\u0161\u015e\3\2\2\2\u0161\u0162\3\2\2\2\u0162"+
		"\u0163\3\2\2\2\u0163\u016b\5\n\6\2\u0164\u0167\5J&\2\u0165\u0168\5\n\6"+
		"\2\u0166\u0168\5\u00a6T\2\u0167\u0165\3\2\2\2\u0167\u0166\3\2\2\2\u0168"+
		"\u016a\3\2\2\2\u0169\u0164\3\2\2\2\u016a\u016d\3\2\2\2\u016b\u0169\3\2"+
		"\2\2\u016b\u016c\3\2\2\2\u016c\u0171\3\2\2\2\u016d\u016b\3\2\2\2\u016e"+
		"\u016f\5J&\2\u016f\u0170\5L\'\2\u0170\u0172\3\2\2\2\u0171\u016e\3\2\2"+
		"\2\u0171\u0172\3\2\2\2\u0172\u0174\3\2\2\2\u0173\u015b\3\2\2\2\u0173\u0161"+
		"\3\2\2\2\u0174\7\3\2\2\2\u0175\u0179\5\f\7\2\u0176\u0177\5\u0116\u008c"+
		"\2\u0177\u0178\5\u0118\u008d\2\u0178\u017a\3\2\2\2\u0179\u0176\3\2\2\2"+
		"\u0179\u017a\3\2\2\2\u017a\u017b\3\2\2\2\u017b\u017c\5\u011c\u008f\2\u017c"+
		"\u0194\3\2\2\2\u017d\u017e\5\f\7\2\u017e\u0182\5\u011c\u008f\2\u017f\u0180"+
		"\5\u0116\u008c\2\u0180\u0181\5\u0118\u008d\2\u0181\u0183\3\2\2\2\u0182"+
		"\u017f\3\2\2\2\u0182\u0183\3\2\2\2\u0183\u0194\3\2\2\2\u0184\u0185\5\u011c"+
		"\u008f\2\u0185\u0189\5\f\7\2\u0186\u0187\5\u0116\u008c\2\u0187\u0188\5"+
		"\u0118\u008d\2\u0188\u018a\3\2\2\2\u0189\u0186\3\2\2\2\u0189\u018a\3\2"+
		"\2\2\u018a\u0194\3\2\2\2\u018b\u018f\5\u011c\u008f\2\u018c\u018d\5\u0116"+
		"\u008c\2\u018d\u018e\5\u0118\u008d\2\u018e\u0190\3\2\2\2\u018f\u018c\3"+
		"\2\2\2\u018f\u0190\3\2\2\2\u0190\u0191\3\2\2\2\u0191\u0192\5\f\7\2\u0192"+
		"\u0194\3\2\2\2\u0193\u0175\3\2\2\2\u0193\u017d\3\2\2\2\u0193\u0184\3\2"+
		"\2\2\u0193\u018b\3\2\2\2\u0194\t\3\2\2\2\u0195\u0199\5\f\7\2\u0196\u0197"+
		"\5\u0116\u008c\2\u0197\u0198\5\u0118\u008d\2\u0198\u019a\3\2\2\2\u0199"+
		"\u0196\3\2\2\2\u0199\u019a\3\2\2\2\u019a\u019b\3\2\2\2\u019b\u019c\5\u011a"+
		"\u008e\2\u019c\u01b4\3\2\2\2\u019d\u019e\5\f\7\2\u019e\u01a2\5\u011a\u008e"+
		"\2\u019f\u01a0\5\u0116\u008c\2\u01a0\u01a1\5\u0118\u008d\2\u01a1\u01a3"+
		"\3\2\2\2\u01a2\u019f\3\2\2\2\u01a2\u01a3\3\2\2\2\u01a3\u01b4\3\2\2\2\u01a4"+
		"\u01a5\5\u011a\u008e\2\u01a5\u01a9\5\f\7\2\u01a6\u01a7\5\u0116\u008c\2"+
		"\u01a7\u01a8\5\u0118\u008d\2\u01a8\u01aa\3\2\2\2\u01a9\u01a6\3\2\2\2\u01a9"+
		"\u01aa\3\2\2\2\u01aa\u01b4\3\2\2\2\u01ab\u01af\5\u011a\u008e\2\u01ac\u01ad"+
		"\5\u0116\u008c\2\u01ad\u01ae\5\u0118\u008d\2\u01ae\u01b0\3\2\2\2\u01af"+
		"\u01ac\3\2\2\2\u01af\u01b0\3\2\2\2\u01b0\u01b1\3\2\2\2\u01b1\u01b2\5\f"+
		"\7\2\u01b2\u01b4\3\2\2\2\u01b3\u0195\3\2\2\2\u01b3\u019d\3\2\2\2\u01b3"+
		"\u01a4\3\2\2\2\u01b3\u01ab\3\2\2\2\u01b4\13\3\2\2\2\u01b5\u01b9\5\16\b"+
		"\2\u01b6\u01b8\5\26\f\2\u01b7\u01b6\3\2\2\2\u01b8\u01bb\3\2\2\2\u01b9"+
		"\u01b7\3\2\2\2\u01b9\u01ba\3\2\2\2\u01ba\u01bc\3\2\2\2\u01bb\u01b9\3\2"+
		"\2\2\u01bc\u01be\5\30\r\2\u01bd\u01bf\5x=\2\u01be\u01bd\3\2\2\2\u01be"+
		"\u01bf\3\2\2\2\u01bf\u01cd\3\2\2\2\u01c0\u01c4\5\16\b\2\u01c1\u01c3\5"+
		"\26\f\2\u01c2\u01c1\3\2\2\2\u01c3\u01c6\3\2\2\2\u01c4\u01c2\3\2\2\2\u01c4"+
		"\u01c5\3\2\2\2\u01c5\u01c7\3\2\2\2\u01c6\u01c4\3\2\2\2\u01c7\u01c8\5\30"+
		"\r\2\u01c8\u01cd\3\2\2\2\u01c9\u01ca\5\16\b\2\u01ca\u01cb\5\22\n\2\u01cb"+
		"\u01cd\3\2\2\2\u01cc\u01b5\3\2\2\2\u01cc\u01c0\3\2\2\2\u01cc\u01c9\3\2"+
		"\2\2\u01cd\r\3\2\2\2\u01ce\u01cf\5\20\t\2\u01cf\17\3\2\2\2\u01d0\u01d1"+
		"\t\3\2\2\u01d1\21\3\2\2\2\u01d2\u01d3\5\24\13\2\u01d3\23\3\2\2\2\u01d4"+
		"\u01d5\t\4\2\2\u01d5\25\3\2\2\2\u01d6\u01df\t\5\2\2\u01d7\u01df\7r\2\2"+
		"\u01d8\u01df\7\u00ca\2\2\u01d9\u01df\7\u00c6\2\2\u01da\u01df\7\u00c4\2"+
		"\2\u01db\u01df\7\u0277\2\2\u01dc\u01df\t\6\2\2\u01dd\u01df\7\u00c5\2\2"+
		"\u01de\u01d6\3\2\2\2\u01de\u01d7\3\2\2\2\u01de\u01d8\3\2\2\2\u01de\u01d9"+
		"\3\2\2\2\u01de\u01da\3\2\2\2\u01de\u01db\3\2\2\2\u01de\u01dc\3\2\2\2\u01de"+
		"\u01dd\3\2\2\2\u01df\27\3\2\2\2\u01e0\u01e3\7\u0456\2\2\u01e1\u01e3\5"+
		"\32\16\2\u01e2\u01e0\3\2\2\2\u01e2\u01e1\3\2\2\2\u01e3\u01e9\3\2\2\2\u01e4"+
		"\u01e5\5\u0114\u008b\2\u01e5\u01e6\5\32\16\2\u01e6\u01e8\3\2\2\2\u01e7"+
		"\u01e4\3\2\2\2\u01e8\u01eb\3\2\2\2\u01e9\u01e7\3\2\2\2\u01e9\u01ea\3\2"+
		"\2\2\u01ea\31\3\2\2\2\u01eb\u01e9\3\2\2\2\u01ec\u01ed\5\34\17\2\u01ed"+
		"\u01ee\5\62\32\2\u01ee\u01ef\7\u0456\2\2\u01ef\u020a\3\2\2\2\u01f0\u01f5"+
		"\5\64\33\2\u01f1\u01f3\58\35\2\u01f2\u01f1\3\2\2\2\u01f2\u01f3\3\2\2\2"+
		"\u01f3\u01f4\3\2\2\2\u01f4\u01f6\5\36\20\2\u01f5\u01f2\3\2\2\2\u01f5\u01f6"+
		"\3\2\2\2\u01f6\u020a\3\2\2\2\u01f7\u01fc\5:\36\2\u01f8\u01fa\58\35\2\u01f9"+
		"\u01f8\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa\u01fb\3\2\2\2\u01fb\u01fd\5\36"+
		"\20\2\u01fc\u01f9\3\2\2\2\u01fc\u01fd\3\2\2\2\u01fd\u020a\3\2\2\2\u01fe"+
		"\u01ff\7\u0481\2\2\u01ff\u0201\7\u044d\2\2\u0200\u01fe\3\2\2\2\u0200\u0201"+
		"\3\2\2\2\u0201\u0202\3\2\2\2\u0202\u0207\5B\"\2\u0203\u0205\58\35\2\u0204"+
		"\u0203\3\2\2\2\u0204\u0205\3\2\2\2\u0205\u0206\3\2\2\2\u0206\u0208\5\36"+
		"\20\2\u0207\u0204\3\2\2\2\u0207\u0208\3\2\2\2\u0208\u020a\3\2\2\2\u0209"+
		"\u01ec\3\2\2\2\u0209\u01f0\3\2\2\2\u0209\u01f7\3\2\2\2\u0209\u0200\3\2"+
		"\2\2\u020a\33\3\2\2\2\u020b\u020f\5\36\20\2\u020c\u0210\7\u047c\2\2\u020d"+
		"\u020e\7\u0465\2\2\u020e\u0210\5\36\20\2\u020f\u020c\3\2\2\2\u020f\u020d"+
		"\3\2\2\2\u020f\u0210\3\2\2\2\u0210\35\3\2\2\2\u0211\u0212\5 \21\2\u0212"+
		"\37\3\2\2\2\u0213\u021d\7\u047d\2\2\u0214\u021d\5\"\22\2\u0215\u021d\5"+
		"$\23\2\u0216\u021d\5&\24\2\u0217\u021d\5(\25\2\u0218\u021d\5*\26\2\u0219"+
		"\u021d\5,\27\2\u021a\u021d\5.\30\2\u021b\u021d\5\60\31\2\u021c\u0213\3"+
		"\2\2\2\u021c\u0214\3\2\2\2\u021c\u0215\3\2\2\2\u021c\u0216\3\2\2\2\u021c"+
		"\u0217\3\2\2\2\u021c\u0218\3\2\2\2\u021c\u0219\3\2\2\2\u021c\u021a\3\2"+
		"\2\2\u021c\u021b\3\2\2\2\u021d!\3\2\2\2\u021e\u021f\t\7\2\2\u021f#\3\2"+
		"\2\2\u0220\u0221\t\b\2\2\u0221%\3\2\2\2\u0222\u0223\t\t\2\2\u0223\'\3"+
		"\2\2\2\u0224\u0225\t\n\2\2\u0225)\3\2\2\2\u0226\u0227\t\13\2\2\u0227+"+
		"\3\2\2\2\u0228\u0229\t\f\2\2\u0229-\3\2\2\2\u022a\u022b\t\r\2\2\u022b"+
		"/\3\2\2\2\u022c\u022d\t\16\2\2\u022d\61\3\2\2\2\u022e\u022f\t\17\2\2\u022f"+
		"\63\3\2\2\2\u0230\u0235\5\36\20\2\u0231\u0233\5\66\34\2\u0232\u0234\5"+
		"\66\34\2\u0233\u0232\3\2\2\2\u0233\u0234\3\2\2\2\u0234\u0236\3\2\2\2\u0235"+
		"\u0231\3\2\2\2\u0235\u0236\3\2\2\2\u0236\u023d\3\2\2\2\u0237\u0238\5\62"+
		"\32\2\u0238\u023a\5\66\34\2\u0239\u023b\5\66\34\2\u023a\u0239\3\2\2\2"+
		"\u023a\u023b\3\2\2\2\u023b\u023d\3\2\2\2\u023c\u0230\3\2\2\2\u023c\u0237"+
		"\3\2\2\2\u023d\65\3\2\2\2\u023e\u0243\7\u047c\2\2\u023f\u0240\5\62\32"+
		"\2\u0240\u0241\5\36\20\2\u0241\u0243\3\2\2\2\u0242\u023e\3\2\2\2\u0242"+
		"\u023f\3\2\2\2\u0243\67\3\2\2\2\u0244\u0245\7\66\2\2\u02459\3\2\2\2\u0246"+
		"\u0259\5<\37\2\u0247\u0259\5\u0100\u0081\2\u0248\u0259\5\u010e\u0088\2"+
		"\u0249\u024a\5\u0110\u0089\2\u024a\u024c\5> \2\u024b\u024d\5\u00f6|\2"+
		"\u024c\u024b\3\2\2\2\u024c\u024d\3\2\2\2\u024d\u024e\3\2\2\2\u024e\u024f"+
		"\5@!\2\u024f\u0259\3\2\2\2\u0250\u0251\5\34\17\2\u0251\u0253\5> \2\u0252"+
		"\u0254\5\u00f6|\2\u0253\u0252\3\2\2\2\u0253\u0254\3\2\2\2\u0254\u0255"+
		"\3\2\2\2\u0255\u0256\5@!\2\u0256\u0259\3\2\2\2\u0257\u0259\5\u0112\u008a"+
		"\2\u0258\u0246\3\2\2\2\u0258\u0247\3\2\2\2\u0258\u0248\3\2\2\2\u0258\u0249"+
		"\3\2\2\2\u0258\u0250\3\2\2\2\u0258\u0257\3\2\2\2\u0259;\3\2\2\2\u025a"+
		"\u025e\t\20\2\2\u025b\u025c\5> \2\u025c\u025d\5@!\2\u025d\u025f\3\2\2"+
		"\2\u025e\u025b\3\2\2\2\u025e\u025f\3\2\2\2\u025f\u031c\3\2\2\2\u0260\u0261"+
		"\7I\2\2\u0261\u0262\5> \2\u0262\u0263\5B\"\2\u0263\u0264\7\u0468\2\2\u0264"+
		"\u0265\5\u00ecw\2\u0265\u0266\5@!\2\u0266\u031c\3\2\2\2\u0267\u0268\7"+
		"I\2\2\u0268\u0269\5> \2\u0269\u026a\5B\"\2\u026a\u026b\7\u00da\2\2\u026b"+
		"\u026c\5\u00f0y\2\u026c\u026d\5@!\2\u026d\u031c\3\2\2\2\u026e\u026f\7"+
		"@\2\2\u026f\u0270\5> \2\u0270\u0271\5B\"\2\u0271\u0272\7\66\2\2\u0272"+
		"\u0273\5\u00ecw\2\u0273\u0274\5@!\2\u0274\u031c\3\2\2\2\u0275\u0276\7"+
		"\u00db\2\2\u0276\u0277\5> \2\u0277\u0278\5\64\33\2\u0278\u0279\5@!\2\u0279"+
		"\u031c\3\2\2\2\u027a\u027b\7?\2\2\u027b\u027d\5B\"\2\u027c\u027e\5\u00f4"+
		"{\2\u027d\u027c\3\2\2\2\u027e\u027f\3\2\2\2\u027f\u027d\3\2\2\2\u027f"+
		"\u0280\3\2\2\2\u0280\u0283\3\2\2\2\u0281\u0282\7]\2\2\u0282\u0284\5\u0106"+
		"\u0084\2\u0283\u0281\3\2\2\2\u0283\u0284\3\2\2\2\u0284\u0285\3\2\2\2\u0285"+
		"\u0286\7\u01af\2\2\u0286\u031c\3\2\2\2\u0287\u0289\7?\2\2\u0288\u028a"+
		"\5\u00f4{\2\u0289\u0288\3\2\2\2\u028a\u028b\3\2\2\2\u028b\u0289\3\2\2"+
		"\2\u028b\u028c\3\2\2\2\u028c\u028f\3\2\2\2\u028d\u028e\7]\2\2\u028e\u0290"+
		"\5\u0106\u0084\2\u028f\u028d\3\2\2\2\u028f\u0290\3\2\2\2\u0290\u0291\3"+
		"\2\2\2\u0291\u0292\7\u01af\2\2\u0292\u031c\3\2\2\2\u0293\u0294\7\u00fd"+
		"\2\2\u0294\u0295\5> \2\u0295\u0298\5\u00f6|\2\u0296\u0297\7\u00da\2\2"+
		"\u0297\u0299\5\u00f0y\2\u0298\u0296\3\2\2\2\u0298\u0299\3\2\2\2\u0299"+
		"\u029a\3\2\2\2\u029a\u029b\5@!\2\u029b\u031c\3\2\2\2\u029c\u029d\7\u0160"+
		"\2\2\u029d\u02a0\5> \2\u029e\u02a1\5\u00d6l\2\u029f\u02a1\5B\"\2\u02a0"+
		"\u029e\3\2\2\2\u02a0\u029f\3\2\2\2\u02a1\u02a2\3\2\2\2\u02a2\u02a5\7v"+
		"\2\2\u02a3\u02a6\5\u00d6l\2\u02a4\u02a6\5B\"\2\u02a5\u02a3\3\2\2\2\u02a5"+
		"\u02a4\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7\u02a8\5@!\2\u02a8\u031c\3\2\2"+
		"\2\u02a9\u02aa\t\21\2\2\u02aa\u02ad\5> \2\u02ab\u02ae\5\u00d6l\2\u02ac"+
		"\u02ae\5B\"\2\u02ad\u02ab\3\2\2\2\u02ad\u02ac\3\2\2\2\u02ae\u02af\3\2"+
		"\2\2\u02af\u02b2\7k\2\2\u02b0\u02b3\5\u00dan\2\u02b1\u02b3\5B\"\2\u02b2"+
		"\u02b0\3\2\2\2\u02b2\u02b1\3\2\2\2\u02b3\u02b9\3\2\2\2\u02b4\u02b7\7h"+
		"\2\2\u02b5\u02b8\5\u00dan\2\u02b6\u02b8\5B\"\2\u02b7\u02b5\3\2\2\2\u02b7"+
		"\u02b6\3\2\2\2\u02b8\u02ba\3\2\2\2\u02b9\u02b4\3\2\2\2\u02b9\u02ba\3\2"+
		"\2\2\u02ba\u02bb\3\2\2\2\u02bb\u02bc\5@!\2\u02bc\u031c\3\2\2\2\u02bd\u02be"+
		"\7\u0164\2\2\u02be\u02bf\5> \2\u02bf\u02c2\t\22\2\2\u02c0\u02c3\5\u00d6"+
		"l\2\u02c1\u02c3\5B\"\2\u02c2\u02c0\3\2\2\2\u02c2\u02c1\3\2\2\2\u02c2\u02c3"+
		"\3\2\2\2\u02c3\u02c4\3\2\2\2\u02c4\u02c7\7k\2\2\u02c5\u02c8\5\u00d6l\2"+
		"\u02c6\u02c8\5B\"\2\u02c7\u02c5\3\2\2\2\u02c7\u02c6\3\2\2\2\u02c8\u02c9"+
		"\3\2\2\2\u02c9\u02ca\5@!\2\u02ca\u031c\3\2\2\2\u02cb\u02cc\7\u0164\2\2"+
		"\u02cc\u02cf\5> \2\u02cd\u02d0\5\u00d6l\2\u02ce\u02d0\5B\"\2\u02cf\u02cd"+
		"\3\2\2\2\u02cf\u02ce\3\2\2\2\u02d0\u02d1\3\2\2\2\u02d1\u02d4\7k\2\2\u02d2"+
		"\u02d5\5\u00d6l\2\u02d3\u02d5\5B\"\2\u02d4\u02d2\3\2\2\2\u02d4\u02d3\3"+
		"\2\2\2\u02d5\u02d6\3\2\2\2\u02d6\u02d7\5@!\2\u02d7\u031c\3\2\2\2\u02d8"+
		"\u02d9\7\u0448\2\2\u02d9\u02dc\5> \2\u02da\u02dd\5\u00d6l\2\u02db\u02dd"+
		"\5B\"\2\u02dc\u02da\3\2\2\2\u02dc\u02db\3\2\2\2\u02dd\u02e4\3\2\2\2\u02de"+
		"\u02df\7\66\2\2\u02df\u02e0\t\23\2\2\u02e0\u02e1\5> \2\u02e1\u02e2\5\u00da"+
		"n\2\u02e2\u02e3\5@!\2\u02e3\u02e5\3\2\2\2\u02e4\u02de\3\2\2\2\u02e4\u02e5"+
		"\3\2\2\2\u02e5\u02e7\3\2\2\2\u02e6\u02e8\5\u00f8}\2\u02e7\u02e6\3\2\2"+
		"\2\u02e7\u02e8\3\2\2\2\u02e8\u02e9\3\2\2\2\u02e9\u02ea\5@!\2\u02ea\u031c"+
		"\3\2\2\2\u02eb\u02ec\7\u015d\2\2\u02ec\u02ed\5> \2\u02ed\u02ee\5\u00e4"+
		"s\2\u02ee\u02f1\7k\2\2\u02ef\u02f2\5\u00d6l\2\u02f0\u02f2\5B\"\2\u02f1"+
		"\u02ef\3\2\2\2\u02f1\u02f0\3\2\2\2\u02f2\u02f3\3\2\2\2\u02f3\u02f4\5@"+
		"!\2\u02f4\u031c\3\2\2\2\u02f5\u02f6\7\u0380\2\2\u02f6\u02f7\5> \2\u02f7"+
		"\u02f8\t\24\2\2\u02f8\u02f9\7\u0468\2\2\u02f9\u02fa\5\u00d6l\2\u02fa\u02fb"+
		"\5@!\2\u02fb\u031c\3\2\2\2\u02fc\u02fd\7\u0123\2\2\u02fd\u02fe\5> \2\u02fe"+
		"\u02ff\5B\"\2\u02ff\u0300\7\u0468\2\2\u0300\u0303\5B\"\2\u0301\u0302\7"+
		"\u025a\2\2\u0302\u0304\5\u00ecw\2\u0303\u0301\3\2\2\2\u0303\u0304\3\2"+
		"\2\2\u0304\u030d\3\2\2\2\u0305\u030a\7\u0097\2\2\u0306\u030a\7\u01b3\2"+
		"\2\u0307\u0308\7R\2\2\u0308\u030a\5\u00fc\177\2\u0309\u0305\3\2\2\2\u0309"+
		"\u0306\3\2\2\2\u0309\u0307\3\2\2\2\u030a\u030b\3\2\2\2\u030b\u030c\7\u0099"+
		"\2\2\u030c\u030e\7_\2\2\u030d\u0309\3\2\2\2\u030d\u030e\3\2\2\2\u030e"+
		"\u0317\3\2\2\2\u030f\u0314\7\u0097\2\2\u0310\u0314\7\u01b3\2\2\u0311\u0312"+
		"\7R\2\2\u0312\u0314\5\u00fc\177\2\u0313\u030f\3\2\2\2\u0313\u0310\3\2"+
		"\2\2\u0313\u0311\3\2\2\2\u0314\u0315\3\2\2\2\u0315\u0316\7\u0099\2\2\u0316"+
		"\u0318\7\u01b3\2\2\u0317\u0313\3\2\2\2\u0317\u0318\3\2\2\2\u0318\u0319"+
		"\3\2\2\2\u0319\u031a\5@!\2\u031a\u031c\3\2\2\2\u031b\u025a\3\2\2\2\u031b"+
		"\u0260\3\2\2\2\u031b\u0267\3\2\2\2\u031b\u026e\3\2\2\2\u031b\u0275\3\2"+
		"\2\2\u031b\u027a\3\2\2\2\u031b\u0287\3\2\2\2\u031b\u0293\3\2\2\2\u031b"+
		"\u029c\3\2\2\2\u031b\u02a9\3\2\2\2\u031b\u02bd\3\2\2\2\u031b\u02cb\3\2"+
		"\2\2\u031b\u02d8\3\2\2\2\u031b\u02eb\3\2\2\2\u031b\u02f5\3\2\2\2\u031b"+
		"\u02fc\3\2\2\2\u031c=\3\2\2\2\u031d\u031e\t\25\2\2\u031e?\3\2\2\2\u031f"+
		"\u0320\t\26\2\2\u0320A\3\2\2\2\u0321\u0322\b\"\1\2\u0322\u0323\t\27\2"+
		"\2\u0323\u032d\5B\"\6\u0324\u0325\5F$\2\u0325\u0327\7~\2\2\u0326\u0328"+
		"\7\u0095\2\2\u0327\u0326\3\2\2\2\u0327\u0328\3\2\2\2\u0328\u0329\3\2\2"+
		"\2\u0329\u032a\t\30\2\2\u032a\u032d\3\2\2\2\u032b\u032d\5F$\2\u032c\u0321"+
		"\3\2\2\2\u032c\u0324\3\2\2\2\u032c\u032b\3\2\2\2\u032d\u0334\3\2\2\2\u032e"+
		"\u032f\f\5\2\2\u032f\u0330\5D#\2\u0330\u0331\5B\"\6\u0331\u0333\3\2\2"+
		"\2\u0332\u032e\3\2\2\2\u0333\u0336\3\2\2\2\u0334\u0332\3\2\2\2\u0334\u0335"+
		"\3\2\2\2\u0335C\3\2\2\2\u0336\u0334\3\2\2\2\u0337\u033f\7\64\2\2\u0338"+
		"\u0339\7\u0463\2\2\u0339\u033f\7\u0463\2\2\u033a\u033f\7\u00e1\2\2\u033b"+
		"\u033f\7\u009d\2\2\u033c\u033d\7\u0462\2\2\u033d\u033f\7\u0462\2\2\u033e"+
		"\u0337\3\2\2\2\u033e\u0338\3\2\2\2\u033e\u033a\3\2\2\2\u033e\u033b\3\2"+
		"\2\2\u033e\u033c\3\2\2\2\u033fE\3\2\2\2\u0340\u0343\b$\1\2\u0341\u0342"+
		"\7\u0481\2\2\u0342\u0344\7\u044d\2\2\u0343\u0341\3\2\2\2\u0343\u0344\3"+
		"\2\2\2\u0344\u0345\3\2\2\2\u0345\u0346\5\u00d2j\2\u0346\u038a\3\2\2\2"+
		"\u0347\u0348\f\n\2\2\u0348\u0349\5\u00d0i\2\u0349\u034a\5F$\13\u034a\u0389"+
		"\3\2\2\2\u034b\u034d\f\b\2\2\u034c\u034e\7\u0095\2\2\u034d\u034c\3\2\2"+
		"\2\u034d\u034e\3\2\2\2\u034e\u034f\3\2\2\2\u034f\u0350\79\2\2\u0350\u0351"+
		"\5F$\2\u0351\u0352\7\64\2\2\u0352\u0353\5F$\t\u0353\u0389\3\2\2\2\u0354"+
		"\u0355\f\7\2\2\u0355\u0356\7\u0272\2\2\u0356\u0357\7\u0087\2\2\u0357\u0389"+
		"\5F$\b\u0358\u035a\f\5\2\2\u0359\u035b\7\u0095\2\2\u035a\u0359\3\2\2\2"+
		"\u035a\u035b\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u035d\t\31\2\2\u035d\u0389"+
		"\5F$\6\u035e\u0360\f\f\2\2\u035f\u0361\7\u0095\2\2\u0360\u035f\3\2\2\2"+
		"\u0360\u0361\3\2\2\2\u0361\u0363\3\2\2\2\u0362\u0364\5H%\2\u0363\u0362"+
		"\3\2\2\2\u0363\u0364\3\2\2\2\u0364\u0365\3\2\2\2\u0365\u0366\7v\2\2\u0366"+
		"\u0369\5> \2\u0367\u036a\5\4\3\2\u0368\u036a\5\u00ccg\2\u0369\u0367\3"+
		"\2\2\2\u0369\u0368\3\2\2\2\u036a\u036b\3\2\2\2\u036b\u036c\5@!\2\u036c"+
		"\u0389\3\2\2\2\u036d\u036e\f\13\2\2\u036e\u036f\7~\2\2\u036f\u0389\5\u00ce"+
		"h\2\u0370\u0371\f\t\2\2\u0371\u0372\5\u00d0i\2\u0372\u0373\t\32\2\2\u0373"+
		"\u0374\5> \2\u0374\u0375\5\4\3\2\u0375\u0376\5@!\2\u0376\u0389\3\2\2\2"+
		"\u0377\u0379\f\6\2\2\u0378\u037a\7\u0095\2\2\u0379\u0378\3\2\2\2\u0379"+
		"\u037a\3\2\2\2\u037a\u037b\3\2\2\2\u037b\u037c\7\u0087\2\2\u037c\u037f"+
		"\5F$\2\u037d\u037e\7\u01b5\2\2\u037e\u0380\7\u0475\2\2\u037f\u037d\3\2"+
		"\2\2\u037f\u0380\3\2\2\2\u0380\u0389\3\2\2\2\u0381\u0382\f\3\2\2\u0382"+
		"\u0383\7\u020d\2\2\u0383\u0384\7\u0223\2\2\u0384\u0385\5> \2\u0385\u0386"+
		"\5F$\2\u0386\u0387\5@!\2\u0387\u0389\3\2\2\2\u0388\u0347\3\2\2\2\u0388"+
		"\u034b\3\2\2\2\u0388\u0354\3\2\2\2\u0388\u0358\3\2\2\2\u0388\u035e\3\2"+
		"\2\2\u0388\u036d\3\2\2\2\u0388\u0370\3\2\2\2\u0388\u0377\3\2\2\2\u0388"+
		"\u0381\3\2\2\2\u0389\u038c\3\2\2\2\u038a\u0388\3\2\2\2\u038a\u038b\3\2"+
		"\2\2\u038bG\3\2\2\2\u038c\u038a\3\2\2\2\u038d\u038e\7~\2\2\u038eI\3\2"+
		"\2\2\u038f\u0390\t\33\2\2\u0390K\3\2\2\2\u0391\u0393\5N(\2\u0392\u0391"+
		"\3\2\2\2\u0392\u0393\3\2\2\2\u0393\u0395\3\2\2\2\u0394\u0396\5Z.\2\u0395"+
		"\u0394\3\2\2\2\u0395\u0396\3\2\2\2\u0396\u0398\3\2\2\2\u0397\u0399\5^"+
		"\60\2\u0398\u0397\3\2\2\2\u0398\u0399\3\2\2\2\u0399\u039b\3\2\2\2\u039a"+
		"\u039c\5f\64\2\u039b\u039a\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u039e\3\2"+
		"\2\2\u039d\u039f\5t;\2\u039e\u039d\3\2\2\2\u039e\u039f\3\2\2\2\u039f\u03b3"+
		"\3\2\2\2\u03a0\u03a2\5N(\2\u03a1\u03a0\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2"+
		"\u03a4\3\2\2\2\u03a3\u03a5\5Z.\2\u03a4\u03a3\3\2\2\2\u03a4\u03a5\3\2\2"+
		"\2\u03a5\u03a7\3\2\2\2\u03a6\u03a8\5^\60\2\u03a7\u03a6\3\2\2\2\u03a7\u03a8"+
		"\3\2\2\2\u03a8\u03aa\3\2\2\2\u03a9\u03ab\5f\64\2\u03aa\u03a9\3\2\2\2\u03aa"+
		"\u03ab\3\2\2\2\u03ab\u03ad\3\2\2\2\u03ac\u03ae\5t;\2\u03ad\u03ac\3\2\2"+
		"\2\u03ad\u03ae\3\2\2\2\u03ae\u03b0\3\2\2\2\u03af\u03b1\5x=\2\u03b0\u03af"+
		"\3\2\2\2\u03b0\u03b1\3\2\2\2\u03b1\u03b3\3\2\2\2\u03b2\u0392\3\2\2\2\u03b2"+
		"\u03a1\3\2\2\2\u03b3M\3\2\2\2\u03b4\u03b5\5P)\2\u03b5\u03bb\5R*\2\u03b6"+
		"\u03b7\5X-\2\u03b7\u03b8\5R*\2\u03b8\u03ba\3\2\2\2\u03b9\u03b6\3\2\2\2"+
		"\u03ba\u03bd\3\2\2\2\u03bb\u03b9\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc\u03c0"+
		"\3\2\2\2\u03bd\u03bb\3\2\2\2\u03be\u03bf\7\u00df\2\2\u03bf\u03c1\7\u025e"+
		"\2\2\u03c0\u03be\3\2\2\2\u03c0\u03c1\3\2\2\2\u03c1\u03cf\3\2\2\2\u03c2"+
		"\u03c4\5J&\2\u03c3\u03c5\5\20\t\2\u03c4\u03c3\3\2\2\2\u03c4\u03c5\3\2"+
		"\2\2\u03c5\u03c6\3\2\2\2\u03c6\u03cc\5\u0100\u0081\2\u03c7\u03c8\5\u0114"+
		"\u008b\2\u03c8\u03c9\5\u0100\u0081\2\u03c9\u03cb\3\2\2\2\u03ca\u03c7\3"+
		"\2\2\2\u03cb\u03ce\3\2\2\2\u03cc\u03ca\3\2\2\2\u03cc\u03cd\3\2\2\2\u03cd"+
		"\u03d0\3\2\2\2\u03ce\u03cc\3\2\2\2\u03cf\u03c2\3\2\2\2\u03cf\u03d0\3\2"+
		"\2\2\u03d0O\3\2\2\2\u03d1\u03d2\7p\2\2\u03d2\u03d5\7<\2\2\u03d3\u03d5"+
		"\7p\2\2\u03d4\u03d1\3\2\2\2\u03d4\u03d3\3\2\2\2\u03d5Q\3\2\2\2\u03d6\u03d8"+
		"\5V,\2\u03d7\u03d9\t\34\2\2\u03d8\u03d7\3\2\2\2\u03d8\u03d9\3\2\2\2\u03d9"+
		"\u03dc\3\2\2\2\u03da\u03dc\5T+\2\u03db\u03d6\3\2\2\2\u03db\u03da\3\2\2"+
		"\2\u03dcS\3\2\2\2\u03dd\u03de\t\35\2\2\u03deU\3\2\2\2\u03df\u03e0\t\27"+
		"\2\2\u03e0\u03ea\5V,\2\u03e1\u03e2\5F$\2\u03e2\u03e4\7~\2\2\u03e3\u03e5"+
		"\7\u0095\2\2\u03e4\u03e3\3\2\2\2\u03e4\u03e5\3\2\2\2\u03e5\u03e6\3\2\2"+
		"\2\u03e6\u03e7\t\30\2\2\u03e7\u03ea\3\2\2\2\u03e8\u03ea\5F$\2\u03e9\u03df"+
		"\3\2\2\2\u03e9\u03e1\3\2\2\2\u03e9\u03e8\3\2\2\2\u03eaW\3\2\2\2\u03eb"+
		"\u03ec\t\36\2\2\u03ecY\3\2\2\2\u03ed\u03ee\5\\/\2\u03ee\u03ef\5B\"\2\u03ef"+
		"[\3\2\2\2\u03f0\u03f1\7q\2\2\u03f1]\3\2\2\2\u03f2\u03f3\7\u02aa\2\2\u03f3"+
		"\u03f4\5`\61\2\u03f4\u03f5\7\66\2\2\u03f5\u03f6\5> \2\u03f6\u03f7\5b\62"+
		"\2\u03f7\u0401\5@!\2\u03f8\u03f9\7\u0468\2\2\u03f9\u03fa\5`\61\2\u03fa"+
		"\u03fb\7\66\2\2\u03fb\u03fc\5> \2\u03fc\u03fd\5b\62\2\u03fd\u03fe\5@!"+
		"\2\u03fe\u0400\3\2\2\2\u03ff\u03f8\3\2\2\2\u0400\u0403\3\2\2\2\u0401\u03ff"+
		"\3\2\2\2\u0401\u0402\3\2\2\2\u0402_\3\2\2\2\u0403\u0401\3\2\2\2\u0404"+
		"\u0405\5\36\20\2\u0405a\3\2\2\2\u0406\u0408\5`\61\2\u0407\u0406\3\2\2"+
		"\2\u0407\u0408\3\2\2\2\u0408\u040a\3\2\2\2\u0409\u040b\5d\63\2\u040a\u0409"+
		"\3\2\2\2\u040a\u040b\3\2\2\2\u040b\u040d\3\2\2\2\u040c\u040e\5f\64\2\u040d"+
		"\u040c\3\2\2\2\u040d\u040e\3\2\2\2\u040e\u0410\3\2\2\2\u040f\u0411\5j"+
		"\66\2\u0410\u040f\3\2\2\2\u0410\u0411\3\2\2\2\u0411c\3\2\2\2\u0412\u0413"+
		"\7\u00a3\2\2\u0413\u0414\7<\2\2\u0414\u0419\5B\"\2\u0415\u0416\7\u0468"+
		"\2\2\u0416\u0418\5B\"\2\u0417\u0415\3\2\2\2\u0418\u041b\3\2\2\2\u0419"+
		"\u0417\3\2\2\2\u0419\u041a\3\2\2\2\u041ae\3\2\2\2\u041b\u0419\3\2\2\2"+
		"\u041c\u041d\7\u009e\2\2\u041d\u041e\7<\2\2\u041e\u0423\5h\65\2\u041f"+
		"\u0420\7\u0468\2\2\u0420\u0422\5h\65\2\u0421\u041f\3\2\2\2\u0422\u0425"+
		"\3\2\2\2\u0423\u0421\3\2\2\2\u0423\u0424\3\2\2\2\u0424g\3\2\2\2\u0425"+
		"\u0423\3\2\2\2\u0426\u0428\5B\"\2\u0427\u0429\t\34\2\2\u0428\u0427\3\2"+
		"\2\2\u0428\u0429\3\2\2\2\u0429i\3\2\2\2\u042a\u042b\5l\67\2\u042b\u042c"+
		"\5n8\2\u042ck\3\2\2\2\u042d\u042e\t\37\2\2\u042em\3\2\2\2\u042f\u0432"+
		"\5p9\2\u0430\u0432\5r:\2\u0431\u042f\3\2\2\2\u0431\u0430\3\2\2\2\u0432"+
		"o\3\2\2\2\u0433\u0434\7L\2\2\u0434\u043b\7\u0260\2\2\u0435\u0436\7\u0297"+
		"\2\2\u0436\u043b\t \2\2\u0437\u0438\5B\"\2\u0438\u0439\t \2\2\u0439\u043b"+
		"\3\2\2\2\u043a\u0433\3\2\2\2\u043a\u0435\3\2\2\2\u043a\u0437\3\2\2\2\u043b"+
		"q\3\2\2\2\u043c\u043d\79\2\2\u043d\u043e\5p9\2\u043e\u043f\7\64\2\2\u043f"+
		"\u0440\5p9\2\u0440s\3\2\2\2\u0441\u044c\7\u0088\2\2\u0442\u0443\5v<\2"+
		"\u0443\u0444\7\u0468\2\2\u0444\u0446\3\2\2\2\u0445\u0442\3\2\2\2\u0445"+
		"\u0446\3\2\2\2\u0446\u0447\3\2\2\2\u0447\u044d\5v<\2\u0448\u0449\5v<\2"+
		"\u0449\u044a\7\u0222\2\2\u044a\u044b\5v<\2\u044b\u044d\3\2\2\2\u044c\u0445"+
		"\3\2\2\2\u044c\u0448\3\2\2\2\u044du\3\2\2\2\u044e\u0452\5\u00dan\2\u044f"+
		"\u0452\5\u00e0q\2\u0450\u0452\5 \21\2\u0451\u044e\3\2\2\2\u0451\u044f"+
		"\3\2\2\2\u0451\u0450\3\2\2\2\u0452w\3\2\2\2\u0453\u0454\7}\2\2\u0454\u0459"+
		"\5z>\2\u0455\u0456\7\u0468\2\2\u0456\u0458\5z>\2\u0457\u0455\3\2\2\2\u0458"+
		"\u045b\3\2\2\2\u0459\u0457\3\2\2\2\u0459\u045a\3\2\2\2\u045a\u0478\3\2"+
		"\2\2\u045b\u0459\3\2\2\2\u045c\u045d\7}\2\2\u045d\u045e\7\u01aa\2\2\u045e"+
		"\u0478\7\u0475\2\2\u045f\u0460\7}\2\2\u0460\u0461\7\u00a2\2\2\u0461\u0465"+
		"\7\u0475\2\2\u0462\u0463\7B\2\2\u0463\u0464\7\u00bb\2\2\u0464\u0466\5"+
		"\u00f0y\2\u0465\u0462\3\2\2\2\u0465\u0466\3\2\2\2\u0466\u046d\3\2\2\2"+
		"\u0467\u0469\t!\2\2\u0468\u046a\5|?\2\u0469\u0468\3\2\2\2\u046a\u046b"+
		"\3\2\2\2\u046b\u0469\3\2\2\2\u046b\u046c\3\2\2\2\u046c\u046e\3\2\2\2\u046d"+
		"\u0467\3\2\2\2\u046d\u046e\3\2\2\2\u046e\u0475\3\2\2\2\u046f\u0471\7\u008a"+
		"\2\2\u0470\u0472\5~@\2\u0471\u0470\3\2\2\2\u0472\u0473\3\2\2\2\u0473\u0471"+
		"\3\2\2\2\u0473\u0474\3\2\2\2\u0474\u0476\3\2\2\2\u0475\u046f\3\2\2\2\u0475"+
		"\u0476\3\2\2\2\u0476\u0478\3\2\2\2\u0477\u0453\3\2\2\2\u0477\u045c\3\2"+
		"\2\2\u0477\u045f\3\2\2\2\u0478y\3\2\2\2\u0479\u047c\5\36\20\2\u047a\u047c"+
		"\7\u0481\2\2\u047b\u0479\3\2\2\2\u047b\u047a\3\2\2\2\u047c{\3\2\2\2\u047d"+
		"\u047e\7\u00cc\2\2\u047e\u047f\7<\2\2\u047f\u048a\7\u0475\2\2\u0480\u0482"+
		"\7\u009c\2\2\u0481\u0480\3\2\2\2\u0481\u0482\3\2\2\2\u0482\u0483\3\2\2"+
		"\2\u0483\u0484\7`\2\2\u0484\u0485\7<\2\2\u0485\u048a\7\u0475\2\2\u0486"+
		"\u0487\7a\2\2\u0487\u0488\7<\2\2\u0488\u048a\7\u0475\2\2\u0489\u047d\3"+
		"\2\2\2\u0489\u0481\3\2\2\2\u0489\u0486\3\2\2\2\u048a}\3\2\2\2\u048b\u048c"+
		"\7\u00c9\2\2\u048c\u048d\7<\2\2\u048d\u0492\7\u0475\2\2\u048e\u048f\7"+
		"\u00cc\2\2\u048f\u0490\7<\2\2\u0490\u0492\7\u0475\2\2\u0491\u048b\3\2"+
		"\2\2\u0491\u048e\3\2\2\2\u0492\177\3\2\2\2\u0493\u0494\7h\2\2\u0494\u049a"+
		"\7\u00d7\2\2\u0495\u0496\7\u008c\2\2\u0496\u0497\7v\2\2\u0497\u0498\7"+
		"\u0268\2\2\u0498\u049a\7\u0213\2\2\u0499\u0493\3\2\2\2\u0499\u0495\3\2"+
		"\2\2\u049a\u0081\3\2\2\2\u049b\u049c\5> \2\u049c\u049d\5\6\4\2\u049d\u049e"+
		"\5@!\2\u049e\u04a4\3\2\2\2\u049f\u04a0\5> \2\u04a0\u04a1\5\u0082B\2\u04a1"+
		"\u04a2\5@!\2\u04a2\u04a4\3\2\2\2\u04a3\u049b\3\2\2\2\u04a3\u049f\3\2\2"+
		"\2\u04a4\u0083\3\2\2\2\u04a5\u04a9\5\20\t\2\u04a6\u04a8\5\26\f\2\u04a7"+
		"\u04a6\3\2\2\2\u04a8\u04ab\3\2\2\2\u04a9\u04a7\3\2\2\2\u04a9\u04aa\3\2"+
		"\2\2\u04aa\u04ac\3\2\2\2\u04ab\u04a9\3\2\2\2\u04ac\u04ae\5\30\r\2\u04ad"+
		"\u04af\5\u0088E\2\u04ae\u04ad\3\2\2\2\u04ae\u04af\3\2\2\2\u04af\u04b1"+
		"\3\2\2\2\u04b0\u04b2\5N(\2\u04b1\u04b0\3\2\2\2\u04b1\u04b2\3\2\2\2\u04b2"+
		"\u04b4\3\2\2\2\u04b3\u04b5\5Z.\2\u04b4\u04b3\3\2\2\2\u04b4\u04b5\3\2\2"+
		"\2\u04b5\u04b7\3\2\2\2\u04b6\u04b8\5^\60\2\u04b7\u04b6\3\2\2\2\u04b7\u04b8"+
		"\3\2\2\2\u04b8\u04ba\3\2\2\2\u04b9\u04bb\5f\64\2\u04ba\u04b9\3\2\2\2\u04ba"+
		"\u04bb\3\2\2\2\u04bb\u04bd\3\2\2\2\u04bc\u04be\5t;\2\u04bd\u04bc\3\2\2"+
		"\2\u04bd\u04be\3\2\2\2\u04be\u0085\3\2\2\2\u04bf\u04c0\5\u008aF\2\u04c0"+
		"\u04c1\5\u0090I\2\u04c1\u0087\3\2\2\2\u04c2\u04c3\5\u008aF\2\u04c3\u04c4"+
		"\5\u008eH\2\u04c4\u0089\3\2\2\2\u04c5\u04c6\t\"\2\2\u04c6\u008b\3\2\2"+
		"\2\u04c7\u04c8\7\u00cb\2\2\u04c8\u008d\3\2\2\2\u04c9\u04cb\5\u0104\u0083"+
		"\2\u04ca\u04c9\3\2\2\2\u04ca\u04cb\3\2\2\2\u04cb\u04cc\3\2\2\2\u04cc\u04ce"+
		"\5\u0092J\2\u04cd\u04cf\5\u008cG\2\u04ce\u04cd\3\2\2\2\u04ce\u04cf\3\2"+
		"\2\2\u04cf\u04da\3\2\2\2\u04d0\u04d2\5\u00c4c\2\u04d1\u04d3\5\u0104\u0083"+
		"\2\u04d2\u04d1\3\2\2\2\u04d2\u04d3\3\2\2\2\u04d3\u04d4\3\2\2\2\u04d4\u04d6"+
		"\5\u0092J\2\u04d5\u04d7\5\u008cG\2\u04d6\u04d5\3\2\2\2\u04d6\u04d7\3\2"+
		"\2\2\u04d7\u04d9\3\2\2\2\u04d8\u04d0\3\2\2\2\u04d9\u04dc\3\2\2\2\u04da"+
		"\u04d8\3\2\2\2\u04da\u04db\3\2\2\2\u04db\u008f\3\2\2\2\u04dc\u04da\3\2"+
		"\2\2\u04dd\u04e3\5\u0094K\2\u04de\u04df\5> \2\u04df\u04e0\5\u0094K\2\u04e0"+
		"\u04e1\5@!\2\u04e1\u04e3\3\2\2\2\u04e2\u04dd\3\2\2\2\u04e2\u04de\3\2\2"+
		"\2\u04e3\u0091\3\2\2\2\u04e4\u04e8\5\u0094K\2\u04e5\u04e7\5\u00b2Z\2\u04e6"+
		"\u04e5\3\2\2\2\u04e7\u04ea\3\2\2\2\u04e8\u04e6\3\2\2\2\u04e8\u04e9\3\2"+
		"\2\2\u04e9\u04f6\3\2\2\2\u04ea\u04e8\3\2\2\2\u04eb\u04ec\5> \2\u04ec\u04f0"+
		"\5\u0094K\2\u04ed\u04ef\5\u00b2Z\2\u04ee\u04ed\3\2\2\2\u04ef\u04f2\3\2"+
		"\2\2\u04f0\u04ee\3\2\2\2\u04f0\u04f1\3\2\2\2\u04f1\u04f3\3\2\2\2\u04f2"+
		"\u04f0\3\2\2\2\u04f3\u04f4\5@!\2\u04f4\u04f6\3\2\2\2\u04f5\u04e4\3\2\2"+
		"\2\u04f5\u04eb\3\2\2\2\u04f6\u0093\3\2\2\2\u04f7\u04f8\5\u0096L\2\u04f8"+
		"\u04f9\5\u0098M\2\u04f9\u051b\3\2\2\2\u04fa\u04fc\5\u0104\u0083\2\u04fb"+
		"\u04fa\3\2\2\2\u04fb\u04fc\3\2\2\2\u04fc\u04fd\3\2\2\2\u04fd\u04ff\5\u009c"+
		"O\2\u04fe\u0500\5\u008cG\2\u04ff\u04fe\3\2\2\2\u04ff\u0500\3\2\2\2\u0500"+
		"\u051b\3\2\2\2\u0501\u0507\5\u009cO\2\u0502\u0503\7\u00a3\2\2\u0503\u0504"+
		"\5> \2\u0504\u0505\5\u009eP\2\u0505\u0506\5@!\2\u0506\u0508\3\2\2\2\u0507"+
		"\u0502\3\2\2\2\u0507\u0508\3\2\2\2\u0508\u050a\3\2\2\2\u0509\u050b\5\u0098"+
		"M\2\u050a\u0509\3\2\2\2\u050a\u050b\3\2\2\2\u050b\u0514\3\2\2\2\u050c"+
		"\u0511\5\u00a0Q\2\u050d\u050e\7\u0468\2\2\u050e\u0510\5\u00a0Q\2\u050f"+
		"\u050d\3\2\2\2\u0510\u0513\3\2\2\2\u0511\u050f\3\2\2\2\u0511\u0512\3\2"+
		"\2\2\u0512\u0515\3\2\2\2\u0513\u0511\3\2\2\2\u0514\u050c\3\2\2\2\u0514"+
		"\u0515\3\2\2\2\u0515\u051b\3\2\2\2\u0516\u0517\5> \2\u0517\u0518\5\u008e"+
		"H\2\u0518\u0519\5@!\2\u0519\u051b\3\2\2\2\u051a\u04f7\3\2\2\2\u051a\u04fb"+
		"\3\2\2\2\u051a\u0501\3\2\2\2\u051a\u0516\3\2\2\2\u051b\u0095\3\2\2\2\u051c"+
		"\u051d\5> \2\u051d\u051e\5\4\3\2\u051e\u051f\5@!\2\u051f\u0097\3\2\2\2"+
		"\u0520\u0522\5\u009aN\2\u0521\u0520\3\2\2\2\u0521\u0522\3\2\2\2\u0522"+
		"\u0523\3\2\2\2\u0523\u0524\5\36\20\2\u0524\u0099\3\2\2\2\u0525\u0526\7"+
		"\66\2\2\u0526\u009b\3\2\2\2\u0527\u0528\5\34\17\2\u0528\u009d\3\2\2\2"+
		"\u0529\u052e\5\36\20\2\u052a\u052b\7\u0468\2\2\u052b\u052d\5\36\20\2\u052c"+
		"\u052a\3\2\2\2\u052d\u0530\3\2\2\2\u052e\u052c\3\2\2\2\u052e\u052f\3\2"+
		"\2\2\u052f\u009f\3\2\2\2\u0530\u052e\3\2\2\2\u0531\u0532\t#\2\2\u0532"+
		"\u0535\t$\2\2\u0533\u0534\7h\2\2\u0534\u0536\5\u00a2R\2\u0535\u0533\3"+
		"\2\2\2\u0535\u0536\3\2\2\2\u0536\u0537\3\2\2\2\u0537\u0538\5> \2\u0538"+
		"\u0539\5\u009eP\2\u0539\u053a\5@!\2\u053a\u00a1\3\2\2\2\u053b\u0541\7"+
		"\u0080\2\2\u053c\u053d\7\u009e\2\2\u053d\u0541\7<\2\2\u053e\u053f\7p\2"+
		"\2\u053f\u0541\7<\2\2\u0540\u053b\3\2\2\2\u0540\u053c\3\2\2\2\u0540\u053e"+
		"\3\2\2\2\u0541\u00a3\3\2\2\2\u0542\u0543\t%\2\2\u0543\u00a5\3\2\2\2\u0544"+
		"\u054a\5\u00a8U\2\u0545\u0546\5J&\2\u0546\u0547\5\u00a8U\2\u0547\u0549"+
		"\3\2\2\2\u0548\u0545\3\2\2\2\u0549\u054c\3\2\2\2\u054a\u0548\3\2\2\2\u054a"+
		"\u054b\3\2\2\2\u054b\u00a7\3\2\2\2\u054c\u054a\3\2\2\2\u054d\u0551\5\u00aa"+
		"V\2\u054e\u0551\5\u00acW\2\u054f\u0551\5\u00aeX\2\u0550\u054d\3\2\2\2"+
		"\u0550\u054e\3\2\2\2\u0550\u054f\3\2\2\2\u0551\u00a9\3\2\2\2\u0552\u0554"+
		"\5\u00b6\\\2\u0553\u0552\3\2\2\2\u0553\u0554\3\2\2\2\u0554\u0555\3\2\2"+
		"\2\u0555\u0556\5\u00a4S\2\u0556\u0557\5\u0094K\2\u0557\u0558\5\u00b0Y"+
		"\2\u0558\u0561\5\u0094K\2\u0559\u055a\5\u00b8]\2\u055a\u055b\5B\"\2\u055b"+
		"\u0562\3\2\2\2\u055c\u055d\7\u00da\2\2\u055d\u055e\5> \2\u055e\u055f\5"+
		"\u009eP\2\u055f\u0560\5@!\2\u0560\u0562\3\2\2\2\u0561\u0559\3\2\2\2\u0561"+
		"\u055c\3\2\2\2\u0561\u0562\3\2\2\2\u0562\u00ab\3\2\2\2\u0563\u0565\5\u00bc"+
		"_\2\u0564\u0566\5\u00be`\2\u0565\u0564\3\2\2\2\u0565\u0566\3\2\2\2\u0566"+
		"\u0567\3\2\2\2\u0567\u0568\5\u00a4S\2\u0568\u0569\5\u0094K\2\u0569\u056a"+
		"\5\u00b0Y\2\u056a\u0573\5\u0094K\2\u056b\u056c\5\u00b8]\2\u056c\u056d"+
		"\5B\"\2\u056d\u0574\3\2\2\2\u056e\u056f\7\u00da\2\2\u056f\u0570\5> \2"+
		"\u0570\u0571\5\u009eP\2\u0571\u0572\5@!\2\u0572\u0574\3\2\2\2\u0573\u056b"+
		"\3\2\2\2\u0573\u056e\3\2\2\2\u0574\u00ad\3\2\2\2\u0575\u057a\5\u00c2b"+
		"\2\u0576\u0578\5\u00bc_\2\u0577\u0579\5\u00be`\2\u0578\u0577\3\2\2\2\u0578"+
		"\u0579\3\2\2\2\u0579\u057b\3\2\2\2\u057a\u0576\3\2\2\2\u057a\u057b\3\2"+
		"\2\2\u057b\u057c\3\2\2\2\u057c\u057d\5\u00a4S\2\u057d\u057e\5\u0094K\2"+
		"\u057e\u057f\5\u00b0Y\2\u057f\u0580\5\u0094K\2\u0580\u00af\3\2\2\2\u0581"+
		"\u0582\t&\2\2\u0582\u00b1\3\2\2\2\u0583\u0587\5\u00b4[\2\u0584\u0587\5"+
		"\u00ba^\2\u0585\u0587\5\u00c0a\2\u0586\u0583\3\2\2\2\u0586\u0584\3\2\2"+
		"\2\u0586\u0585\3\2\2\2\u0587\u00b3\3\2\2\2\u0588\u058a\5\u00b6\\\2\u0589"+
		"\u0588\3\2\2\2\u0589\u058a\3\2\2\2\u058a\u058b\3\2\2\2\u058b\u058c\5\u00a4"+
		"S\2\u058c\u0595\5\u0094K\2\u058d\u058e\5\u00b8]\2\u058e\u058f\5B\"\2\u058f"+
		"\u0596\3\2\2\2\u0590\u0591\7\u00da\2\2\u0591\u0592\5> \2\u0592\u0593\5"+
		"\u009eP\2\u0593\u0594\5@!\2\u0594\u0596\3\2\2\2\u0595\u058d\3\2\2\2\u0595"+
		"\u0590\3\2\2\2\u0595\u0596\3\2\2\2\u0596\u00b5\3\2\2\2\u0597\u0598\t\'"+
		"\2\2\u0598\u00b7\3\2\2\2\u0599\u059a\7\u0099\2\2\u059a\u00b9\3\2\2\2\u059b"+
		"\u059d\5\u00bc_\2\u059c\u059e\5\u00be`\2\u059d\u059c\3\2\2\2\u059d\u059e"+
		"\3\2\2\2\u059e\u059f\3\2\2\2\u059f\u05a0\5\u00a4S\2\u05a0\u05a9\5\u0094"+
		"K\2\u05a1\u05a2\5\u00b8]\2\u05a2\u05a3\5B\"\2\u05a3\u05aa\3\2\2\2\u05a4"+
		"\u05a5\7\u00da\2\2\u05a5\u05a6\5> \2\u05a6\u05a7\5\u009eP\2\u05a7\u05a8"+
		"\5@!\2\u05a8\u05aa\3\2\2\2\u05a9\u05a1\3\2\2\2\u05a9\u05a4\3\2\2\2\u05aa"+
		"\u00bb\3\2\2\2\u05ab\u05ac\t(\2\2\u05ac\u00bd\3\2\2\2\u05ad\u05ae\7\u00a1"+
		"\2\2\u05ae\u00bf\3\2\2\2\u05af\u05b4\5\u00c2b\2\u05b0\u05b2\5\u00bc_\2"+
		"\u05b1\u05b3\5\u00be`\2\u05b2\u05b1\3\2\2\2\u05b2\u05b3\3\2\2\2\u05b3"+
		"\u05b5\3\2\2\2\u05b4\u05b0\3\2\2\2\u05b4\u05b5\3\2\2\2\u05b5\u05b6\3\2"+
		"\2\2\u05b6\u05b7\5\u00a4S\2\u05b7\u05b8\5\u0094K\2\u05b8\u00c1\3\2\2\2"+
		"\u05b9\u05ba\7\u0094\2\2\u05ba\u00c3\3\2\2\2\u05bb\u05bc\t\36\2\2\u05bc"+
		"\u00c5\3\2\2\2\u05bd\u05bf\7\u00d3\2\2\u05be\u05c0\t\2\2\2\u05bf\u05be"+
		"\3\2\2\2\u05bf\u05c0\3\2\2\2\u05c0\u05c3\3\2\2\2\u05c1\u05c4\5\u0084C"+
		"\2\u05c2\u05c4\5\u00c8e\2\u05c3\u05c1\3\2\2\2\u05c3\u05c2\3\2\2\2\u05c4"+
		"\u00c7\3\2\2\2\u05c5\u05c6\5> \2\u05c6\u05c7\5\u0084C\2\u05c7\u05c8\5"+
		"@!\2\u05c8\u05ce\3\2\2\2\u05c9\u05ca\5> \2\u05ca\u05cb\5\u00c8e\2\u05cb"+
		"\u05cc\5@!\2\u05cc\u05ce\3\2\2\2\u05cd\u05c5\3\2\2\2\u05cd\u05c9\3\2\2"+
		"\2\u05ce\u00c9\3\2\2\2\u05cf\u05d1\7\u00d3\2\2\u05d0\u05d2\t\2\2\2\u05d1"+
		"\u05d0\3\2\2\2\u05d1\u05d2\3\2\2\2\u05d2\u05d3\3\2\2\2\u05d3\u05d4\5\u00c8"+
		"e\2\u05d4\u00cb\3\2\2\2\u05d5\u05da\5B\"\2\u05d6\u05d7\7\u0468\2\2\u05d7"+
		"\u05d9\5B\"\2\u05d8\u05d6\3\2\2\2\u05d9\u05dc\3\2\2\2\u05da\u05d8\3\2"+
		"\2\2\u05da\u05db\3\2\2\2\u05db\u00cd\3\2\2\2\u05dc\u05da\3\2\2\2\u05dd"+
		"\u05df\7\u0095\2\2\u05de\u05dd\3\2\2\2\u05de\u05df\3\2\2\2\u05df\u05e0"+
		"\3\2\2\2\u05e0\u05e1\t)\2\2\u05e1\u00cf\3\2\2\2\u05e2\u05f1\7\u045d\2"+
		"\2\u05e3\u05f1\7\u045e\2\2\u05e4\u05f1\7\u045f\2\2\u05e5\u05e6\7\u045f"+
		"\2\2\u05e6\u05f1\7\u045d\2\2\u05e7\u05e8\7\u045e\2\2\u05e8\u05f1\7\u045d"+
		"\2\2\u05e9\u05ea\7\u045f\2\2\u05ea\u05f1\7\u045e\2\2\u05eb\u05ec\7\u0460"+
		"\2\2\u05ec\u05f1\7\u045d\2\2\u05ed\u05ee\7\u045f\2\2\u05ee\u05ef\7\u045d"+
		"\2\2\u05ef\u05f1\7\u045e\2\2\u05f0\u05e2\3\2\2\2\u05f0\u05e3\3\2\2\2\u05f0"+
		"\u05e4\3\2\2\2\u05f0\u05e5\3\2\2\2\u05f0\u05e7\3\2\2\2\u05f0\u05e9\3\2"+
		"\2\2\u05f0\u05eb\3\2\2\2\u05f0\u05ed\3\2\2\2\u05f1\u00d1\3\2\2\2\u05f2"+
		"\u05f3\bj\1\2\u05f3\u0620\5\u00d4k\2\u05f4\u0620\5\64\33\2\u05f5\u0620"+
		"\5:\36\2\u05f6\u0620\5\u00e0q\2\u05f7\u05f8\5\u00e2r\2\u05f8\u05f9\5\u00d2"+
		"j\f\u05f9\u0620\3\2\2\2\u05fa\u05fb\7\u0101\2\2\u05fb\u0620\5\u00d2j\13"+
		"\u05fc\u05fd\5> \2\u05fd\u0602\5B\"\2\u05fe\u05ff\7\u0468\2\2\u05ff\u0601"+
		"\5B\"\2\u0600\u05fe\3\2\2\2\u0601\u0604\3\2\2\2\u0602\u0600\3\2\2\2\u0602"+
		"\u0603\3\2\2\2\u0603\u0605\3\2\2\2\u0604\u0602\3\2\2\2\u0605\u0606\5@"+
		"!\2\u0606\u0620\3\2\2\2\u0607\u0608\7\u0260\2\2\u0608\u0609\5> \2\u0609"+
		"\u060c\5B\"\2\u060a\u060b\7\u0468\2\2\u060b\u060d\5B\"\2\u060c\u060a\3"+
		"\2\2\2\u060d\u060e\3\2\2\2\u060e\u060c\3\2\2\2\u060e\u060f\3\2\2\2\u060f"+
		"\u0610\3\2\2\2\u0610\u0611\5@!\2\u0611\u0620\3\2\2\2\u0612\u0613\7c\2"+
		"\2\u0613\u0614\5> \2\u0614\u0615\5\4\3\2\u0615\u0616\5@!\2\u0616\u0620"+
		"\3\2\2\2\u0617\u0618\5> \2\u0618\u0619\5\4\3\2\u0619\u061a\5@!\2\u061a"+
		"\u0620\3\2\2\2\u061b\u061c\7|\2\2\u061c\u061d\5B\"\2\u061d\u061e\5\u00e4"+
		"s\2\u061e\u0620\3\2\2\2\u061f\u05f2\3\2\2\2\u061f\u05f4\3\2\2\2\u061f"+
		"\u05f5\3\2\2\2\u061f\u05f6\3\2\2\2\u061f\u05f7\3\2\2\2\u061f\u05fa\3\2"+
		"\2\2\u061f\u05fc\3\2\2\2\u061f\u0607\3\2\2\2\u061f\u0612\3\2\2\2\u061f"+
		"\u0617\3\2\2\2\u061f\u061b\3\2\2\2\u0620\u0632\3\2\2\2\u0621\u0622\f\5"+
		"\2\2\u0622\u0623\5\u00e6t\2\u0623\u0624\5\u00d2j\6\u0624\u0631\3\2\2\2"+
		"\u0625\u0626\f\4\2\2\u0626\u0627\5\u00e8u\2\u0627\u0628\5\u00d2j\5\u0628"+
		"\u0631\3\2\2\2\u0629\u062a\f\3\2\2\u062a\u062b\5\u00eav\2\u062b\u062c"+
		"\5\u00d2j\4\u062c\u0631\3\2\2\2\u062d\u062e\f\16\2\2\u062e\u062f\7D\2"+
		"\2\u062f\u0631\5\u00d8m\2\u0630\u0621\3\2\2\2\u0630\u0625\3\2\2\2\u0630"+
		"\u0629\3\2\2\2\u0630\u062d\3\2\2\2\u0631\u0634\3\2\2\2\u0632\u0630\3\2"+
		"\2\2\u0632\u0633\3\2\2\2\u0633\u00d3\3\2\2\2\u0634\u0632\3\2\2\2\u0635"+
		"\u0642\5\u00d6l\2\u0636\u0642\5\u00dan\2\u0637\u0638\7\u045a\2\2\u0638"+
		"\u0642\5\u00dan\2\u0639\u0642\5\u00dco\2\u063a\u0642\5\u00dep\2\u063b"+
		"\u0642\7\u0478\2\2\u063c\u0642\7\u047a\2\2\u063d\u063f\7\u0095\2\2\u063e"+
		"\u063d\3\2\2\2\u063e\u063f\3\2\2\2\u063f\u0640\3\2\2\2\u0640\u0642\t)"+
		"\2\2\u0641\u0635\3\2\2\2\u0641\u0636\3\2\2\2\u0641\u0637\3\2\2\2\u0641"+
		"\u0639\3\2\2\2\u0641\u063a\3\2\2\2\u0641\u063b\3\2\2\2\u0641\u063c\3\2"+
		"\2\2\u0641\u063e\3\2\2\2\u0642\u00d5\3\2\2\2\u0643\u0645\7\u047b\2\2\u0644"+
		"\u0643\3\2\2\2\u0644\u0645\3\2\2\2\u0645\u0646\3\2\2\2\u0646\u0649\7\u0475"+
		"\2\2\u0647\u0649\7\u0474\2\2\u0648\u0644\3\2\2\2\u0648\u0647\3\2\2\2\u0649"+
		"\u064b\3\2\2\2\u064a\u064c\7\u0475\2\2\u064b\u064a\3\2\2\2\u064c\u064d"+
		"\3\2\2\2\u064d\u064b\3\2\2\2\u064d\u064e\3\2\2\2\u064e\u065b\3\2\2\2\u064f"+
		"\u0651\7\u047b\2\2\u0650\u064f\3\2\2\2\u0650\u0651\3\2\2\2\u0651\u0652"+
		"\3\2\2\2\u0652\u0655\7\u0475\2\2\u0653\u0655\7\u0474\2\2\u0654\u0650\3"+
		"\2\2\2\u0654\u0653\3\2\2\2\u0655\u0658\3\2\2\2\u0656\u0657\7D\2\2\u0657"+
		"\u0659\5\u00d8m\2\u0658\u0656\3\2\2\2\u0658\u0659\3\2\2\2\u0659\u065b"+
		"\3\2\2\2\u065a\u0648\3\2\2\2\u065a\u0654\3\2\2\2\u065b\u00d7\3\2\2\2\u065c"+
		"\u065f\5\36\20\2\u065d\u065f\7\u0475\2\2\u065e\u065c\3\2\2\2\u065e\u065d"+
		"\3\2\2\2\u065f\u00d9\3\2\2\2\u0660\u0661\t*\2\2\u0661\u00db\3\2\2\2\u0662"+
		"\u0664\7\u047b\2\2\u0663\u0662\3\2\2\2\u0663\u0664\3\2\2\2\u0664\u0665"+
		"\3\2\2\2\u0665\u0666\7\u0477\2\2\u0666\u00dd\3\2\2\2\u0667\u0668\t+\2"+
		"\2\u0668\u00df\3\2\2\2\u0669\u066a\t,\2\2\u066a\u00e1\3\2\2\2\u066b\u066c"+
		"\t-\2\2\u066c\u00e3\3\2\2\2\u066d\u067b\5*\26\2\u066e\u067b\7\u00fc\2"+
		"\2\u066f\u067b\7\u010f\2\2\u0670\u067b\7\u0110\2\2\u0671\u067b\7\u0111"+
		"\2\2\u0672\u067b\7\u0112\2\2\u0673\u067b\7\u0113\2\2\u0674\u067b\7\u0114"+
		"\2\2\u0675\u067b\7\u0115\2\2\u0676\u067b\7\u0116\2\2\u0677\u067b\7\u0117"+
		"\2\2\u0678\u067b\7\u0118\2\2\u0679\u067b\7\u0119\2\2\u067a\u066d\3\2\2"+
		"\2\u067a\u066e\3\2\2\2\u067a\u066f\3\2\2\2\u067a\u0670\3\2\2\2\u067a\u0671"+
		"\3\2\2\2\u067a\u0672\3\2\2\2\u067a\u0673\3\2\2\2\u067a\u0674\3\2\2\2\u067a"+
		"\u0675\3\2\2\2\u067a\u0676\3\2\2\2\u067a\u0677\3\2\2\2\u067a\u0678\3\2"+
		"\2\2\u067a\u0679\3\2\2\2\u067b\u00e5\3\2\2\2\u067c\u067d\7\u045f\2\2\u067d"+
		"\u0684\7\u045f\2\2\u067e\u067f\7\u045e\2\2\u067f\u0684\7\u045e\2\2\u0680"+
		"\u0684\7\u0463\2\2\u0681\u0684\7\u0464\2\2\u0682\u0684\7\u0462\2\2\u0683"+
		"\u067c\3\2\2\2\u0683\u067e\3\2\2\2\u0683\u0680\3\2\2\2\u0683\u0681\3\2"+
		"\2\2\u0683\u0682\3\2\2\2\u0684\u00e7\3\2\2\2\u0685\u0686\t.\2\2\u0686"+
		"\u00e9\3\2\2\2\u0687\u0688\7\u045a\2\2\u0688\u068d\7\u045e\2\2\u0689\u068a"+
		"\7\u045a\2\2\u068a\u068b\7\u045e\2\2\u068b\u068d\7\u045e\2\2\u068c\u0687"+
		"\3\2\2\2\u068c\u0689\3\2\2\2\u068d\u00eb\3\2\2\2\u068e\u0690\t/\2\2\u068f"+
		"\u0691\5\u00eex\2\u0690\u068f\3\2\2\2\u0690\u0691\3\2\2\2\u0691\u06aa"+
		"\3\2\2\2\u0692\u0694\7\u00fd\2\2\u0693\u0695\5\u00eex\2\u0694\u0693\3"+
		"\2\2\2\u0694\u0695\3\2\2\2\u0695\u069c\3\2\2\2\u0696\u0697\7B\2\2\u0697"+
		"\u069a\7\u00bb\2\2\u0698\u069a\7\u0346\2\2\u0699\u0696\3\2\2\2\u0699\u0698"+
		"\3\2\2\2\u069a\u069b\3\2\2\2\u069b\u069d\5\u00f0y\2\u069c\u0699\3\2\2"+
		"\2\u069c\u069d\3\2\2\2\u069d\u06aa\3\2\2\2\u069e\u06aa\t\60\2\2\u069f"+
		"\u06a1\7\u00f5\2\2\u06a0\u06a2\5\u00f2z\2\u06a1\u06a0\3\2\2\2\u06a1\u06a2"+
		"\3\2\2\2\u06a2\u06aa\3\2\2\2\u06a3\u06a5\t\61\2\2\u06a4\u06a6\7\u00ed"+
		"\2\2\u06a5\u06a4\3\2\2\2\u06a5\u06a6\3\2\2\2\u06a6\u06aa\3\2\2\2\u06a7"+
		"\u06a8\7\u00d6\2\2\u06a8\u06aa\7\65\2\2\u06a9\u068e\3\2\2\2\u06a9\u0692"+
		"\3\2\2\2\u06a9\u069e\3\2\2\2\u06a9\u069f\3\2\2\2\u06a9\u06a3\3\2\2\2\u06a9"+
		"\u06a7\3\2\2\2\u06aa\u00ed\3\2\2\2\u06ab\u06ac\5> \2\u06ac\u06ad\5\u00da"+
		"n\2\u06ad\u06ae\5@!\2\u06ae\u00ef\3\2\2\2\u06af\u06b4\7\u0101\2\2\u06b0"+
		"\u06b4\5\"\22\2\u06b1\u06b4\7\u0475\2\2\u06b2\u06b4\7\u0472\2\2\u06b3"+
		"\u06af\3\2\2\2\u06b3\u06b0\3\2\2\2\u06b3\u06b1\3\2\2\2\u06b3\u06b2\3\2"+
		"\2\2\u06b4\u00f1\3\2\2\2\u06b5\u06b6\5> \2\u06b6\u06b7\5\u00dan\2\u06b7"+
		"\u06b8\7\u0468\2\2\u06b8\u06b9\5\u00dan\2\u06b9\u06ba\5@!\2\u06ba\u00f3"+
		"\3\2\2\2\u06bb\u06bc\7\u00dc\2\2\u06bc\u06bd\5\u0106\u0084\2\u06bd\u06be"+
		"\7\u00cd\2\2\u06be\u06bf\5\u0106\u0084\2\u06bf\u00f5\3\2\2\2\u06c0\u06c5"+
		"\5\u00d4k\2\u06c1\u06c5\5\64\33\2\u06c2\u06c5\5:\36\2\u06c3\u06c5\5B\""+
		"\2\u06c4\u06c0\3\2\2\2\u06c4\u06c1\3\2\2\2\u06c4\u06c2\3\2\2\2\u06c4\u06c3"+
		"\3\2\2\2\u06c5\u06cf\3\2\2\2\u06c6\u06cb\7\u0468\2\2\u06c7\u06cc\5\u00d4"+
		"k\2\u06c8\u06cc\5\64\33\2\u06c9\u06cc\5:\36\2\u06ca\u06cc\5B\"\2\u06cb"+
		"\u06c7\3\2\2\2\u06cb\u06c8\3\2\2\2\u06cb\u06c9\3\2\2\2\u06cb\u06ca\3\2"+
		"\2\2\u06cc\u06ce\3\2\2\2\u06cd\u06c6\3\2\2\2\u06ce\u06d1\3\2\2\2\u06cf"+
		"\u06cd\3\2\2\2\u06cf\u06d0\3\2\2\2\u06d0\u00f7\3\2\2\2\u06d1\u06cf\3\2"+
		"\2\2\u06d2\u06d3\7\u01ec\2\2\u06d3\u06d8\5\u00fa~\2\u06d4\u06d5\7\u0468"+
		"\2\2\u06d5\u06d7\5\u00fa~\2\u06d6\u06d4\3\2\2\2\u06d7\u06da\3\2\2\2\u06d8"+
		"\u06d6\3\2\2\2\u06d8\u06d9\3\2\2\2\u06d9\u06e1\3\2\2\2\u06da\u06d8\3\2"+
		"\2\2\u06db\u06dc\7\u01ec\2\2\u06dc\u06dd\5\u00dan\2\u06dd\u06de\7\u045a"+
		"\2\2\u06de\u06df\5\u00dan\2\u06df\u06e1\3\2\2\2\u06e0\u06d2\3\2\2\2\u06e0"+
		"\u06db\3\2\2\2\u06e1\u00f9\3\2\2\2\u06e2\u06e4\5\u00dan\2\u06e3\u06e5"+
		"\t\62\2\2\u06e4\u06e3\3\2\2\2\u06e4\u06e5\3\2\2\2\u06e5\u00fb\3\2\2\2"+
		"\u06e6\u06f1\7\u0097\2\2\u06e7\u06e9\5\u00e2r\2\u06e8\u06e7\3\2\2\2\u06e8"+
		"\u06e9\3\2\2\2\u06e9\u06ea\3\2\2\2\u06ea\u06f1\5\u00d4k\2\u06eb\u06f1"+
		"\5\u00fe\u0080\2\u06ec\u06ed\5> \2\u06ed\u06ee\5B\"\2\u06ee\u06ef\5@!"+
		"\2\u06ef\u06f1\3\2\2\2\u06f0\u06e6\3\2\2\2\u06f0\u06e8\3\2\2\2\u06f0\u06eb"+
		"\3\2\2\2\u06f0\u06ec\3\2\2\2\u06f1\u06f5\3\2\2\2\u06f2\u06f3\7\u0099\2"+
		"\2\u06f3\u06f4\7\u00d7\2\2\u06f4\u06f6\5\u00fe\u0080\2\u06f5\u06f2\3\2"+
		"\2\2\u06f5\u06f6\3\2\2\2\u06f6\u00fd\3\2\2\2\u06f7\u06fe\t\63\2\2\u06f8"+
		"\u06fa\5> \2\u06f9\u06fb\5\u00dan\2\u06fa\u06f9\3\2\2\2\u06fa\u06fb\3"+
		"\2\2\2\u06fb\u06fc\3\2\2\2\u06fc\u06fd\5@!\2\u06fd\u06ff\3\2\2\2\u06fe"+
		"\u06f8\3\2\2\2\u06fe\u06ff\3\2\2\2\u06ff\u0708\3\2\2\2\u0700\u0701\7\u015f"+
		"\2\2\u0701\u0703\5> \2\u0702\u0704\5\u00dan\2\u0703\u0702\3\2\2\2\u0703"+
		"\u0704\3\2\2\2\u0704\u0705\3\2\2\2\u0705\u0706\5@!\2\u0706\u0708\3\2\2"+
		"\2\u0707\u06f7\3\2\2\2\u0707\u0700\3\2\2\2\u0708\u00ff\3\2\2\2\u0709\u070b"+
		"\5\u0104\u0083\2\u070a\u0709\3\2\2\2\u070a\u070b\3\2\2\2\u070b\u070c\3"+
		"\2\2\2\u070c\u070e\t\64\2\2\u070d\u070f\5\u0102\u0082\2\u070e\u070d\3"+
		"\2\2\2\u070e\u070f\3\2\2\2\u070f\u0710\3\2\2\2\u0710\u0712\5> \2\u0711"+
		"\u0713\t\2\2\2\u0712\u0711\3\2\2\2\u0712\u0713\3\2\2\2\u0713\u0714\3\2"+
		"\2\2\u0714\u0715\5\u0106\u0084\2\u0715\u0717\5@!\2\u0716\u0718\5\u0108"+
		"\u0085\2\u0717\u0716\3\2\2\2\u0717\u0718\3\2\2\2\u0718\u0752\3\2\2\2\u0719"+
		"\u071b\5\u0104\u0083\2\u071a\u0719\3\2\2\2\u071a\u071b\3\2\2\2\u071b\u071c"+
		"\3\2\2\2\u071c\u071e\7\u013e\2\2\u071d\u071f\5\u0102\u0082\2\u071e\u071d"+
		"\3\2\2\2\u071e\u071f\3\2\2\2\u071f\u0720\3\2\2\2\u0720\u0729\5> \2\u0721"+
		"\u072a\7\u0456\2\2\u0722\u0724\5\u010a\u0086\2\u0723\u0722\3\2\2\2\u0723"+
		"\u0724\3\2\2\2\u0724\u0725\3\2\2\2\u0725\u072a\5\u0106\u0084\2\u0726\u0727"+
		"\5\u010c\u0087\2\u0727\u0728\5\u00f6|\2\u0728\u072a\3\2\2\2\u0729\u0721"+
		"\3\2\2\2\u0729\u0723\3\2\2\2\u0729\u0726\3\2\2\2\u072a\u072b\3\2\2\2\u072b"+
		"\u072d\5@!\2\u072c\u072e\5\u0108\u0085\2\u072d\u072c\3\2\2\2\u072d\u072e"+
		"\3\2\2\2\u072e\u0752\3\2\2\2\u072f\u0730\t\65\2\2\u0730\u0732\5> \2\u0731"+
		"\u0733\7\60\2\2\u0732\u0731\3\2\2\2\u0732\u0733\3\2\2\2\u0733\u0734\3"+
		"\2\2\2\u0734\u0735\5\u0106\u0084\2\u0735\u0737\5@!\2\u0736\u0738\5\u0108"+
		"\u0085\2\u0737\u0736\3\2\2\2\u0737\u0738\3\2\2\2\u0738\u0752\3\2\2\2\u0739"+
		"\u073a\7\u0142\2\2\u073a\u073c\5> \2\u073b\u073d\7Y\2\2\u073c\u073b\3"+
		"\2\2\2\u073c\u073d\3\2\2\2\u073d\u073e\3\2\2\2\u073e\u0749\5\u00f6|\2"+
		"\u073f\u0740\7\u009e\2\2\u0740\u0741\7<\2\2\u0741\u0746\5h\65\2\u0742"+
		"\u0743\7\u0468\2\2\u0743\u0745\5h\65\2\u0744\u0742\3\2\2\2\u0745\u0748"+
		"\3\2\2\2\u0746\u0744\3\2\2\2\u0746\u0747\3\2\2\2\u0747\u074a\3\2\2\2\u0748"+
		"\u0746\3\2\2\2\u0749\u073f\3\2\2\2\u0749\u074a\3\2\2\2\u074a\u074d\3\2"+
		"\2\2\u074b\u074c\7\u00bc\2\2\u074c\u074e\7\u0475\2\2\u074d\u074b\3\2\2"+
		"\2\u074d\u074e\3\2\2\2\u074e\u074f\3\2\2\2\u074f\u0750\5@!\2\u0750\u0752"+
		"\3\2\2\2\u0751\u070a\3\2\2\2\u0751\u071a\3\2\2\2\u0751\u072f\3\2\2\2\u0751"+
		"\u0739\3\2\2\2\u0752\u0101\3\2\2\2\u0753\u0754\7\u0223\2\2\u0754\u0103"+
		"\3\2\2\2\u0755\u0756\7.\2\2\u0756\u0105\3\2\2\2\u0757\u075c\5\u00d4k\2"+
		"\u0758\u075c\5\64\33\2\u0759\u075c\5:\36\2\u075a\u075c\5B\"\2\u075b\u0757"+
		"\3\2\2\2\u075b\u0758\3\2\2\2\u075b\u0759\3\2\2\2\u075b\u075a\3\2\2\2\u075c"+
		"\u0107\3\2\2\2\u075d\u0765\7\u00a0\2\2\u075e\u0760\5> \2\u075f\u0761\5"+
		"b\62\2\u0760\u075f\3\2\2\2\u0760\u0761\3\2\2\2\u0761\u0762\3\2\2\2\u0762"+
		"\u0763\5@!\2\u0763\u0766\3\2\2\2\u0764\u0766\5`\61\2\u0765\u075e\3\2\2"+
		"\2\u0765\u0764\3\2\2\2\u0766\u0109\3\2\2\2\u0767\u0768\7\60\2\2\u0768"+
		"\u010b\3\2\2\2\u0769\u076a\7Y\2\2\u076a\u010d\3\2\2\2\u076b\u076c\t\66"+
		"\2\2\u076c\u076d\5> \2\u076d\u0770\5B\"\2\u076e\u076f\7\u0468\2\2\u076f"+
		"\u0771\5\u00dan\2\u0770\u076e\3\2\2\2\u0770\u0771\3\2\2\2\u0771\u0774"+
		"\3\2\2\2\u0772\u0773\7\u0468\2\2\u0773\u0775\5\u00dan\2\u0774\u0772\3"+
		"\2\2\2\u0774\u0775\3\2\2\2\u0775\u0776\3\2\2\2\u0776\u0777\5@!\2\u0777"+
		"\u0778\5\u0108\u0085\2\u0778\u0793\3\2\2\2\u0779\u077a\t\67\2\2\u077a"+
		"\u077b\5> \2\u077b\u077c\5B\"\2\u077c\u077d\5@!\2\u077d\u077e\5\u0108"+
		"\u0085\2\u077e\u0793\3\2\2\2\u077f\u0780\t8\2\2\u0780\u0781\5> \2\u0781"+
		"\u0782\5@!\2\u0782\u0783\5\u0108\u0085\2\u0783\u0793\3\2\2\2\u0784\u0785"+
		"\7\u0149\2\2\u0785\u0786\5> \2\u0786\u0787\5B\"\2\u0787\u0788\7\u0468"+
		"\2\2\u0788\u0789\5\u00dan\2\u0789\u078a\5@!\2\u078a\u078b\5\u0108\u0085"+
		"\2\u078b\u0793\3\2\2\2\u078c\u078d\7\u0148\2\2\u078d\u078e\5> \2\u078e"+
		"\u078f\5\u00dan\2\u078f\u0790\5@!\2\u0790\u0791\5\u0108\u0085\2\u0791"+
		"\u0793\3\2\2\2\u0792\u076b\3\2\2\2\u0792\u0779\3\2\2\2\u0792\u077f\3\2"+
		"\2\2\u0792\u0784\3\2\2\2\u0792\u078c\3\2\2\2\u0793\u010f\3\2\2\2\u0794"+
		"\u07ac\5\60\31\2\u0795\u07ac\7\u02e8\2\2\u0796\u07ac\7\u0159\2\2\u0797"+
		"\u07ac\7\u0155\2\2\u0798\u07ac\7\u0156\2\2\u0799\u07ac\7\u0157\2\2\u079a"+
		"\u07ac\7\u015a\2\2\u079b\u07ac\7\u015b\2\2\u079c\u07ac\7\u015c\2\2\u079d"+
		"\u07ac\7t\2\2\u079e\u07ac\7{\2\2\u079f\u07ac\7\u0158\2\2\u07a0\u07ac\7"+
		"\u015e\2\2\u07a1\u07ac\7\u0210\2\2\u07a2\u07ac\7\u015f\2\2\u07a3\u07ac"+
		"\7\u00af\2\2\u07a4\u07ac\7\u0161\2\2\u07a5\u07ac\7\u0162\2\2\u07a6\u07ac"+
		"\7\u0163\2\2\u07a7\u07ac\7\u0164\2\2\u07a8\u07ac\7\u0165\2\2\u07a9\u07ac"+
		"\7\u0166\2\2\u07aa\u07ac\7\u0167\2\2\u07ab\u0794\3\2\2\2\u07ab\u0795\3"+
		"\2\2\2\u07ab\u0796\3\2\2\2\u07ab\u0797\3\2\2\2\u07ab\u0798\3\2\2\2\u07ab"+
		"\u0799\3\2\2\2\u07ab\u079a\3\2\2\2\u07ab\u079b\3\2\2\2\u07ab\u079c\3\2"+
		"\2\2\u07ab\u079d\3\2\2\2\u07ab\u079e\3\2\2\2\u07ab\u079f\3\2\2\2\u07ab"+
		"\u07a0\3\2\2\2\u07ab\u07a1\3\2\2\2\u07ab\u07a2\3\2\2\2\u07ab\u07a3\3\2"+
		"\2\2\u07ab\u07a4\3\2\2\2\u07ab\u07a5\3\2\2\2\u07ab\u07a6\3\2\2\2\u07ab"+
		"\u07a7\3\2\2\2\u07ab\u07a8\3\2\2\2\u07ab\u07a9\3\2\2\2\u07ab\u07aa\3\2"+
		"\2\2\u07ac\u0111\3\2\2\2\u07ad\u07ae\t9\2\2\u07ae\u07af\5> \2\u07af\u07b0"+
		"\5\u0106\u0084\2\u07b0\u07b1\5@!\2\u07b1\u0113\3\2\2\2\u07b2\u07b3\t\36"+
		"\2\2\u07b3\u0115\3\2\2\2\u07b4\u07b5\7\u00dd\2\2\u07b5\u0117\3\2\2\2\u07b6"+
		"\u07b7\5B\"\2\u07b7\u0119\3\2\2\2\u07b8\u07b9\5\u0086D\2\u07b9\u011b\3"+
		"\2\2\2\u07ba\u07bb\5\u0088E\2\u07bb\u011d\3\2\2\2\u0103\u0120\u0124\u0128"+
		"\u012e\u0132\u0136\u0138\u013b\u013e\u0141\u0147\u014b\u014e\u0151\u0154"+
		"\u0157\u0159\u0161\u0167\u016b\u0171\u0173\u0179\u0182\u0189\u018f\u0193"+
		"\u0199\u01a2\u01a9\u01af\u01b3\u01b9\u01be\u01c4\u01cc\u01de\u01e2\u01e9"+
		"\u01f2\u01f5\u01f9\u01fc\u0200\u0204\u0207\u0209\u020f\u021c\u0233\u0235"+
		"\u023a\u023c\u0242\u024c\u0253\u0258\u025e\u027f\u0283\u028b\u028f\u0298"+
		"\u02a0\u02a5\u02ad\u02b2\u02b7\u02b9\u02c2\u02c7\u02cf\u02d4\u02dc\u02e4"+
		"\u02e7\u02f1\u0303\u0309\u030d\u0313\u0317\u031b\u0327\u032c\u0334\u033e"+
		"\u0343\u034d\u035a\u0360\u0363\u0369\u0379\u037f\u0388\u038a\u0392\u0395"+
		"\u0398\u039b\u039e\u03a1\u03a4\u03a7\u03aa\u03ad\u03b0\u03b2\u03bb\u03c0"+
		"\u03c4\u03cc\u03cf\u03d4\u03d8\u03db\u03e4\u03e9\u0401\u0407\u040a\u040d"+
		"\u0410\u0419\u0423\u0428\u0431\u043a\u0445\u044c\u0451\u0459\u0465\u046b"+
		"\u046d\u0473\u0475\u0477\u047b\u0481\u0489\u0491\u0499\u04a3\u04a9\u04ae"+
		"\u04b1\u04b4\u04b7\u04ba\u04bd\u04ca\u04ce\u04d2\u04d6\u04da\u04e2\u04e8"+
		"\u04f0\u04f5\u04fb\u04ff\u0507\u050a\u0511\u0514\u051a\u0521\u052e\u0535"+
		"\u0540\u054a\u0550\u0553\u0561\u0565\u0573\u0578\u057a\u0586\u0589\u0595"+
		"\u059d\u05a9\u05b2\u05b4\u05bf\u05c3\u05cd\u05d1\u05da\u05de\u05f0\u0602"+
		"\u060e\u061f\u0630\u0632\u063e\u0641\u0644\u0648\u064d\u0650\u0654\u0658"+
		"\u065a\u065e\u0663\u067a\u0683\u068c\u0690\u0694\u0699\u069c\u06a1\u06a5"+
		"\u06a9\u06b3\u06c4\u06cb\u06cf\u06d8\u06e0\u06e4\u06e8\u06f0\u06f5\u06fa"+
		"\u06fe\u0703\u0707\u070a\u070e\u0712\u0717\u071a\u071e\u0723\u0729\u072d"+
		"\u0732\u0737\u073c\u0746\u0749\u074d\u0751\u075b\u0760\u0765\u0770\u0774"+
		"\u0792\u07ab";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}